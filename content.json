{"pages":[{"title":"","text":"","link":"/about/index.html"},{"title":"分类","text":"","link":"/categories/index.html"},{"title":"标签","text":"","link":"/tags/index.html"}],"posts":[{"title":"iOS 面试技术点","text":"iOS 面试技术点 问题 期望 NSDicationary 的本质 理解哈希表，知道其遍历不是顺序的 ARC下内存泄漏的原因，循环引用时如何发生以及如何避免 理解ARC的机制从而知道内存泄漏的产生，并知道循环引用是如何产生和避免 常见的导致程序崩溃的原因 知道崩溃的原因本质是僵尸内存或指向错误，能够在实际开发中避免 使用多线程的几种方式 知道NSThread、NSOperationQueue和GCD三种多线程实现方式并能简单介绍应用实例，尤其要熟悉GCD的使用 如何实现一个单例 能够大体说出单例的实现原理，实现方法多多益善，能讲出各个实现方法的优缺点最好 NSArray和NSSet的区别以及使用时机 能够理解顺序表和集合的概念 NSInteger和int的区别 能知道NSInteger的位长大于等于int，考察对基础数据类型的理解 NSDictionary的快速构建方法以及注意事项 能够知道NSDictionary的快速构建方法，尤其要知道不可传nil的指针 介绍一下Autolayout和Autoresizing 考察对两种布局方法的理解，能够答题说出它们的原理 对象及ViewController的生命周期 对ViewController的生命周期有所了解 线程锁的几种使用方式 至少知道NSLock和synchronized，能够了解semaphore、递归锁、条件锁和分布锁可加分 block的使用以及注意事项 实际使用过block以及知道如何避免循环引用 strong、weak、retain、unsafe_unretain、assign、copy的区别以及使用场景 能够说出各个修饰符的作用 数据持久化的几种方式、应用场景和优缺点 至少知道NSUserDefault和Plist、文件三种保存方式，知道sqlite或CoreData可加分 如何进行一个http协议的网络请求 能够知道NSURLConnection或NSURLSession的使用方式 简介应用的生命周期 能够知道应用的生命周期，每个周期的回调是在什么时机 NSNotification的使用及注意事项 能够理解NSNotification的广播机制、传参以及避免key覆盖 NSUserDefault使用时应该注意什么 能够知道NSUserDefault本质是保存到plist文件，以及对象要实现NSCoder协议 OC Runtime介绍 对Objective-C的底层能够有自己的正确理解 OC Runloop介绍 对Objective-C的底层能够有自己的正确理解 Category的本质 对Objective-C的底层能够有自己的正确理解 函数式编程和ReactiveCocoa 对Objective-C的底层能够有自己的正确理解 block的实现原理 对Objective-C的底层能够有自己的正确理解 对Cocoa中UITableView、UILabel等组件的实现原理有自己的理解 能够通过组件的表象看到本质，考察编程经验和推导能力 介绍UIView的组成 能够对UIView有深入理解 介绍CoreGraphics、CoreAnimation、CoreText的技术架构及简单使用 能够熟悉和理解iOS开发中常用的Core系列库，能熟练使用它们 介绍Xcode的Build Settings和Build Phases中常用的设置 能够基本知道iOS项目的编译过程 一个iOS项目的大体编译、链接以及运行过程 能够基本知道iOS项目的编译过程 介绍Cocoapods（或其它包管理工具）的实现思路 能够基本知道iOS项目的编译过程 如何使用Xcode进行调试和排错 知道如何调试和排错 介绍Instruments中常用的功能 能够使用工具进行性能分析和监控 MVVM模式介绍及其优缺点","link":"/iOS面试技术点/"},{"title":"ofo面试题","text":"ofo面试题 1、block 的底层实现? 2、block 的类型有哪几种? 3、你碰到的 block 的循环引用? 4、为什么你在用 Masonry , AFNetworking 的 block 回调不需要对 self 进行 __weak? 5、出现野指针的情况大概有哪些？ 6、Swift 里的闭包和 OC 的 block 的区别。 7、Sqlite 使用的时候需要注意什么。","link":"/ofo面试题/"},{"title":"乐为金融面试题","text":"乐为金融面试题 1、说一下系统框架和生命周期。 2、系统存储空间有哪些？全局变量区、栈、堆、代码区 3、栈区是用来放什么的？ 4、栈是什么结构？链表是什么结构？ 5、进程和线程有啥关系？进程是不是一个App？ 6、说一下 MVC、MVVM 7、你了解的设计模式？ 8、你做过的内存优化有哪些？ 9、说一下 AFN/SDWebImage 10、做直播、聊天，了解长连接是什么实现的吗？ 11、面向对象的三个特性？封装是什么？多态是什么？ 12、你用 OC 开发还是 Swift 开发？Swift 有什么优势？","link":"/乐为金融面试题/"},{"title":"京东面试题","text":"京东面试题 1、AFNetworking 是如何实现多线程的。 2、如何自己控制 AFNetWorking 的多线程，如果解决上传多张图片引起的内存剧增的问题。 3、模块化的实现过程。 4、自动化测试。 5、数据库的升级（当前数据库不能满足业务了，1.0-&gt;2.0-&gt;3.0…..）。","link":"/京东面试题/"},{"title":"太一云面试题","text":"太一云面试题 1、@property属性的修饰符？String 为什么用 copy ？String 能不能用 strong ？NSMutableString 能不能用Strong？他说MutableString用Strong会崩溃。 2、单例的本质？项目里怎么用的单例？ 3、说一下 KVO，说一下通知，通知属不属于观察者模式？ 4、说一下 GCD的同步、异步。GCD 你是怎么用的？ 5、说一下内存管理。MRC 了解吗？ARC 下系统是怎么自动加 retain、release 的？ 6、了解 AutoreleasePool 吗？如果不写 autorelease，对象会被添加到 Pool 里吗？ 7、了解 Socket 吗？","link":"/太一云面试题/"},{"title":"十点读书面试题","text":"十点读书面试题 1、MRC 和 ARC，自动释放池 AutoreleasePool 和 ARC 的关系？ 2、直播是用的 rmtp 协议吗？rmtp 说一下？ 3、聊天用的什么？web Socket 了解吗？HTTP 属于哪一层？web socket 属于哪一层？ 4、copy 和 MutableCopy ？从可变不可变和深浅拷贝两个层面说一下区别？ 5、NSString 用 copy 和用 Strong 有什么区别？ 6、内存优化？ 7、weak 和 unown 的区别？ 8、协议继承什么？继承 NSObjectProtocol 和继承自某个 class 有什么区别？ 9、Swift 是运行时语言吗？Swift 怎么用 OC 的运行时特性？","link":"/十点读书面试题/"},{"title":"好未来面试题","text":"好未来面试题 一面1、说一下optional。（？ ！ ？？ 几种解包方式 if let、guard、？？等） 2、说一下闭包。 3、比较代理、通知、KVO？这三个谁的效率最高，谁的效率最低？( KVO 效率最低，因为 Runtime ） 4、NSString 和 String 的区别？（ String 是值类型，NSString 是引用类型） 5、Swift 跟 OC 的区别？（ OC 是动态的语言，Swift 是静态的语言）OC 是面向对象的，Swift 呢？（面向对象、面向协议、响应式编程）解释一下面向协议编程？ 6、说一下 MRC ？自动释放池？自动释放池什么时候释放？（我说 drain ） 7、说一下多线程？（我提到了 dispatch_once 单例） 8、分别用 OC 和 Swift 手写一下单例。（ Swift 的单例我忘记写 static 了，但是经提醒立马说出来了） 9、SnaptKit 内部看过吗？ 10、链式语法的实现。 UIView.top.equalTo().offSet(10) UIView.left.equalTo().offSet(10) 为什么能写成UIView.top.left.offSet(10) 二面主要是手写算法题： 1、用两个栈实现队列。 2、从扑克牌中抽出5张，写一个方法判断是不是顺子。（如34567）大小王是万能的，可以替代任意数字。 三面项目经理 四面HR","link":"/好未来面试题/"},{"title":"好未来面试题及答案","text":"好未来面试题 1. 一面1、说一下optional。?! ?? 是什么意思？有几种解包方式？解包方式：if let、guard、!强制解包、?? 等。 ?! ?? let a = b ?? c 如果b不为nil，则a = b;否则a = c; 2、说一下闭包。闭包是能够读取其他函数内部变量的函数，可以理解成定义在一个函数内部的函数。 可以用typealias起别名 1234typealias testBlock = (String) -&gt; Voidlet aaa: testBlock = {str in print(str)} 值捕获 闭包可以捕获上下文中的常量和变量 逃逸闭包 当一个闭包作为参数传入函数中，这个闭包需要等函数执行结束返回后执行，这种情况就称作这个闭包在函数中逃逸。在涉及异步操作时经常用到，特别是网络请求后要进行请求成功后的回调时，闭包就要逃逸掉，这时就要在闭包形参前加上@escaping关键字。 3、比较代理、通知、KVO？这三个谁的效率最高，谁的效率最低？KVO 效率最低，因为使用到了 Runtime。 代理效率最高，因为是一对一。 4、NSString 和 String 的区别？String 是值类型，NSString 是引用类型。 5、Swift 跟 OC 的区别？OC 是面向对象的，Swift 呢？（面向对象、面向协议、响应式编程）解释一下面向协议编程？OC 是动态的语言，Swift 是静态的语言。 6、说一下 MRC ？自动释放池？自动释放池什么时候释放？iOS 在主线程的Runloop中注册了2个Observer 第1个Observer监听了kCFRunLoopEntry事件，会调用objc_autoreleasePoolPush() 第2个Observer 监听了kCFRunLoopBeforeWaiting事件，会调用objc_autoreleasePoolPop()、objc_autoreleasePoolPush() 监听了kCFRunLoopBeforeExit事件，会调用objc_autoreleasePoolPop() 7、说一下多线程？NSThread NSOperation GCD 8、分别用 OC 和 Swift 手写一下单例。单例模式在创建过程中，要保证实例变量只被创建一次。在整个开发中需要特别注意线程安全，即使在多线程情况下，依然只初始化一次变量。 12345678+ (instanceType)sharedManager { static Manager *sharedManager = nil; static dispatch_once_t onceToken; dispatch_once(&amp;onceToken, ^{ sharedManager = [[Manager alloc] init]; }); return sharedManager;} 在 Swift 中，let 关键字已经保证了实例变量不会被修改，所以单例的创建就简单很多：1234class Manager { static let shared = Manager(); private init() {}} 9、SnaptKit 内部看过吗？10、链式语法的实现。UIView.top.equalTo().offSet(10) UIView.left.equalTo().offSet(10) 为什么能写成UIView.top.left.offSet(10) ？ block 返回 self 自身，例如： 123456789// 当前类是ViewController类 block 返回类对象 类对象就可以继续调用 test 方法了- (ViewController *(^)(int))test{ ViewController *(^block)(int i) = ^ViewController *(int i){ NSLog(@\"%d\",i); return self; }; return block;} 调用的时候就可以这样写： 1self.test(1).test(2).test(3); 链条的执行顺序 self 调用 test 方法 test 方法返回 block block 得到小括号中的参数 并执行 block 中的代码 block 返回对象 对象接着调用 test 方法 实际应用中 test 可以是任何这种格式的方法 OC中链式语法的使用及原理 2. 二面主要是手写算法题： 1、用两个栈实现队列。123456789101112131415var inStack = [];var outStack = [];function push(node){ inStack.push(node);}function pop(){ if (outStack.length == 0) { while(inStack.length != 0) { outStack.push(inStack.pop()); } } return outStack.pop();} 2、从扑克牌中抽出5张，写一个方法判断是不是顺子。（如34567）大小王是万能的，可以替代任意数字。剑指 Offer 61. 扑克牌中的顺子 1234567891011121314var isStraight = function(nums) { let repeat = new Set(); let max = 0, min = 14; for (let i = 0; i &lt; nums.length; i++) { if (nums[i] == 0) continue; // 跳过大小王 max = Math.max(max, nums[i]); // 最大牌 min = Math.min(min, nums[i]); // 最小牌 if (repeat.has(nums[i])) { return false; } repeat.add(nums[i]); } return max - min &lt; 5; // 最大牌 - 最小牌 &lt; 5 则可构成顺子}; 3. 三面项目经理聊项目 4. 四面HR问了很多问题，包括个人优缺点，闲暇时间会做什么，在前公司3年的成长等等。","link":"/好未来面试题及答案/"},{"title":"字节跳动面试题","text":"字节跳动面试题 1.retain strong区别 2.NSClassFromString原理 3.http协议版本 4.http code 206 401 5.为什么三次握手，四次挥手 6.dispatch_asycn(queue,block); 7.二叉树路径 8.Runtime 9.UIView 绘制过程 10.autoreleasepool 11.VC生命周期，viewWillDisappear和viewDidDisappear之间会不会调用view的layout 12.autorelease调用release会立即销毁吗 13.GCD能不能取消任务","link":"/字节跳动面试题/"},{"title":"平安面试题","text":"平安面试题 1.什么是多态？具体在项目中怎么用的？ 2.说一下组件化开发（业务组件非UI组件）； 3.调用未实现的方法会发生什么，然后通过什么可以进行处理？消息转发的具体流程？消息转发流程在实际中的应用？ 4.KVO 的原理？ 5.分类的底层实现？ 6.App 启动优化？热启动&amp;冷启动，具体优化？ 7.Vue 的双向绑定？ 8.说一下你对 Runloop 的理解，Runloop 的应用？ 9.项目中具体是怎么用的多线程？ 10.bug 管理工具？bug 率，日活？ 11.项目中你的职责所在？ 12.是否读过 SDWebImage，AFNetworking 底层？","link":"/平安面试题/"},{"title":"开果科技面试题","text":"开果科技面试题 一面1、卡顿原因、解决办法。为什么透明视图不如不透明视图？ 2、闪退原因、监测、过程。友盟是怎么捕获闪退的？从一个事件到闪退发生了什么？ 3、图片的压缩，从600k到500k，不能设置固定压缩比，应该怎么做？压缩图片，压缩图片实际压缩的是哪些东西？加载超大图；图片在计算机中的存储形式；10M的图片加载到内存中是多大？大图是怎么加载的？ 图像文件存储的都是每一个像素对应的颜色值。 4、字典的本质？哈希表原理？ 哈希表。 5、链表和数组，哪个容易找到地址？ 数组。 在内存中，数组是一块连续的区域。插入和删除数据效率低。随机读取效率很高，因为数组是连续的，知道每一个数据的内存地址，可以直接找到给地址的数据。 链表增加和删除数据很容易。查找数据时效率低，因为不具有随机访问性。 6、列表有好多页，某一页和后边加载的一页中有相同的数据，怎么处理？ 7、动态库和静态库的区别。 8、设计模式。 二面(电话面试)1、什么时候开始接触 iOS？怎么学的iOS？ 2、公司多少人？什么项目？ 3、你会选择什么样的公司？ 4、数据库（SQLite/Realm）是怎么保证线程安全的？ 5、UserDeafaults 系统做了哪些优化？为什么可以在主线程上去做存取？如果让你实现，方法已经是同步的方法了，你会怎么处理？ 6、+load 和 +initialize 方法什么时候会调用，+load 和 +initialize 方法、main 方法这三个的调用顺序。 7、@class 和 #import 在编译的时候有哪些区别？ 8、JSON 转 Model 你用的是什么？MJExtension 字典转模型的具体步骤？拿到字典了，第一步做什么，第二步做什么？ 9、WebView 跟 JS 是怎么交互的？ 10、WebView 怎么存 cookie？ 11、A-&gt;B-&gt;C-&gt;D 从D返回到B。说几个不同的实现思路。 方案1：for 循环 self.navigationController.viewControllers 判断某个控制器是否是 B 如果是就 popToViewController:B。 方案2：self.navigationController.viewControllers 是一个不可变数组，可以赋值给一个可变的数组，然后把 C 移除，然后再赋值给 viewControllers。 其他方案：提示不一定要 push，present出来的怎么弄？ 12、二分查找。 13、深拷贝与浅拷贝，某个值得改变可能会影响原始值，那是深拷贝还是浅拷贝？ 14、性能优化？图片加载到 UIImageView 上经过了哪些过程？ 15、Label 怎么多行显示。 16、Button有哪些状态？ 17、dispatch_group_notify 是在哪个线程上？","link":"/开果科技面试题/"},{"title":"微店面试题","text":"微店面试题 1. 一面1、说项目里的有价值的东西？ 2、HTTPS 过程是怎么样的？非对称加密 3、Swift 中逃逸闭包和非逃逸闭包的区别？ 4、属性用 copy 关键字，是深拷贝还是浅拷贝？深拷贝和浅拷贝的区别？ 5、SDWebImage 的缓存机制？LRU 内部原理？下载完成图片后，是先存到内存、磁盘后，才显示到界面上吗？ 6、AFN 用到了 NSOperation、GCD，说一下内部 Operation 相关的？Manager？ 7、GCD 内部实现？ 8、约束 left/right 和 leading/trailing 的区别？约束报黄怎么解决？ 9、KVO 的原理？具体 NSObject 的两个方法？ 10、消息转发流程？使用场景？ 11、数据库减字段怎么容错？ 12、有没有打包过私有库？ 13、从点击 App 的图标到 App 启动，说一下这个过程？+load 发生在什么时候？ 14、用什么管理第三方库？CocoaPods 中的 .lock 文件存储了什么信息？ 15、说一下一个项目的架构？ 16、组件化？ 17、手写冒泡排序算法？算法复杂度？ 2. 二面1、项目介绍，开发人员分工？购物车本地化如果加入购物车的价格变了怎么处理的？ 2、写一下其中一个项目的项目架构？写一下用到的第三方库。 3、项目用什么管理的？CocoaPods 指定版本号带 ~ 跟不带 ~各有什么含义？ 4、AFN 实现原理？发10个网络请求，AFN 内部是怎么处理的？ 5、SDWebImage 是怎么加载图片的？用的是 Get 还是 Post ？如果让你实现，你会选择 Get 还是 Post ？ 6、HTTPS 流程是怎么样的？（画一下客户端、服务器的时序图） 7、加密算法，对称加密和非对称加密？ 8、如何理解 OC 是动态语言？ 9、Runtime？用 Runtime 做过什么？ 10、Runloop？内部实现原理？跟自己写个 for 循环有没有区别？ 11、内存管理？内存优化？ 12、卡顿？ 13、多线程？用 GCD 实现同步多个异步调用（a，b），然后再同步执行（c，d） 14、从点击 App 图标，到显示界面流程？ 15、组件化？ 16、编译过程？某一个东西是属于哪一步骤的？ 17、微信支付流程（客户端、微信 SDK 、自己服务器、微信服务器时序图） 18、RN、Week？内部是怎么用 JS 调用原生的？ 19、日志记录？ 20、遇到的闪退？Bug？ 21、竞争同一个资源？ 22、进程线程与 App 的关系。 23、Git rebase","link":"/微店面试题及答案/"},{"title":"新浪乐居面试题","text":"新浪乐居面试题 笔试题笔试题 一面1、类方法和实例方法有什么区别？ 2、用封装的类方法去请求网络会有什么问题？ 3、说一下单例。单例的作用是什么？为什么不能多次创建对象？ 4、说一下 ARC、MRC，有什么区别？有啥优缺点？ 5、自动释放池的使用场景？耗内存时需要加到池子里。 6、沙盒目录除了 Documents 还有啥？Cache 和 Temp 有什么区别？ SDWebImage是在Library下的Caches里 7、项目里用地图了吗？如果用系统的地图会有一个问题，电量急速下降，遇到过这个问题吗？ 8、都有哪些可能循环引用？ 9、说一下从网络请求回来的数据怎么存？数据持久化的方法。数据库是存在沙盒的哪个目录？我说在 Documents 中。 10、assign 与 weak 区别？ 11、笔试题19的答案为什么是2、5？ 12、说一下冒泡排序的思路？ 13、GCD 需要注意什么？我说了一下使用场景。 14、Runtime、Runloop 了解吗？（说了一下消息发送和消息转发的流程）Runloop 有哪些 Mode？（说了3个，面试官说能用的到的就这三个。。其他俩点进去也看不着）说一下 CommonMode ？ 15、最后一个问题：类似简历 右上角是图片（宽高已知） 左边是一段文字 文字会包裹着图片，问实现思路？ 说了三个思路：（1）计算一下上边 label 宽高，左边用一个 label 显示，下边多余的字也用另一个 label 显示。 （2）YYText 可能有处理办法，算是第三方。 （3）他提示底层一点的，我说绘制。 二面1、了解项目，问在公司干啥。 2、AutoLayout 和 Masonry 有什么区别？ 3、面向对象在 OC 中的体现？封装、继承、多态。你觉得最主要的是面向对象的哪个特性？ 4、你对 H5、原生交互的看法。我说了实现方式后，他说不要实现细节，就你的看法。我又说了阿里是大前端，他说不要说阿里，你的看法呢？我说活动页用H5，其他用原生，可能效率高。 5、Block 和 delegate 的使用场景差异？ 6、你觉得开发一个项目难点在哪儿？ 7、其他问题：薪水能商量吗？有什么要问我的？","link":"/新浪乐居面试题/"},{"title":"朗播网面试题","text":"朗播网面试题 机试题 1、图片轮播是怎么做的？ 2、缓存图片用的什么？（SDWebImage）说一下 SD 的缓存机制？ 3、SD 缓存满了，是怎么清理的？ 4、从磁盘取出，从内存取出，显示到界面上，这个过程发生了什么？ 5、移动一个图片，比如从左边移动到右边，CPU/GPU 做了什么？谁的贡献大一点？ 6、数据结构跟算法，单链表反转 7、只遍历，用数组还是链表好？ 8、大数据排序？怎么合并拆分的小段的？ 9、淘汰算法？","link":"/朗播网面试题/"},{"title":"核桃编程面试题","text":"核桃编程面试题 1.消息发送和消息转发的过程 2.KVO 的原理 3.能不能动态添加成员变量 4.分类为啥不能添加成员变量 5.说一下 HTTPS 和 TCP、UDP 6.说一下项目亮点 7.方法交换注意什么 8.链表反转 9.NSNumber 怎么进行优化的，数据存储哪里 10.GCD 和 NSOperation 各自的优点 11.Runtime 的应用","link":"/核桃编程面试题/"},{"title":"棵朵面试题","text":"棵朵面试题 1、结构体和类有什么区别？ 2、NSString 和 String 有什么区别？ 3、?? 是什么意思？ ? 是什么意思？ ! 是什么意思？ 4、说一下 @property， weak 和 assign 有什么区别？weak 能不能修饰非 OC 的对象？ 5、MutableCopy 和 copy ，即深拷贝和浅拷贝有什么区别？ 6、NS、CA、CF、UI 分别属于哪个框架？ 7、多线程有没有自己开辟过线程？ 8、从服务器得到5个图片链接，5张图片展示到一个页面上，截图分享到微信？怎么保证5张图全部加载出来了再去截图分享？ 9、JS 与 OC 交互，点击 H5 某个地方跳转到购物车，点击某个地方跳转到详情页，点击某个地方跳转到订单页，跳转到指定的页面你现在用的是判断的跳转类型，如果新增了一种，怎么能不发版完成需求？ 10、你用 swift 开发用没用过 VIPER 架构模式？","link":"/棵朵面试题/"},{"title":"滴滴笔试题","text":"滴滴笔试题 笔试题0.姓名？日期。 1.C语言实现字符串反转：void reverse(char *str, int length) {} 2.实现一个字符串数组去重函数。 3.描述OC中对象的实现原理。 4.编写代码，实现 NSObject 中添加一个属性 p1 5.KVO 的实现原理和注意事项。 6.下面的代码有哪些问题？ 123456789101112131415@interface Demo : NSObject@property (nonatomic, assign) BOOL *p1;@property (nonatomic, strong) NSString *p2;@end@implementation Demo@dynamic p1;- (void)setP2:(NSString *)p2;{ self.p1 = YES; self.p2 = p2;}@end 7.JS 和 Native 的通讯方式。 8.网络5层模型是哪5层？ 9.把t1表中 name 为 mike 的记录中 status 值改为1 10.常用的 Linux 命令。 11.用过的包/库管理工具。","link":"/滴滴笔试题/"},{"title":"滴滴面试题","text":"滴滴面试题 笔试题笔试题 滴滴一面看了一下笔试题的答案，第一题 C 语言字符串反转打印了一下 1、说一下你觉得项目中遇到了什么印象深刻的问题，你是怎么解决的？ 2、大学里学了哪些课？信息管理与信息系统专业是哪个学院的？ 3、项目里的网络请求用到了网络5层模型的哪些，TCP/IP 属于哪一层？HTTP 呢？ 4、你觉得自己是什么级别的？优势和不足主要是哪方面？ 5、GCD 平时项目里怎么用的？我提到了回到主线程操作 UI 需要 dispatch_get_mainQueue 6、为什么操作 UI 需要在主线程？ 7、哪些是你独立开发的项目？ 8、问了一下上家公司的情况 9、之后有什么打算？ 10、上家薪资多少？你还有啥想问的吗？ 滴滴二面1、自定义封装控件需要注意什么？有什么规范？ 2、说一下你了解的设计模式。 3、数据库怎么优化？我说数据量大的话加索引提升查询效率。问其他优化呢？比如数据库大小有没有做过优化？ 4、内存优化是怎么做的？我提到了内存泄漏。什么情况会发生内存泄漏？ 5、App 启动时间优化？ 6、视图做过哪些优化，我提了 TableView。那就以 TableView 说一下优化了哪些方面？ 7、AFNetworking 内部是怎么样的一个过程？ 8、你还有什么想问我的？","link":"/滴滴面试题/"},{"title":"登云美业面试题","text":"登云美业面试题 1、@porperty 系统自动帮我们做了什么？如果后边的括号里啥都不写，系统默认的是哪三个？哪些用 copy ？为什么 String 用 copy ？为什么 block 用 copy ？ 2、单例的本质是什么？怎么用的？ 3、封装了什么自定义控件？ 4、说一下 MVC、MVVM 5、多线程都有哪些？项目里哪里用到了 GCD ？ 6、说一下 RuntimeKNFather : NSObjectKNSon : KNFather在 KNSon 中的 init 方法里打印 NSLog [self class] [super class]KNSon alloc init 之后打印结果是什么？ 7、AFN 内部看过吗？AFN 封装了吗？ 8、说一下 SDWebImage 缓存机制 9、Instruments 你们项目什么周期用？用它的哪些功能？ 10、京东的某个页面是怎么做的 涉及到 tableView 的 contentSize 变化。 11、项目里跑马灯怎么实现的？ 12、TouchID 是怎么做的？ 13、KeyChain 保存密码你们是啥时候保存的，保存的密码加密了吗？ 14、JS 交互是怎么做的？ 15、人脸识别 SDK 封装了吗？ 16、个推消息有没有做缓存？App 在前台、后台、杀死这三种状态下怎么处理的？ 17、项目里你觉得哪里最有收获？","link":"/登云美业面试题/"},{"title":"百度面试题","text":"百度面试题 百度一面1.APP优化2.列表快速滑动不需要加载的图片怎么处理3.cell加载大图4.异步绘制5.交换方法6.圆角的处理7.监听子线程处理UI事件 百度二面1.项目经验介绍（问rtmp协议，udp主动丢包策略）2.项目中遇到什么难点3.为什么要制作动态库 系统动态库会影响启动时间吗4.https (ca证书验证流程)5.category原理6.异步发送通知 (NSNotificationQueue)7.算法","link":"/百度面试题/"},{"title":"美团优选面试题2及答案","text":"美团优选面试题2 介绍值得说的项目 1.打印结果1234567- (void)someMethod { int i = 10; dispatch_async(dispatch_get_main_queue(), ^{ NSLog(@\"%d\",i); }); i = 20;} 10 1234567- (void)someMethod { static int i = 10; dispatch_async(dispatch_get_main_queue(), ^{ NSLog(@\"%d\",i); }); i = 20;} 20 1234567- (void)someMethod { __block int i = 10; dispatch_async(dispatch_get_main_queue(), ^{ NSLog(@\"%d\",i); }); i = 20;} 20 1234567- (void)someMethod { int i = 10; dispatch_sync(dispatch_get_main_queue(), ^{ NSLog(@\"%d\",i); }); i = 20;} 10 2.+load和initialize的区别？+load的调用时机1.调用方式 (1)load是根据函数地址直接调用。 (2)initialize是通过objc_msgSend调用。 2.调用时刻(什么时候会调用) (1)load是runtime加载类、分类的时候调用(只会调用一次) (2)initialize是类第一次接收到消息的时候调用，每一个类只会initialize一次(父类的initialize方法可能会被调用多次)。 3.App启动 pre-main做了什么事情4.KVO的实现原理。5.KVC的实现原理，是直接访问成员变量赋值吗？6.autoreleasepool什么时候释放？7.Category添加一个属性系统做了什么？怎么添加属性？为什么不能添加成员变量。关联对象存在哪里？Category里写了和类相同的方法会怎么样？8.isa指向，元类对象isa指向哪里？NSObject的isa指向哪里？为什么要设计类、元类？isa的结构9.有做过卡顿检测吗？Runloop检测卡顿怎么知道是哪个方法卡？方法卡了多长时间？10.有做闪退监测吗？bugly是怎么实现的？crash率是多少？crash率是怎么算出来的？11.反转单向链表实现反转单向链表的函数。如 1-&gt;2-&gt;3-&gt;4 反转后变成 2-&gt;1-&gt;4-&gt;3 有什么想问我的？","link":"/美团优选面试题2/"},{"title":"美团面试题","text":"美团面试题 1、Block 的底层原理，结构，内存以及需要注意的地方。 2、图片渲染，一张 png/jpg 格式的图片渲染到页面上显示有哪些流程。png 和 jpg 的区别。png 一定是无损的吗？ 3、Runtime。 4、Runloop 的结构和循环流程，用 Runloop 做过什么事情。 5、多线程，NSOperationQueue 和 GCD 的区别。用多线程做过什么事情。线程安全的问题。加锁有几种方式。 6、NSURLSession 和 NSURLConnection 的区别， NSURLConnection 是怎么封装的。CFNetwork。 7、做过什么动画。 8、HTTPS 的工作原理，和 HTTP 的区别。RSA 加密原理。 9、网络层级，TCP 和 UDP 的区别。 10、SDWebImage 的框架结构，缓存机制。 11、Git 的 rebase 的原理。Git 流程。 12、对组件化的了解，组件化是为了解决什么问题。 13、JSPatch 的原理。 14、单例是为了处理什么问题而使用的，单例和全局变量的区别。 15、对设计模式的掌握。 16、分层打印二叉树。","link":"/美团面试题/"},{"title":"美团面试题2及答案","text":"美团面试题2 1.gcd, block,__block, static2.程序启动时执行了什么3.runloop: 如何让一个 block 只在子线程runloop 上执行4.autorelease 对象何时释放，主线程，子线程分别如何释放5.isa指向的内存布局6.如何定义一个只存在于栈的对象7.线上卡顿监控8.crash 触发流程，涉及的底层系统调用9.链表反转： 1-&gt;2-&gt;3-&gt;4 反转为 2-&gt;1-&gt;4-&gt;3","link":"/美团面试题2/"},{"title":"美团面试题及答案","text":"美团面试题 1、Block 的底层原理，结构，内存以及需要注意的地方。block本质上也是一个OC对象，它内部也有个isa指针。block是封装了函数调用以及函数调用环境的OC对象。 block类型 环境 NSGlobalBlock 没有访问auto变量 NSStackBlock 访问了auto变量 NSMallocBlock NSStackBlock调用了copy 2、图片渲染，一张 png/jpg 格式的图片渲染到页面上显示有哪些流程。png 和 jpg 的区别。png 一定是无损的吗？图片渲染的过程: 读取文件 -&gt; 计算frame -&gt;图片解码 -&gt;解码后通过数据总线交给GPU -&gt;GPU获取图片frame后进行顶点变换计算 -&gt;光栅化 -&gt;根据纹理坐标获取每一个像素点的颜色值 -&gt; 交给帧缓冲区 -&gt;渲染到屏幕上 iOS中图片渲染的流程 iOS 保持界面流畅的技巧 iOS图形原理与离屏渲染 3、Runtime。OC中的方法调用其实都是转成了objc_msgSend函数的调用，给receiver（方法调用者）发送了一条消息（selector方法名）objc_msgSend底层有3大阶段消息发送（当前类、父类中查找）、动态方法解析、消息转发 具体应用利用关联对象（AssociatedObject）给分类添加属性遍历类的所有成员变量（修改textfield的占位文字颜色、字典转模型、自动归档解档）交换方法实现（交换系统的方法）利用消息转发机制解决方法找不到的异常问题 4、Runloop 的结构和循环流程，用 Runloop 做过什么事情。01、通知Observers：进入Loop02、通知Observers：即将处理Timers03、通知Observers：即将处理Sources04、处理Blocks05、处理Source0（可能会再次处理Blocks）06、如果存在Source1，就跳转到第8步07、通知Observers：开始休眠（等待消息唤醒）08、通知Observers：结束休眠（被某个消息唤醒）01&gt; 处理Timer02&gt; 处理GCD Async To Main Queue03&gt; 处理Source109、处理Blocks10、根据前面的执行结果，决定如何操作01&gt; 回到第02步02&gt; 退出Loop11、通知Observers：退出Loop 控制线程生命周期（线程保活） 解决NSTimer在滑动时停止工作的问题 监控应用卡顿 性能优化 5、多线程，NSOperationQueue 和 GCD 的区别。用多线程做过什么事情。线程安全的问题。加锁有几种方式。dispatch_after dispatch_group dispatch_barrier dispatch_once OSSpinLockos_unfair_lockpthread_mutexdispatch_semaphoredispatch_queue(DISPATCH_QUEUE_SERIAL)NSLockNSRecursiveLockNSConditionNSConditionLock@synchronized 6、NSURLSession 和 NSURLConnection 的区别， NSURLConnection 是怎么封装的。CFNetwork。7、做过什么动画。8、HTTPS 的工作原理，和 HTTP 的区别。RSA 加密原理。9、网络层级，TCP 和 UDP 的区别。 TCP UDP 面向连接 面向数据报 可靠传输 不可靠传输 传输效率低 传输效率高 10、SDWebImage 的框架结构，缓存机制。11、Git 的 rebase 的原理。Git 流程。12、对组件化的了解，组件化是为了解决什么问题。13、JSPatch 的原理。14、单例是为了处理什么问题而使用的，单例和全局变量的区别。15、对设计模式的掌握。16、分层打印二叉树。","link":"/美团面试题及答案/"},{"title":"腰果公考面试题","text":"腰果公考面试题 笔试：1、NSTimer 受滑动影响 2、深拷贝、浅拷贝？ 3、assign 与 weak 区别？ 4、内存管理？ 5、[self class] [super class] 算法：1、数组去重？ 2、已知一个生成 0-6 随机数的函数，写一个生成 0-9 随机数的函数。 3、从数组中找到所有 3 个数和为 0 的组合，如 [0,-1,1] 面试题：笔试题问一遍 1、assign 与 weak 区别？weak 内部实现原理？如果让你自己实现 weak？ 2、深浅拷贝在可变与不可变时具体说一下。 3、NSTimer 受滑动影响 4、快速排序？ 5、判断 [[]] 前后括号对应 6、GCD 的 API 7、实现单例？怎么保证 alloc init 时也只创建一次或者调用不了 alloc init 确保单例的唯一？ 8、圆角的优化？出现问题的原因？离屏渲染？ 9、Masonry 链式调用的原理？ 10、微信支付流程 11、富文本？ 12、block 循环引用怎么个循环引用？","link":"/腰果公考面试题/"},{"title":"苏宁面试题","text":"苏宁面试题 1. 笔试题1.1 冒泡排序Objective-C 实现如下：1234567891011121314- (void)bubbleSort:(NSMutableArray *)array { for (int i = 0; i &lt; array.count; i++) { for (int j = 0; j &lt; array.count-1-i; j++) { NSInteger left = [array[j] integerValue]; NSInteger right = [array[j+1] integerValue]; if (left &lt; right) { [array exchangeObjectAtIndex:j withObjectAtIndex:j+1]; } } } NSLog(@&quot;%@&quot;,array);} 参考链接：【算法】冒泡排序 1.2 二分查找Swift实现如下：123456789101112131415func binarySearch&lt;T: comparable&gt;(_a: [T], key: T) -&gt; Int? { var lowerBound = 0 var upperBound = a.count while lowerBound &lt; upperBound { let midIndex = lowerBound + (upperBound - lowerBound) / 2 if a[midIndex] == key { return midIndex } else if a[midIndex] &lt; key { lowerBound = midIndex + 1 } else { upperBound = midIndex } } return nil} 参考链接：【算法】二分查找 1.3 合并两个数组去重参考链接：【算法】合并两个数组并去重 1.4 两个大数相加参考链接：大数相加算法 2. 一面2.1 SDWebImage 的缓存机制？LRU 说一下。SDWebImage加载图片拿到url会先把url的MD5值作为key从内存中查找，如果内存中有，则直接取图片显示；如果内存中没有，会从磁盘中查找。磁盘中没有，会走下载流程。LRU 最近最少使用。缓存容量满时，会先清理最近最少的缓存。 2.2 数据库升级，比如从 1.0 升级到 2.0，增加了字段。做好兼容处理。 2.3 性能优化2.3.1 优化启动时间 将一些耗时操作延迟执行。比如SDK的初始化，界面的创建。 不能延迟执行的，尽量放到后台执行。比如数据读取，原始 JSON 数据转对象，日志发送。 减少动态库、合并动态库，定期清理不必要的动态库。 减少类、分类的数量，合并Category和功能类似的类。删除不必要的方法和类、分类。 将不必须在+load中做的事延时到+initialize中。 2.3.2 减少CPU、GPU资源消耗 cell复用，header、footer复用。 尽量把view设置不透明。 减少视图的层级。 尽量避免调整视图层次、添加和移除视图。 合理选择加载图片的方式，UIImage imageNamed: ImageAssets 用于多个地方重复使用，UIImage imageWithContentsOfFile 一般用在图片数据很大，一般不需要多次使用的情况。 图片大小最好和UIImageView的大小相同。 不要阻塞主线程，耗时操作放在子线程进行。 懒加载。 缓存，缓存图片SDWebImage，缓存行高，NSCache缓存。 复用高开销对象NSDateFormatter和NSCalendar。 减少离屏渲染，优化圆角、阴影。 使用正确的数据存储。 2.3.3 内存优化 减少内存泄漏。 降低内存使用峰值。 懒加载。 灵活运用图片和文件加载。 拉长文件处理机制，逐步处理文件。 2.3.4 耗电优化耗电功率是个比较综合的指标，影响因素很多。密集的网络请求，长链接，密集的CPU操作（比如大量的复杂计算）都会使耗电功率增加。网络状况（流畅的Wi-Fi还是信号不好的3G）都会影响。 优化网络。 减少、压缩网络数据。 若多次网络请求结果相同，尽量使用缓存。 网络不可用时，不进行网络请求。 优化CPU、GPU消耗。 优化I/O操作，使用dispatch_io。 定位优化 尽量降低定位精度，如不要使用精度最高的KCLLocationAccuracyBest。 如果只是需要快速确定用户位置，用 CLLocationManager 的 requestLocation 方法定位，定位完成后，定位硬件会自动断电。 2.4 Git 开发流程。 master develop dev-xx 具体开发人员分支 开发完成后发起PR。项目提审打Tag 2.5 微信登录流程。注册微信的AppKey与AppSecret。使用微信SDK方法调起微信，回调拿到一些参数，把包含openId等协定好的参数传给服务器，由服务器判断该用户是否注册过，如果注册过，返回登录成功后的用户相关信息。 2.6 WebView 与 JS 交互。H5调用原生采用拦截协议的方式。执行JS方法：evaluateScript也可以使用JSBridge等方式。 2.7 说一下Runloop，苹果设计 Runloop 的初衷是什么？Runloop 运行循环。让线程在有任务的时候忙任务，没任务的时候休眠。参考链接：【iOS 开发】RunLoop 总结 2.8 Delegate代理用assign修饰。 2.9 GCD参考链接：GCD 的 API 2.10 深拷贝与浅拷贝深拷贝是拷贝整个对象。浅拷贝只拷贝对象的指针。copy用于修饰NSArray、NSDictionary、NSString。如果=右边赋值的对象是可变的，copy是深拷贝，拷贝对象的本身。如果赋值的对象是不可变的，copy是浅拷贝，只拷贝对象的指针。用copy和用strong的区别？用copy更安全，避免赋的值是可变的。如果能确保赋的值是不可变的，那么用strong和用copy都是浅拷贝，copy只是多了一个判断，判断可变还是不可变，其他是一样的。NSMutableArray、NSMutableDictionary用Strong修饰，如果用copy，就会拷贝一份，变成不可变的，如果增删数据，就会发生错误。 2.11 进程间通信URL Schemes 2.12 线程间通信，两个线程怎么切换？performSelectorOnThread 2.13 多态多态（Polymorphism）按字面的意思就是“多种状态”。在面向对象语言中，接口的多种不同的实现方式即为多态。子类继承父类后，子类重写父类的方法，实现多态。 2.14 HTTP 三次握手，四次挥手。3. 二面3.1 有没有复杂点的页面。3.2 （这个部门是做智能硬件的）蓝牙有哪些API。3.3 播放音频，展示音频的曲线，具体怎么做？4. 三面","link":"/苏宁面试题及答案/"},{"title":"链表算法题","text":"链表算法题 反转链表123456789101112function ReverseList(pHead){ let prev = null; let curr = pHead; while (curr) { const next = curr.next; curr.next = prev; prev = curr; curr = next; } return prev;} 两两交换链表中的节点1234567891011121314var swapPairs = function(head) { let dummyNode = new ListNode(0); dummyNode.next = head; let temp = dummyNode; while (temp.next != null &amp;&amp; temp.next.next != null) { let head1 = temp.next; let head2 = temp.next.next; temp.next = head2; head1.next = head2.next; head2.next = head1; temp = head1; } return dummyNode.next;}; 判断链表中是否有环123456789101112131415function hasCycle( head ) { if (head == null) { return false; } let slow = head; let fast = head; while (fast.next &amp;&amp; fast.next.next) { slow = slow.next; fast = fast.next.next; if (slow == fast) { return true; } } return false;} 环的入口结点1234567891011121314151617function detectCycle( head ) { if (!head) return null; let slow = head, fast = head; while(fast.next &amp;&amp; fast.next.next) { fast = fast.next.next slow = slow.next if (slow == fast) { var a = head; while (slow != a) { a = a.next slow = slow.next } return a; } } return null;} 链表中倒数第k个结点1234567891011121314151617181920212223function FindKthToTail( pHead , k ) { let length = getLength(pHead); if (length &lt; k) { return null; } let i = length - k; let p = pHead; while (i &gt; 0) { p = p.next; i--; } return p;}var getLength = function( pHead ) { let p = pHead; let length = 0; while (p != null) { p = p.next; length++; } return length;} 删除链表的倒数第 n 个节点1234567891011121314151617181920212223242526function removeNthFromEnd( head , n ) { let length = getLength(head); if (length &lt; n) { return null; } let i = length - n; let dummy = new ListNode(0); dummy.next = head; let p = dummy; while (i &gt; 0) { p = p.next; i--; } p.next = p.next.next; return dummy.next;}var getLength = function ( head ) { let length = 0; let p = head; while (p != null) { p = p.next; length ++; } return length;} 删除有序链表中重复的元素1234567891011function deleteDuplicates( head ) { let p = head; while (p != null &amp;&amp; p.next != null) { if (p.val == p.next.val) { p.next = p.next.next; } else { p = p.next; } } return head;} 交叉链表找交点123456789101112function FindFirstCommonNode(pHead1, pHead2){ if (pHead1 == null || pHead2 == null) { return null; } let p1 = pHead1, p2 = pHead2; while (p1 != p2) { p1 = p1 == null ? pHead2 : p1.next; p2 = p2 == null ? pHead1 : p2.next; } return p1;} 合并两个有序链表123456789101112131415161718192021function mergeTwoLists( l1 , l2 ) { let newHead = new ListNode(-1); let p = newHead; while(l1 != null &amp;&amp; l2 != null) { if (l1.val &lt; l2.val) { p.next = l1; l1 = l1.next; } else { p.next = l2; l2 = l2.next; } p = p.next; } if (l1 != null) { p.next = l1; } if (l2 != null) { p.next = l2; }; return newHead.next;}","link":"/链表算法题/"},{"title":"高思教育笔试题","text":"高思教育笔试题 笔试题（部分）3.下面代码输出什么？ 1234567int a = 0;void (^foo)(void) = ^{ a = 1; NSLog(@\"inner a=%d\",a);};foo();NSLog(@\"outer a=%@\",a); 4.下面代码输出什么？ 123456789- (void)viewDidLoad{ [super viewDidLoad]; NSLog(@\"1\"); dispatch_sync(dispatch_get_main_queue(),^{ NSLog(@\"2\"); }); NSLog(@\"3\");} 5.什么情况使用 weak 关键字，相比 assign 有什么不同？ 6.@property 中有哪些属性关键字？/ @property 后面可以有哪些修饰符？ 7.@synthesize 和 @dynamic 分别有什么作用？ 8.什么时候会报 unrecognized selector 的异常？ 9.能否想编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？ 10.如何用 GCD 同步若干异步调用？dispatch_barrier_async 的作用是什么？ 11.如何手动触发一个 value 的 KVO 12.Native 的 Web（WK/UI）控件和 js 的交互是如何实现的？（nativejs） 13.JavaScriptCore 框架中，native 如何调用 js？反之，js如何调用native？ 14.有阅读 Weex、ReactNative 或者 Cordova 框架的描述其一即可。","link":"/高思教育笔试题/"},{"title":"高思教育面试题","text":"高思教育面试题 笔试题笔试题 一面1、@property 本质是什么？NSString 为什么用 Copy，用 Strong 行不行？ 2、block 为什么用 copy ？ 3、block 和代理你用的哪个多？各有什么特点？ 4、GCD 的两个队列（串行、并行）有了解吗？从字面意思看，你觉得这俩哪个效率高，哪个（占空间）忘记了问的啥指标了。。 5、（说一下你的项目吧）看到我的酒店 App，问类似网易新闻那种滑动切换页面你是怎么做的？我说是一个 scrollView，点击按钮后滚动到指定的 index。他说的顶部按钮是3个，如果是30个呢，会有什么问题？他说如果1个页面占用5M，30个页面就占用5x30M，会有内存问题，怎么解决这个问题？我说看过别人写的，用的是子控制器，把这些页面加到当前控制器的子控制器中。（现在想想我也是这么做的。。但是没说是这么做） 6、AFN内部看过吗？AFN的5个模块。 大概这时候问，你觉得自己是什么级别的？（中级） 7、说一下响应者链。 8、一个约束题。 9、项目不忙的时候做过什么优化？（我说用 Instruments 分析过内存泄漏）他说发现过什么问题？（发现过 NSTimer 定时器有内存泄漏）他说那考虑用什么替换定时器呢？（我说没有替换它，退出这个页面的时候关掉了 Timer） 还做过什么优化？（忘记咋回答了） 10、（不知道问啥我的回答是野指针）然后就问野指针是啥？指针指向的那块地址（忘记了。。）如果又有其他指针指向了这块内存，会怎么样（他好像说会闪退） 12、斐波那切数列 0 1 2 3 4 5… 1 1 2 3 5 8 13 21 求n f(n) = f(n-1) + f(n-2) 复试1、怎么学的 iOS ？为什么没搞 Java 2、介绍公司情况，人员规模，介绍项目 3、说一下项目中遇到的问题，怎么解决的？ 4、说一下内存管理，怎么检测内存泄漏的？ 5、你用 OC 开发还是 Swift ？你觉得两者有啥不同？ 6、金融 App 应该有一些安全措施吧？你们是怎么做的？ 7、TCP 和 UDP 有啥区别？ 8、TCP 几次握手？过程是怎么样的？ 9、Post 请求和 Get 请求有啥区别？ 10、数据持久化都有哪些？ 11、AFN 的实现原理？SDWebImage 的实现原理？哪些存在内存，哪些存在磁盘？ 12、两个网络请求有依赖关系时，怎么处理的？ 13、同步、异步 串行、并行 14、几张图合成一张图 15、说一下 Runloop 16、KVO 的实现原理 17、不使用中间变量 实现交换两个数 swap(a, b) 18、copy 关键字修饰什么？ 19、类的私有属性，怎么设置属性值？我答了 KVC 他提到了 Runtime 20、有没有做过音频的处理？类似唱吧把原唱关掉。 21、动画了解的怎么样？ 22、了解 ARKit 吗？ 23、数据结构和算法你怎么样？冒泡排序，选择排序？","link":"/高思教育面试题/"},{"title":"小米面试题及答案","text":"小米面试题 1.说说你了解的设计模式。说说你了解的设计原则。设计模式的六大原则1、开闭原则（Open Close Principle） 开闭原则的意思是：对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。 2、里氏代换原则（Liskov Substitution Principle） 里氏代换原则是面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。LSP 是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。 3、依赖倒转原则（Dependence Inversion Principle） 这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。 4、接口隔离原则（Interface Segregation Principle） 这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。 5、迪米特法则，又称最少知道原则（Demeter Principle） 最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。 6、合成复用原则（Composite Reuse Principle） 合成复用原则是指：尽量使用合成/聚合的方式，而不是使用继承。 设计模式装饰模式：在不改变原封装的前提下，为对象动态添加新功能的模式。在 Objective-C 中，它的实现形式为 Category 和 Delegation；在 Swift 中，它的实现形式为 Extension 和 Delegation。 观察者模式：通知、KVO 备忘录模式：保存对象当前的状态，并在日后可以恢复的模式。用 UserDefaults 来读写，同时配合栈可以存储一系列状态。它经常用于初始化、重启、App 前后台状态改变等场景。 工厂模式 单例模式 2.什么是队列？同步异步是什么？GCD与NSOperation的相同与不同，使用场景。GCD的队列可以分为2大类型并发队列（Concurrent Dispatch Queue） 可以让多个任务并发（同时）执行（自动开启多个线程同时执行任务） 并发功能只有在异步（dispatch_async）函数下才有效 串行队列（Serial Dispatch Queue） 让任务一个接着一个地执行（一个任务执行完毕后，再执行下一个任务） 同步和异步主要影响：能不能开启新的线程 同步：在当前线程中执行任务，不具备开启新线程的能力 异步：在新的线程中执行任务，具备开启新线程的能力 并发和串行主要影响：任务的执行方式 并发：多个任务并发（同时）执行 串行：一个任务执行完毕后，再执行下一个任务 并发队列 手动创建的串行队列 主队列 同步（sync） 没有开启新线程，串行执行任务 没有开启新线程，串行执行任务 没有开启新线程，串行执行任务 异步（async） 有开启新线程，并发执行任务 有开启新线程，串行执行任务 没有开启新线程，串行执行任务 使用sync函数往当前串行队列中添加任务，会卡住当前的串行队列（产生死锁） 3.Block，本质，指针引用，值引用，变量捕获（static和auto），__weak __block12345NSMutableArray *array = nil;void(^Block)(void) = ^{ array = [NSMutableArray array];};Block(); 有什么问题？局部变量是值捕获，不能在block内部修改。 12345NSMutableArray *array = [NSMutableArray array];void(^Block)(void) = ^{ [array addObject:\"1\"];};Block(); 有什么问题？没问题，可以添加元素 4.交叉链表找交点123456789101112function FindFirstCommonNode(pHead1, pHead2){ if (pHead1 == null || pHead2 == null) { return null; } let p1 = pHead1, p2 = pHead2; while (p1 != p2) { p1 = p1 == null ? pHead2 : p1.next; p2 = p2 == null ? pHead1 : p2.next; } return p1;} 5.性能优化，启动优化性能优化 cell复用，header、footer复用。 尽量把view设置不透明。 减少视图的层级。 尽量避免调整视图层次、添加和移除视图。 合理选择加载图片的方式，UIImage imageNamed: ImageAssets 用于多个地方重复使用，UIImage imageWithContentsOfFile 一般用在图片数据很大，一般不需要多次使用的情况。 图片大小最好和UIImageView的大小相同。 不要阻塞主线程，耗时操作放在子线程进行。 懒加载。 缓存，缓存图片SDWebImage，缓存行高，NSCache缓存。 复用高开销对象NSDateFormatter和NSCalendar。 减少离屏渲染，优化圆角、阴影。 使用正确的数据存储。 启动优化 将一些耗时操作延迟执行。比如SDK的初始化，界面的创建。 不能延迟执行的，尽量放到后台执行。比如数据读取，原始 JSON 数据转对象，日志发送。 减少动态库、合并动态库，定期清理不必要的动态库。 减少类、分类的数量，合并Category和功能类似的类。删除不必要的方法和类、分类。 将不必须在+load中做的事延时到+initialize中。 6.谈谈https 一个HTTPS请求实际上包含了两次HTTP传输： 1）客户端发起一个http请求，连接到服务器的443端口。 2）服务端把自己的信息以数字证书的形式返回给客户端（证书内容有密钥公钥，网站地址，证书颁发机构，失效日期等）。证书中有一个公钥来加密信息，私钥由服务器持有。 3）验证证书的合法性 客户端收到服务器的响应后会先验证证书的合法性（证书中包含的地址与正在访问的地址是否一致，证书是否过期）。 4）生成随机密码（RSA签名） 如果验证通过，或用户接受了不受信任的证书，浏览器就会生成一个随机的对称密钥（session key）并用公钥加密，让服务端用私钥解密，解密后就用这个对称密钥进行传输了，并且能够说明服务端确实是私钥的持有者。 5）生成对称加密算法 验证完服务端身份后，客户端生成一个对称加密的算法和对应密钥，以公钥加密之后发送给服务端。此时被黑客截获也没用，因为只有服务端的私钥才可以对其进行解密。之后客户端与服务端可以用这个对称加密算法来加密和解密通信内容了。 6）客户端会发起HTTPS中的第二个HTTP请求，将加密之后的客户端密钥发送给服务器。 7）服务器接收到客户端发来的密文之后，会用自己的私钥对其进行非对称解密，解密之后的明文就是客户端密钥，然后用客户端密钥对数据进行对称加密，这样数据就变成了密文。 8）然后服务器将加密后的密文发送给客户端。 9）客户端收到服务器发送来的密文，用客户端密钥对其进行对称解密，得到服务器发送的数据。这样HTTPS中的第二个HTTP请求结束，整个HTTPS传输完成。 7.说说响应链能够响应触摸事件的例如UIView，UIButton，UIViewController，UIApplication，Appdelegate等都继承自UIResponder类，一个页面上通常会有许许多多个这种类型的对象，都可以对点击事件作出响应。为了避免冲突，这就需要有一个先后顺序，也就是响应的优先级。Hit-Testing的目的就是找到具有最高优先级的响应对象。寻找的具体流程如下： UIApplication首先将事件队列中的事件取出，传递给窗口对象。如果有多个窗口，则优先询问windows数组的最后一个窗口。 如果窗口不能响应事件，则将事件传递给倒数第二个窗口，以此类推。如果窗口能够响应事件，则再依次询问该窗口的子视图。 重复步骤2。 若视图的所有子视图均不是最佳响应者，则自身就是最合适的响应者。另外需要注意的是，一下几种状态的视图无法响应事件： 不允许交互的视图：userInteractionEnabled = NO 隐藏的视图：hidden = YES 透明度alpha&lt;0.01的视图 怎么样验证一下上面所说的Hit-Testing的顺序呢，看一下UIView的API，里面会有一个hitTest：withEvent：方法，这个方法的主要作用就是查询并返回事件在当前视图中的响应者，每个被询问到的视图对象都会调用这个方法来返回当前视图层的响应者。 如果当前视图无法响应事件，则返回nil。 如果当前视图可以响应事件，但子视图不能响应事件，则返回自身作为当前视图的响应者。 如果当前视图可以响应事件，同时有子视图可以响应事件，则返回该子视图作为当前视图的响应者。 8.你知道哪些锁？（自旋锁，互斥锁）使用场景都有哪些？os_unfair_lockOSSpinLockdispatch_semaphorepthread_mutexNSLockNSConditionpthread_mutex(recursive)NSRecursiveLockNSConditionLock@synchronized 线程同步","link":"/小米面试题/"},{"title":"滴滴出行面试题及答案","text":"滴滴出行面试题 1. 笔试题0.姓名？日期。1.C语言实现字符串反转：void reverse(char *str, int length) {}123456789101112131415void reverse(char *str, int length) { char *start, *end, t; start = str; end = &amp;str[length - 1]; while(start &lt; end) { t = *start; *start = *end; *end = t; start++; end--; } for (int i = 0; str[i]; i++) { printf(\"%c\",str[i]); }} 2.实现一个字符串数组去重函数。123456789101112var str_arr = [\"b\",\"c\",1,\"a\", 3,\"v\", \"2\",\"e\", \"6\",\"g\", \"9\", \"arr\",9, \"hello\",\",6\", \"9\", \"1\", 2, 6, \"b\", \"c\"];function unique(arr) { var map = {}, array = []; for (var i = 0; i &lt; arr.length; i++) { var key = arr[i] + typeof arr[i]; if (map[key] == null) { map[key] = true; array.push(arr[i]); } } return array;} 3.描述OC中对象的实现原理。12345@interface NSObject { Class isa;}@endtypedef struct objc_class *Class; NSObject对象内部存放了一个名叫isa的指针，指向了一个结构体struct objc_class 一个NSObject对象占用多少内存？ 1）系统分配了16字节给NSObject对象（通过malloc_size函数可以获得） 2）NSObject对象内部只使用了8个字节的空间，用来存放isa指针变量（64位系统下，可以通过class_getInstanceSize函数获得） 4.编写代码，实现 NSObject 中添加一个属性 p112345678910111213141516171819202122@interface NSObject (TestProperty)@property (nonatomic, copy) NSString *p1;@end #import &quot;NSObject+TestProperty.h&quot;#import &lt;objc/runtime.h&gt;@implementation NSObject (TestProperty)- (void)setP1:(NSString *)p1 { objc_setAssociatedObject(self, @selector(p1), p1, OBJC_ASSOCIATION_RETAIN_NONATOMIC);}- (NSString *)p1 { objc_getAssociatedObject(self, @selector(p1));}@end 5.KVO 的实现原理和注意事项。1) 利用RuntimeAPI动态生成一个子类，并且让instance对象的isa指向这个全新的子类2) 当修改instance对象的属性时，会调用Foundation的_NSSetXXXValueAndNotify函数 1234willChangeValueForKey:父类原来的setterdidChangeValueForKey:内部会触发监听器（Oberser）的监听方法( observeValueForKeyPath:ofObject:change:context:） 注意事项：需要调用set方法触发KVO 6.下面的代码有哪些问题？123456789101112131415@interface Demo : NSObject@property (nonatomic, assign) BOOL *p1;@property (nonatomic, strong) NSString *p2;@end@implementation Demo@dynamic p1;- (void)setP2:(NSString *)p2;{ self.p1 = YES; self.p2 = p2;}@end BOOL p1不应该带*。 self.p2 = p2; 调用set方法死循环。 p1没有set方法。 p2最好用copy修饰。 7.JS 和 Native 的通讯方式。方法一：拦截URL 方法二：注册OC与JS方法 12345678910111213141516171819202122232425262728- （void）webViewDidFinishLoad:(UIWebView *)webView { // 获取当前网页的标题 NSString *titleStr = [webView stringByEvaluatingJavaScriptFromString:@&quot;document.title&quot;]; NSLog(@&quot;%@&quot;,titleStr); // 还可以直接调用js定义的方法 // 比如getShareUrl()为js端定义好的方法，返回值为分享的url // 我们就可以通过调用这个方法在returnStr中拿到js返回的分享地址 NSString *returnStr = [webView stringByEvaluatingJavaScriptFromString:@&quot;getShareUrl()&quot;]; NSLog(@&quot;%@&quot;,returnStr); // 还可以为js端提供完整的原生方法供其调用（记得导入#import ） JSContext *context = [webView valueForKeyPath:@&quot;documentView.webView.mainFrame.javaScriptContext&quot;]; // 可以定义供js调用的方法, testMethod为js调用的方法名 context[@&quot;testMethod&quot;] = ^() { dispatch_async(dispatch_get_main_queue(), ^{ UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@&quot;&quot; message:@&quot;js调用方法&quot; delegate:nil cancelButtonTitle:@&quot;取消&quot; otherButtonTitles:nil, nil]; [alert show]; }); }; 方法三：桥接机制 OC和JS交互的桥接机制，主要包含3个类，JS端window.WebViewJavascriptBridge，OC端WebViewJavascriptBridge和WebViewJavascriptBridgeBase。 桥接类支持JS调用OC方法，OC调用JS方法。JS调用OC通过重定向url并取handlerName来调用，OC调用JS通过stringByEvaluatingJavaScriptFromString调用。 8.网络5层模型是哪5层？应用层、传输层、网络层、数据链路层、物理层 9.把t1表中 name 为 mike 的记录中 status 值改为11update t1 set status = 1 where name = mike 10.常用的 Linux 命令。cd 进入指定的目录 cd .. 返回上一级目录 ls 查看当前目录下的所有的目录与文件名 touch filename 表示创建一个文件 mkdir dirname 表示创建一个目录 rm filename 表示删除一个文件 rm -rf dirname 表示删除该目录及其所有的子级目录一起删掉 ctrl+c 强制终止，不会终止进程 sudo 以管理员身份运行上一个命令 :q 退出 :q! 强制退出 :wq 保存并退出 11.用过的包/库管理工具。CocoaPods 2. 一面1、说一下你觉得项目中遇到了什么印象深刻的问题，你是怎么解决的？2、大学里学了哪些课？信息管理与信息系统专业是哪个学院的？3、项目里的网络请求用到了网络5层模型的哪些，TCP/IP 属于哪一层？HTTP 呢？TCP/IP属于传输层 HTTP属于应用层 4、你觉得自己是什么级别的？优势和不足主要是哪方面？5、GCD 平时项目里怎么用的？dispatch_get_mainQueue：获取主线程 dispatch_sync：同步操作 dispatch_group：线程同步 dispatch_barrier：多读单写 dispatch_semaphore：加锁，控制并发数 dispatch_once：只执行一次 dispatch_after：延时执行 6、为什么操作 UI 需要在主线程？因为UIKit不是线程安全的。如果不在主线程中操作UI，可能会造成如下的情况：（1）两个线程同时设置同一个背景图片，那么很有可能因为当前图片被释放了两次而导致应用崩溃。（2）两个线程同时设置同一个UIView的背景颜色，那么很有可能渲染显示的是颜色A，而此时在UIView逻辑树上的背景颜色属性为B。（3）两个线程同时操作view的树形结构：在线程A中for循环遍历并操作当前View的所有subView，然后此时线程B中将某个subView直接删除，这就导致了错乱还可能导致应用崩溃。虽然，iOS4之后苹果将大部分绘图的方法和诸如 UIColor 和 UIFont 这样的类改写为了线程安全可用，但是仍然强烈建议将UI操作保证在主线程中执行。 7、哪些是你独立开发的项目？8、问了一下上家公司的情况9、之后有什么打算？10、上家薪资多少？你还有啥想问的吗？3. 二面1、自定义封装控件需要注意什么？有什么规范？ 头文件尽量不要过多引入其他的类,解耦合 如果使用了第三方框架, 不要在头文件引入改类 切记, 不要暴露第三方组件的任何属性,枚举等等 定义该类的常量,方便修改 尽量不要引入其他项目中的类,除了一些必要的分类,业务类尽量不要引入 Frame布局 使用分类 UIView+Helper 尽量不要暴露成员变量或者属性,除非有必要, 其余情况最好提供接口进行操作. 注意属性的可读。 封装的工具类 注意如果是分类可以实现的尽量迁移到分类中, 并且命名 最好以dd_ 开头, 例如-(void)dd_layoutWithDirection:(DDImageDirection)imageDirection ,之所以这样是因为,OC没有命名空间,后加载的分类可以覆盖掉前面的同名方法. 而且一旦和系统方法重名将造成巨大的bug 注意 驼峰命名原则,类,协议,代理属性，命名首字母大写,最好添加DD类前缀 2、说一下你了解的设计模式。设计模式的六大原则1、开闭原则（Open Close Principle） 开闭原则的意思是：对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。 2、里氏代换原则（Liskov Substitution Principle） 里氏代换原则是面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。LSP 是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。 3、依赖倒转原则（Dependence Inversion Principle） 这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。 4、接口隔离原则（Interface Segregation Principle） 这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。 5、迪米特法则，又称最少知道原则（Demeter Principle） 最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。 6、合成复用原则（Composite Reuse Principle） 合成复用原则是指：尽量使用合成/聚合的方式，而不是使用继承。 设计模式装饰模式、工厂模式、单例模式、观察者模式、备忘录模式。 3、数据库怎么优化？我说数据量大的话加索引提升查询效率。问其他优化呢？比如数据库大小有没有做过优化？（1）根据服务层面：配置mysql性能优化参数； （2）从系统层面增强mysql的性能：优化数据表结构、字段类型、字段索引、分表，分库、读写分离等等。 （3）从数据库层面增强性能：优化SQL语句，合理使用字段索引。 （4）从代码层面增强性能：使用缓存和NoSQL数据库方式存储，如MongoDB/Memcached/Redis来缓解高并发下数据库查询的压力。 （5）减少数据库操作次数，尽量使用数据库访问驱动的批处理方法。 （6）不常使用的数据迁移备份，避免每次都在海量数据中去检索。 （7）提升数据库服务器硬件配置，或者搭建数据库集群。 （8）编程手段防止SQL注入：使用JDBC PreparedStatement按位插入或查询；正则表达式过滤（非法字符串过滤）； 4、内存优化是怎么做的？什么情况会发生内存泄漏？ 减少内存泄漏。 降低内存使用峰值。 懒加载。 灵活运用图片和文件加载。 拉长文件处理机制，逐步处理文件。 5、App 启动时间优化？ 将一些耗时操作延迟执行。比如SDK的初始化，界面的创建。 不能延迟执行的，尽量放到后台执行。比如数据读取，原始 JSON 数据转对象，日志发送。 减少动态库、合并动态库，定期清理不必要的动态库。 减少类、分类的数量，合并Category和功能类似的类。删除不必要的方法和类、分类。 将不必须在+load中做的事延时到+initialize中。 6、视图做过哪些优化，我提了 TableView。那就以 TableView 说一下优化了哪些方面？ cell复用，header、footer复用。 尽量把view设置不透明。 减少视图的层级。 尽量避免调整视图层次、添加和移除视图。 合理选择加载图片的方式，UIImage imageNamed: ImageAssets 用于多个地方重复使用，UIImage imageWithContentsOfFile 一般用在图片数据很大，一般不需要多次使用的情况。 图片大小最好和UIImageView的大小相同。 不要阻塞主线程，耗时操作放在子线程进行。 懒加载。 缓存，缓存图片SDWebImage，缓存行高，NSCache缓存。 复用高开销对象NSDateFormatter和NSCalendar。 减少离屏渲染，优化圆角、阴影。 使用正确的数据存储。 7、AFNetworking 内部是怎么样的一个过程？8、你还有什么想问我的？","link":"/滴滴出行面试题及答案/"},{"title":"美团优选面试题及答案","text":"美团优选面试题 技术栈是怎么选择的？为什么选择Flutter，没有选择RN Flutter 与 React Native 的对比分析 1.链表环的入口结点（限制15分钟）算法1：遍历链表，使用Set去存一下 1234567891011function detectCycle( head ) { const visited = new Set(); while (head != null) { if (visited.has(head)) { return head; } visited.add(head); head = head.next; } return null;} 算法2：快慢指针 1234567891011121314151617function detectCycle( head ) { if (!head) return null; let slow = head, fast = head; while(fast.next &amp;&amp; fast.next.next) { fast = fast.next.next slow = slow.next if (slow == fast) { var a = head; while (slow != a) { a = a.next slow = slow.next } return a; } } return null;} 2.首页的轮播图，滑动主区域 timer会不会停止？Timer会停止。因为滑动时Runloop的mode由原来的DefaultMode切换到了UITrackingRunLoopMode。同一时间只能有一种mode。 解决方法其一是将timer加入到NSRunloopCommonModes中。其二是将timer放到另一个线程中，然后开启另一个线程的runloop，这样可以保证与主线程互不干扰，而现在主线程正在处理页面滑动。示例代码如下： 1234567// 方法1[[NSRunLoop currentRunLoop] addTimer:timer forMode:NSRunLoopCommonModes];// 方法2dispatch_async(dispatch_get_global_queue(0, 0), ^{timer = [NSTimer scheduledTimerWithTimeInterval:1 target:self selector:@selector(repeat:) userInfo:nil repeats:true];[[NSRunLoop currentRunLoop] run];}); 3.滑动屏幕，从响应者的角度和手势的角度来分析系统做了什么事情从手指触摸屏幕，触摸事件的传递大概经历了3个阶段，系统响应阶段–&gt;SpringBoard.app处理阶段–&gt;前台App处理阶段，大致的流程如下图： 起始阶段 cpu处于睡眠阶段，等待事件发生 手指触摸屏幕 系统响应阶段 屏幕感应到触摸事件，并将感应到的事件传递给IOKit(用来操作硬件和驱动的框架) IOKit.framework封装整个触摸事件为IOHIDEvent对象，直接通过mach port(Mach属于硬件层，仅提供了诸如处理器调度、IPC进程通信等非常少量的基础服务。)转发给SpringBoard.app。 SpringBoard.app处理阶段 SpringBoard.app的主线程Runloop收到IOKit.framework转发来的消息苏醒，并触发对应mach port的Source1回调__IOHIDEventSystemClientQueueCallback()。 如果SpringBoard.app监测到有App在前台(记为xxx.app)，SpringBoard.app再通过mach port转发给xxx.app，如果SpringBoard.app监测到前台没有App运行，则SpringBoard.app进入App内部响应阶段，触发自身主线程runloop的Source0时间源的回调。 SpringBoard.app是一个系统进程，可以理解为桌面系统，可以统一管理和分发系统接收到的触摸事件。 App内部响应阶段 前台App主线程Runloop收到SpringBoard.app转发来的消息而苏醒，并触发对应mach port的Source1回调__IOHIDEventSystemClientQueueCallback()。 Source1回调内部，触发Source0回调__UIApplicationHandleEventQueue() Source0回调内部，封装IOHIDEvent为UIEvent。 Source0回调内部，调用UIApplication的sendEvent:方法，将UIEvent传给UIWindow，接下来就是寻找最佳响应者的过程，也就是命中测试hit-testing。 寻找到最佳响应者后，接下来就是事件在响应链中的传递和响应了。需要注意的是，事件除了可以被响应者处理之外，还有可能被手势识别器或者target-action捕捉并处理，这涉及到一个优先级的问题。如果触摸事件在响应链中没有找到能够响应该事件的对象，最终将被释放。 事件被处理或者释放之后，runloop如果没有其他事件进行处理，将会再次进入休眠状态。 寻找事件的最佳响应者(Hit-Testing)能够响应触摸事件的例如UIView，UIButton，UIViewController，UIApplication，Appdelegate等都继承自UIResponder类，一个页面上通常会有许许多多个这种类型的对象，都可以对点击事件作出响应。为了避免冲突，这就需要有一个先后顺序，也就是响应的优先级。Hit-Testing的目的就是找到具有最高优先级的响应对象。寻找的具体流程如下： UIApplication首先将事件队列中的事件取出，传递给窗口对象。如果有多个窗口，则优先询问windows数组的最后一个窗口。 如果窗口不能响应事件，则将事件传递给倒数第二个窗口，以此类推。如果窗口能够响应事件，则再依次询问该窗口的子视图。 重复步骤2。 若视图的所有子视图均不是最佳响应者，则自身就是最合适的响应者。另外需要注意的是，一下几种状态的视图无法响应事件： 不允许交互的视图：userInteractionEnabled = NO 隐藏的视图：hidden = YES 透明度alpha&lt;0.01的视图 怎么样验证一下上面所说的Hit-Testing的顺序呢，看一下UIView的API，里面会有一个hitTest：withEvent：方法，这个方法的主要作用就是查询并返回事件在当前视图中的响应者，每个被询问到的视图对象都会调用这个方法来返回当前视图层的响应者。 如果当前视图无法响应事件，则返回nil。 如果当前视图可以响应事件，但子视图不能响应事件，则返回自身作为当前视图的响应者。 如果当前视图可以响应事件，同时有子视图可以响应事件，则返回该子视图作为当前视图的响应者。 参考链接：iOS触摸事件处理 扩展阅读：UIButton在执行动画的时候,点击事件不响应的解决办法 4.网络请求回来后，回到主线程刷新UI，为什么有时候会延迟？主线程的RunLoop可能当时在处理的任务比较重，需要执行完后再执行刷新UI操作。 5.performSelector了解吗？performSelector:afterDelay:怎么确保执行的线程不被销毁。[self performSelector:@selector(test) withObject:nil afterDelay:.0]实际在runloop里面，是一个定时器，但是因为在子线程，runloop是默认没有开启的。 performSelector:afterDelay:之后开启runloop，即[[NSRunLoop currentRunLoop] run];。 port的生命周期结束，runloop也没了，那怎么保证runloop没销毁？ 在子线程调用方法前去开启Runloop。 6.谈谈autorelease和autoreleasepoolautorelease的基本用法 1) 会将对象放到一个自动释放池中 2) 当自动释放池被销毁时，会对池子里面的所有对象做一次release操作 3) 会返回对象本身 4) 调用完autorelease方法后，对象的计数器不变 autorelease的具体使用方法 生成并持有NSAutoreleasePool对象 调用已分配对象的autorelease实例方法 销毁NSAutoreleasePool对象 NSAutoreleasePool对象生存周期相当于C语言的局部变量作用域，对所有调用过autorelease的实例方法的对象，在销毁NSAutoreleasePool对象时，都将调用release实例方法，即实例对象调用release方法。 当对象调用了autorelease方法是实现实际大致可以理解为是调用的NSAutoreleasePool调用了类方法addObject 1234- (void)autorelease { [NSAutoreleasePool addObject: self];} AutoreleasePoolApp启动后，苹果在主线程 RunLoop 里注册了两个 Observer，其回调都是_wrapRunLoopWithAutoreleasePoolHandler()。 第一个 Observer 监视的事件是 Entry(即将进入Loop)，其回调内会调用 _objc_autoreleasePoolPush() 创建自动释放池。其 order 是-2147483647，优先级最高，保证创建释放池发生在其他所有回调之前。 第二个 Observer 监视了两个事件： BeforeWaiting(准备进入休眠) 时调用_objc_autoreleasePoolPop() 和 _objc_autoreleasePoolPush()释放旧的池并创建新池； Exit(即将退出Loop) 时调用 _objc_autoreleasePoolPop() 来释放自动释放池。 7.student类在读书方法里加代码，不改变原方法可以使用 Runtime 或者子类。 iOS系统中有没有用类似的方法实现？KVO 8.KVO实现原理，KVO打印实例对象的class为什么能够做到还是原本类。1) 利用RuntimeAPI动态生成一个子类，并且让instance对象的isa指向这个全新的子类2) 当修改instance对象的属性时，会调用Foundation的_NSSetXXXValueAndNotify函数 1234willChangeValueForKey:父类原来的setterdidChangeValueForKey:内部会触发监听器（Oberser）的监听方法( observeValueForKeyPath:ofObject:change:context:） 注意事项：需要调用set方法触发KVO 实现了class方法，返回了父类。 9.http get和post区别Get是安全的、幂等的、可缓存的、Get参数一般拼接在url的query参数里，有长度限制。 Post是不安全的、非幂等的、不可缓存的，Post的参数一般放在请求体里，相对安全。 https的过程？ 一个HTTPS请求实际上包含了两次HTTP传输： 1）客户端发起一个http请求，连接到服务器的443端口。 2）服务端把自己的信息以数字证书的形式返回给客户端（证书内容有密钥公钥，网站地址，证书颁发机构，失效日期等）。证书中有一个公钥来加密信息，私钥由服务器持有。 3）验证证书的合法性 客户端收到服务器的响应后会先验证证书的合法性（证书中包含的地址与正在访问的地址是否一致，证书是否过期）。 4）生成随机密码（RSA签名） 如果验证通过，或用户接受了不受信任的证书，浏览器就会生成一个随机的对称密钥（session key）并用公钥加密，让服务端用私钥解密，解密后就用这个对称密钥进行传输了，并且能够说明服务端确实是私钥的持有者。 5）生成对称加密算法 验证完服务端身份后，客户端生成一个对称加密的算法和对应密钥，以公钥加密之后发送给服务端。此时被黑客截获也没用，因为只有服务端的私钥才可以对其进行解密。之后客户端与服务端可以用这个对称加密算法来加密和解密通信内容了。 6）客户端会发起HTTPS中的第二个HTTP请求，将加密之后的客户端密钥发送给服务器。 7）服务器接收到客户端发来的密文之后，会用自己的私钥对其进行非对称解密，解密之后的明文就是客户端密钥，然后用客户端密钥对数据进行对称加密，这样数据就变成了密文。 8）然后服务器将加密后的密文发送给客户端。 9）客户端收到服务器发送来的密文，用客户端密钥对其进行对称解密，得到服务器发送的数据。这样HTTPS中的第二个HTTP请求结束，整个HTTPS传输完成。 https是绝对的安全吗？怎么保证安全性？不是，可以被抓包。 抓包的原理？Charles作用其实相当于拦截器，当客户端和服务器通信时，Charles其实会先接收到服务器的证书，但是它会自己生成一个证书发送给客户端(不管是Web端或App应用)，也就是说它不仅仅是拦截，甚至还可以修改。 由于Charles更改了证书，所以如果你是使用的Web浏览器，需要导入相应的Charles证书，否则校验不通过会给出安全警告，必须安装Charles的证书后才能进行正常访问。 1) Charles拦截客户端的请求。 2) 服务器向“客户端”（实际上是Charles）返回服务器的CA证书 3) Charles拦截服务器的响应，获取服务器证书公钥，然后自己制作一张证书，将服务器证书替换后发送给客户端。（这一步，Charles拿到了服务器证书的公钥） 4) 客户端接收到“服务器”（实际上是Charles）的证书后，生成一个对称密钥，用Charles的公钥加密，发送给“服务器”（Charles） 5) Charles拦截客户端的响应，用自己的私钥解密对称密钥，然后用服务器证书公钥加密，发送给服务器。（这一步，Charles拿到了对称密钥） 6) 服务器用自己的私钥解密对称密钥，向“客户端”（Charles）发送响应 7) Charles拦截服务器的响应，替换成自己的证书后发送给客户端 至此，连接建立，Charles拿到了服务器证书的公钥和客户端与服务器协商的对称密钥，之后就可以解密或者修改加密的报文了。 Charles作为“中间人代理”，拿到了服务器证书公钥和 HTTPS 连接的对称密钥，前提是客户端选择信任并安装Charles的CA证书，否则客户端就会“报警”并中止连接。这样看来，HTTPS还是很安全的。 怎么避免被抓包？判断是否有代理，如果有， 1）可以取消本次的网络请求。 2）可以取消掉代理，直连服务端。 校验证书、不使用http，使用更底层的协议。","link":"/美团优选面试题及答案/"}],"tags":[{"name":"面试","slug":"面试","link":"/tags/面试/"},{"name":"技术点","slug":"技术点","link":"/tags/技术点/"},{"name":"ofo","slug":"ofo","link":"/tags/ofo/"},{"name":"乐为金融","slug":"乐为金融","link":"/tags/乐为金融/"},{"name":"京东","slug":"京东","link":"/tags/京东/"},{"name":"太一云","slug":"太一云","link":"/tags/太一云/"},{"name":"十点读书","slug":"十点读书","link":"/tags/十点读书/"},{"name":"好未来","slug":"好未来","link":"/tags/好未来/"},{"name":"字节跳动","slug":"字节跳动","link":"/tags/字节跳动/"},{"name":"平安","slug":"平安","link":"/tags/平安/"},{"name":"开果","slug":"开果","link":"/tags/开果/"},{"name":"面试题","slug":"面试题","link":"/tags/面试题/"},{"name":"微店","slug":"微店","link":"/tags/微店/"},{"name":"朗播网","slug":"朗播网","link":"/tags/朗播网/"},{"name":"核桃编程","slug":"核桃编程","link":"/tags/核桃编程/"},{"name":"棵朵","slug":"棵朵","link":"/tags/棵朵/"},{"name":"滴滴","slug":"滴滴","link":"/tags/滴滴/"},{"name":"笔试题","slug":"笔试题","link":"/tags/笔试题/"},{"name":"登云美业","slug":"登云美业","link":"/tags/登云美业/"},{"name":"百度","slug":"百度","link":"/tags/百度/"},{"name":"美团","slug":"美团","link":"/tags/美团/"},{"name":"腰果公考","slug":"腰果公考","link":"/tags/腰果公考/"},{"name":"苏宁","slug":"苏宁","link":"/tags/苏宁/"},{"name":"算法","slug":"算法","link":"/tags/算法/"},{"name":"链表","slug":"链表","link":"/tags/链表/"},{"name":"高思教育","slug":"高思教育","link":"/tags/高思教育/"},{"name":"小米","slug":"小米","link":"/tags/小米/"},{"name":"美团优选","slug":"美团优选","link":"/tags/美团优选/"}],"categories":[{"name":"面试题","slug":"面试题","link":"/categories/面试题/"}]}