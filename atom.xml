<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SOSOWIKI</title>
  <icon>https://www.gravatar.com/avatar/0add61f863154d82902310b0dd29ec33</icon>
  <subtitle>SOSOWIKI</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://soso.wiki/"/>
  <updated>2025-09-25T14:27:40.450Z</updated>
  <id>http://soso.wiki/</id>
  
  <author>
    <name>SOSOWIKI</name>
    <email>swift@88.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>好未来</title>
    <link href="http://soso.wiki/2025-09-24-%E5%A5%BD%E6%9C%AA%E6%9D%A5/"/>
    <id>http://soso.wiki/2025-09-24-好未来/</id>
    <published>2025-09-24T10:00:00.000Z</published>
    <updated>2025-09-25T14:27:40.450Z</updated>
    
    <content type="html"><![CDATA[<p>好未来<br><a id="more"></a></p><p>项目：</p><p>1.体积优化的背景，做了哪些手段，收益，二进制是自动打包还是手动打包？二进制的代码问题怎么调试？有没有遇到打二进制后变成release包和开发不一致的情况</p><p>2.MVCS、SectionProvider 的背景，怎么实现的？</p><p>3.加载速度优化</p><p>4.静态分析都有哪些类型的问题？是定期做吗？为什么不搞成流水线自动检测？</p><p>5.活动页组件化怎么做的？frame 可配置吗？</p><p>6.双向通信</p><p>7.接口层和 JS 逻辑层异常监控</p><p>8.iOS26 关注了吗</p><p>9.用 AI 做了哪些事情，哪些重复性的可以用 AI 替代？用的具体是哪个 AI？</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好未来&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="面试题" scheme="http://soso.wiki/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试" scheme="http://soso.wiki/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="好未来" scheme="http://soso.wiki/tags/%E5%A5%BD%E6%9C%AA%E6%9D%A5/"/>
    
  </entry>
  
  <entry>
    <title>米可世界</title>
    <link href="http://soso.wiki/2025-09-24-%E7%B1%B3%E5%8F%AF%E4%B8%96%E7%95%8C/"/>
    <id>http://soso.wiki/2025-09-24-米可世界/</id>
    <published>2025-09-24T08:00:00.000Z</published>
    <updated>2025-09-25T14:25:23.055Z</updated>
    
    <content type="html"><![CDATA[<p>米可世界<br><a id="more"></a></p><p>1.Runloop 的流程，底层实现，项目里实际使用，监控卡顿监听的具体是哪个状态，Source0 和 Source1 区别</p><p>2.局部对象的释放时机；autoreleasepool的实现，weak 存在哪里</p><p>3.SDK 构建提效，有没有二进制化的经验，缓存</p><p>4.feed 流滑动卡顿可能有哪些原因；离屏渲染为什么会影响；那些异步的库，不也是在另一个屏幕缓冲区处理的吗？</p><p>5.首屏优化，有没有针对各个模块的，比如卡线程了，怎么检测，怎么优化</p><p>6.IM Socket 的流程</p><p>7.FMDB 的内部实现，是线程安全的吗？和其他如 WCDB 效率的比较；</p><p>8.用过哪些锁？效率比较；@synchronized 的作用是什么？</p><p>9.上传大图，怎么分片，怎么控制线程最大并发数，怎么告诉web上传进度？上传进度细颗粒度，每片都有哪些状态，现有上传单个图片的方法，怎么实时同步进度</p><p>10.SDWebImage 加载图片的流程，缓存机制，LRU怎么实现的？加载图片传入了 UIImageView 下载完图片后怎么拿到这个对象，因为是异步的</p><p>11.OOM 怎么避免？</p><p>12.MVCS 与 SectionProvider 怎么实现的</p><h3 id="参考答案"><a href="#参考答案" class="headerlink" title="参考答案"></a>参考答案</h3><p>1.Runloop 的流程，底层实现，项目里实际使用，监控卡顿监听的具体是哪个状态，Source0 和 Source1 区别</p><p>（1）1. RunLoop 的流程</p><p>RunLoop 是一个事件循环机制，内部主要流程可以简化为：</p><ol><li><strong>通知 Observers</strong>：进入 Loop 前，会发通知（如 kCFRunLoopEntry）。</li><li><strong>处理 Timer</strong>：检查是否有已到期的 Timer 任务。</li><li><strong>处理 Source0</strong>：非基于端口的事件（UI 事件、Block 回调等），需要主动唤醒。</li><li><strong>处理 Source1</strong>：基于 Mach port 的事件（系统事件、IPC、触摸事件）。</li><li><strong>进入休眠</strong>：调用 mach_msg_trap 等底层系统调用，线程进入休眠状态。</li><li><strong>被唤醒</strong>：<ul><li>有事件到来（Source、Timer、GCD dispatch）。</li><li>外部手动唤醒（CFRunLoopWakeUp）。</li></ul></li><li><strong>通知 Observers</strong>：将要处理事件（kCFRunLoopBeforeSources / kCFRunLoopBeforeWaiting / kCFRunLoopAfterWaiting）。</li><li><strong>循环往复</strong>：直到 CFRunLoopStop 被调用。</li></ol><p>（2） 底层实现<br>    •    核心结构：CFRunLoop 和 CFRunLoopMode，每个线程对应一个 RunLoop（存储在 pthread 的 TLS 中）。<br>    •    事件驱动：通过 Mach port 和 内核态通信。比如触摸事件从 IOKit -&gt; SpringBoard -&gt; App -&gt; RunLoop Mach port。<br>    •    休眠/唤醒：利用系统调用 mach_msg_trap 进入内核，等待消息；有事件时唤醒。<br>    •    RunLoopObserver：内部维护一组回调，挂在不同状态点（Entry、BeforeTimers、BeforeSources、BeforeWaiting、AfterWaiting、Exit）。</p><p>（3）项目里的实际使用</p><ul><li><strong>定时器</strong>：NSTimer / CADisplayLink / performSelector:afterDelay: 本质依赖 RunLoop。</li><li><strong>常驻线程</strong>：如 AFNetworking 的网络请求线程，使用 RunLoop 保持线程不退出。</li><li><strong>事件响应</strong>：触摸事件、UI 更新都跑在主线程 RunLoop 中。</li><li><strong>GCD 与 RunLoop</strong>：dispatch_async 提交到主队列的 block，本质通过 CFRunLoopSource 执行。</li><li><strong>性能优化</strong>：比如在 NSRunLoopCommonModes 下添加任务，避免因 UI 滑动（UITrackingRunLoopMode）而阻塞。</li></ul><p>（4）卡顿监控监听的状态</p><p>常见的 卡顿监控（UI 卡顿监控） 原理就是利用 RunLoop Observer，在关键状态点打点：<br>    •    监听 kCFRunLoopBeforeSources 和 kCFRunLoopAfterWaiting。<br>    •    在 BeforeSources 说明即将处理事件。<br>    •    在 AfterWaiting 说明刚被唤醒，准备进入事件处理。<br>    •    如果这两个状态之间持续很久没有切换，说明 RunLoop 卡在某个任务（主线程卡住）。</p><p>具体做法：</p><pre><code>1.    在主线程 RunLoop 添加 Observer，监听这两个状态。2.    同时开一个子线程用 dispatch_semaphore_wait + 超时机制判断。3.    超过阈值（如 &gt; 200ms）没有状态切换，判定为卡顿。4.    结合堆栈采样（backtrace）就能定位具体卡住的位置。</code></pre><p>（5）source0 与 source1 区别</p><ol><li><p>Source0<br> •    定义：非基于内核端口（port）的事件源。<br> •    特点：<br> •    纯用户态，不会主动唤醒 RunLoop，需要外部手动唤醒。<br> •    常用于 App 内部事件分发，例如 performSelector:onThread:。<br> •    触发方式：<br> •    调用 CFRunLoopSourceSignal(source) 标记为待处理。<br> •    再调用 CFRunLoopWakeUp(runloop) 唤醒 RunLoop。<br> •    例子：<br> •    performSelector:onThread:<br> •    手动创建的 CFRunLoopSource0</p></li><li><p>Source1<br> •    定义：基于 Mach port 的事件源。<br> •    特点：<br> •    内核态驱动，系统事件到达时可以直接唤醒 RunLoop。<br> •    主要用来处理 系统消息（如触摸、系统回调、CFMachPort）。<br> •    触发方式：<br> •    当端口有消息时，内核会唤醒 RunLoop，执行对应的回调。<br> •    例子：<br> •    系统的触摸事件、屏幕旋转事件。<br> •    CFMachPort、CFSocket</p></li></ol><p>2.局部对象的释放时机；autoreleasepool的实现，weak 存在哪里</p><p>（1）局部对象的释放时机</p><ul><li><p>在 ARC 下，局部变量对象（比如方法里的 <code>NSObject *obj = [[NSObject alloc] init];</code>）的释放时机主要取决于 <strong>作用域 + 引用计数</strong>。</p></li><li><p>编译器会在合适的位置插入 objc_release。</p></li><li><p>通常规则：</p><ol><li>如果是强引用（strong），在超出作用域时编译器插入 release。</li><li>如果放在了 @autoreleasepool 内，且对象通过 autorelease 创建（如 [NSString stringWithFormat:@”xx”]），则会在 pool 清空时统一 release。</li><li>如果没有显式放进 autoreleasepool，那么局部对象的 autorelease 会挂在当前线程的默认 <strong>autoreleasepool page</strong> 上（RunLoop 每次循环会清理一次）。</li></ol></li><li>所以：<ul><li>alloc/init 的对象：离开作用域立即释放。</li><li>工厂方法 (stringWith…) 返回的对象：通常是 autorelease，释放时机取决于最近的 autoreleasepool drain。</li></ul></li></ul><p>(2) autoreleasepool 的实现</p><ul><li>@autoreleasepool {} 在编译后会被转化为：<figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">void</span>* context = objc_autoreleasePoolPush();</span><br><span class="line">&#123;  <span class="hljs-comment">// pool 内部作用域</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">objc_autoreleasePoolPop(context);</span><br></pre></td></tr></table></figure></li></ul><p>​    •    底层实现依赖 AutoreleasePoolPage：<br>​    •    每个线程维护一个栈状的双向链表结构。<br>​    •    objc_autorelease(obj) 会把对象的指针放入当前 page。<br>​    •    pool 被 pop 时，会遍历这个 page，依次对对象发送 release。<br>​    •    RunLoop 机制：<br>​    •    主线程的 RunLoop 每次事件循环开始会 push 一个 pool，结束时 pop。<br>​    •    这保证了常见的 UIKit API 里 autorelease 对象能在一次事件处理后被释放。</p><p>（3）weak 的存储位置<br>    •    weak 指针并不是单纯的内存地址，它需要 运行时的弱引用表（weak_table_t） 管理：<br>    •    weak_table_t 是一个 hash 表，key 是对象地址（被引用的对象），value 是指向该对象的所有 weak 指针地址集合。<br>    •    当对象的引用计数归零时，dealloc 流程会调用 objc_destroyWeak，把所有指向该对象的 weak 指针置为 nil。<br>    •    所以 weak 指针存储在：<br>    •    指针本身依然在栈上 / 堆上（取决于变量声明位置），<br>    •    但 runtime 维护了一份全局的弱引用表，用来统一管理 对象 ↔ weak 指针列表 的关系。<br>    •    注意：<br>    •    weak 本身是一个普通指针，只不过 runtime 在对象销毁时会把它自动清空。<br>    •    所以 weak 查找和赋值都会经过 runtime 的弱引用表操作，有一定性能开销。</p><p>3.SDK 构建提效，有没有二进制化的经验，缓存</p><p>模块化/组件化<br>SDK 内部拆分为稳定依赖（binary、SPM precompiled）+ 高频改动部分（源码），避免全量编译。</p><p>构建缓存<br>  CI 里缓存 DerivedData、Pods、SPM 构建产物。</p><p>4.Feed 流滑动卡顿可能有哪些原因；离屏渲染为什么会影响；那些异步的库，不也是在另一个屏幕缓冲区处理的吗？</p><p>（1） Feed 流滑动卡顿的常见原因<br>卡顿一般是因为 <strong>主线程在 16.67ms（60fps 下）或者 8.3ms（120fps 下）没有完成一次绘制提交</strong>。常见原因：</p><ul><li><strong>布局计算过重</strong><ul><li>大量 autoLayout 约束计算</li><li>cell 高度动态计算不缓存</li></ul></li><li><p><strong>主线程阻塞</strong></p><ul><li>大量 JSON 解析、IO、图片解码放在主线程</li><li>复杂业务逻辑或锁竞争</li></ul></li><li><p><strong>绘制负担过重</strong></p><ul><li>大量圆角、阴影、mask、group opacity 等触发离屏渲染</li><li>大图缩放、解码延迟</li></ul></li><li><p><strong>频繁创建/销毁对象</strong></p><ul><li>cell 重复 init，而不是重用</li></ul></li><li><p><strong>图片处理问题</strong></p><ul><li>未做预解码、下采样，导致 GPU/CPU 开销大</li></ul></li></ul><p>（2）为什么离屏渲染会影响滑动流畅度</p><ul><li><p><strong>什么是离屏渲染 (Offscreen Rendering)</strong></p><ul><li><p>GPU 本来在 <strong>On-Screen Buffer</strong>（屏幕缓冲区）里画东西，顺序执行即可。</p></li><li><p>一旦遇到圆角 + mask、阴影、layer.shouldRasterize 等情况，GPU 会：</p><ol><li>先新建一个 <strong>Offscreen Buffer</strong></li><li>把内容画到这个 buffer</li><li>再拷贝回 On-Screen Buffer</li></ol></li></ul></li></ul><ul><li><p><strong>开销在哪</strong></p><ul><li>新建 buffer 本身消耗内存</li><li>GPU 切换上下文（Context Switch）有性能开销</li><li>结果要 copy 回主屏幕 buffer，增加带宽占用</li></ul></li><li><p><strong>为什么会卡顿</strong></p><ul><li>这不是“异步”的，而是 GPU 的额外工作，依然要卡在 <strong>渲染管线</strong>（Display Link vsync 同步）。</li><li>如果离屏渲染量大，GPU 跟不上 vsync 节奏，就掉帧 → feed 滑动卡顿。</li></ul></li></ul><p>（3）“异步绘制库” 和离屏渲染的区别</p><p>你说的 “异步的库”（比如 YYAsyncLayer, Texture (AsyncDisplayKit)）其实跟 Core Animation 的 Offscreen Rendering 不一样：</p><ul><li><p><strong>异步绘制库</strong></p><ul><li>把文本排版、图片合成、UI 绘制逻辑放到 <strong>后台线程的 CGContext</strong> 里完成</li><li>得到一张最终的位图（Bitmap）</li><li>主线程只把这张图交给 layer.contents</li><li>→ 避免了主线程阻塞 &amp; 避免 GPU 临时建 buffer</li></ul></li><li><p><strong>GPU 离屏渲染</strong></p><ul><li>是 <strong>渲染阶段</strong> GPU 为了实现特效而“不得不”建一个临时 buffer</li><li>发生在绘制提交之后、硬件管线中</li><li>→ 无法用“放后台线程”解决，因为是 GPU 硬件的需求</li></ul></li></ul><p>可以这样理解：</p><ul><li><strong>异步绘制库：CPU 先画好 → 减轻主线程 &amp; GPU 压力</strong></li><li><strong>离屏渲染：GPU 临时建 buffer → 加重 GPU 压力</strong></li></ul><p>总结：</p><ul><li>Feed 卡顿大多是 <strong>主线程阻塞 + GPU 负担过重</strong>。</li><li>离屏渲染会卡，是因为 <strong>GPU 在渲染管线上多了额外 buffer 开销</strong>。</li><li>异步绘制库的“异步 buffer”不是 GPU 的 Offscreen Buffer，而是 <strong>CPU 侧先生成位图</strong>，两者概念完全不同。</li></ul><p>5.首屏优化，有没有针对各个模块的，比如卡线程了，怎么检测，怎么优化<br>卡线程检测方法</p><pre><code>1.    Runloop 卡顿监控•    利用 CFRunLoopObserver 监听主线程 RunLoop 的状态（kCFRunLoopBeforeSources、kCFRunLoopAfterWaiting 等）。•    当 RunLoop 某次循环超过阈值（如 &gt;200ms）还未完成，就认为发生了卡顿。•    工具类库：YYAsyncLayer、FBRetainCycleDetector + 自己封装卡顿监控。2.    堆栈采样 (Stack Sampling)•    使用子线程定时采样主线程调用栈（比如每 50ms 取一次）。•    当检测到主线程长时间无响应时，打印采样栈，可快速定位阻塞点。•    开源方案：KSCrash、PLCrashReporter。3.    系统工具•    Instruments → Time Profiler：定位函数耗时。•    Instruments → Main Thread Checker：发现 UI API 是否在子线程调用。•    Instruments → System Trace：更底层地看线程调度与锁等待。</code></pre><p>常见模块的首屏优化点：<br>（1）启动阶段（冷启动）</p><ul><li><strong>优化检测</strong></li><li><p>利用 DYLD_PRINT_STATISTICS 环境变量观察动态库加载耗时。</p><ul><li>Xcode 的 App Launch 模板可分析启动阶段。</li></ul></li><li><p><strong>优化手段</strong></p><ul><li>减少动态库数量，合并 Pod。</li><li>用 App Clips 或延迟加载来减少首次启动体积。</li><li>+load 和 +initialize 里避免做耗时操作。</li></ul></li></ul><p>（2） 主线程耗时操作</p><ul><li><p><strong>检测</strong></p><ul><li>Runloop 卡顿监控 + Instruments。</li></ul></li><li><p><strong>优化</strong></p><ul><li>UI 布局计算移到子线程（AutoLayout 的约束尽量减少层级）。</li><li>图片解码、JSON 解析放子线程（YYImage / YYModel 的异步方案）。</li><li>渲染复杂 UI 时用 CALayer 或离屏渲染优化。</li></ul></li></ul><p>（3）网络模块</p><ul><li><p><strong>检测</strong></p><ul><li>在首屏接口加埋点（发起时间 - 响应时间）。</li><li>Charles / Wireshark 抓包分析耗时。</li></ul></li><li><p><strong>优化</strong></p><ul><li><p>核心数据接口提前并发请求，不要串行。</p></li><li><p>使用缓存（磁盘缓存、内存缓存、预加载）。</p></li><li><p>大图延迟加载，必要时用占位图。</p></li></ul></li></ul><p>（4） 图片加载</p><ul><li><p><strong>检测</strong></p><ul><li>Instruments → Allocations/Time Profiler 观察解码与内存情况。</li></ul></li><li><p><strong>优化</strong></p><ul><li>预解码（SDWebImage、YYImage）。</li><li>降低分辨率，避免原图直接展示。</li><li>使用 WebP/HEIF 格式。</li></ul></li></ul><p>（5）渲染与绘制</p><ul><li><strong>检测</strong></li><li><p>Instruments → Core Animation 检测 FPS、离屏渲染。</p><ul><li>GPU Driver template 观察 GPU 是否被打满。</li></ul></li><li><p><strong>优化</strong></p><ul><li>减少视图层级，避免过度使用透明度/圆角/阴影。</li><li>尽量用 CAShapeLayer 替代复杂绘制。</li><li>提前渲染静态页面的快照。</li></ul></li></ul><p>（6）数据处理 &amp; 本地 IO</p><ul><li><p><strong>检测</strong></p><ul><li>Time Profiler 定位磁盘/数据库耗时。</li></ul></li><li><p><strong>优化</strong></p><ul><li>首页不要做大量磁盘读写。</li><li>CoreData/SQLite 的查询下沉到子线程。</li><li>UserDefaults 批量写时要避免阻塞。</li></ul></li></ul><p>6.IM Socket 的流程</p><p>1.建立连接</p><ul><li><p>使用 CFStream（CoreFoundation）、CFSocket、或者三方库（如 <a href="https://github.com/robbiehanson/CocoaAsyncSocket" target="_blank" rel="noopener">CocoaAsyncSocket</a>）来建立 TCP 连接。</p></li><li><p>或者直接用 <strong>WebSocket</strong>（iOS 13+ 推荐 URLSessionWebSocketTask，早期可用 SocketRocket）。</p></li><li><p>流程：</p><ol><li>客户端发起连接请求（IP + 端口）。</li><li>服务器返回是否成功。</li><li>成功后，进入可读写状态。</li></ol></li></ul><p>2.登录/鉴权</p><ul><li>建立连接后，通常第一步是发送 <strong>登录包 / 鉴权信息</strong>（例如 userId、token、设备信息）。</li><li>服务器验证通过后，会返回 <strong>登录成功 ACK</strong>。</li><li>只有在鉴权成功后，Socket 才允许继续收发消息。</li></ul><p>3.维持长连接</p><ul><li>长连接需要保持心跳（心跳包 ping/pong）。</li><li>客户端定时（如 30s/60s）发送 <strong>心跳包</strong>，服务器回应 <strong>心跳 ACK</strong>。</li><li>如果心跳超时（连续几次未响应），认为连接断开，需要自动重连。</li></ul><p>4.消息收发</p><ul><li><p><strong>发送消息：</strong></p><ul><li>将消息序列化成约定的数据格式（JSON / Protobuf / 二进制协议）。</li><li>封装消息头（包含消息类型、长度、消息 ID 等）。</li><li>通过 Socket write/send 发出。</li></ul></li><li><p><strong>接收消息：</strong></p><ul><li>Socket 输入流回调或代理触发。</li><li>先读消息头，解析数据包长度。</li><li>再按协议读取完整消息体。</li><li>反序列化成业务层可用的模型对象。</li></ul></li></ul><p>5.消息确认（ACK机制）</p><ul><li><p>为了保证消息可靠性，通常采用 <strong>消息回执机制</strong>：</p><ul><li>客户端发送消息 → 服务器收到后，返回 ACK（确认包，包含消息 ID）。</li></ul></li><li>如果客户端在一定时间内未收到 ACK，则重发消息。</li></ul><p>6.断线重连</p><ul><li><p>网络变化（WiFi/4G切换）、App 后台 → 前台，都会导致连接中断。</p></li><li><p>需要实现 <strong>自动重连机制</strong>：</p><ul><li>发现连接断开 → 进入重连流程。</li><li>指数退避重试（如 1s → 2s → 4s → 8s…，有上限）。</li><li>连接成功后，重新鉴权、同步离线消息。</li></ul></li></ul><p>7.离线消息同步</p><ul><li>断线期间可能会有消息未收到。</li><li>重新连接成功后，客户端需要调用接口获取 <strong>离线消息</strong>，再和本地消息队列合并。</li></ul><p>8.退出/释放</p><ul><li>用户主动退出登录时，发送 <strong>退出包</strong>。</li><li>关闭 Socket，释放资源。</li></ul><p>7.FMDB 的内部实现，是线程安全的吗？和其他如 WCDB 效率的比较；</p><p>（1）FMDB 的线程安全性</p><ol><li><strong>FMDatabase</strong></li></ol><ul><li>FMDatabase 本身 <strong>不是线程安全的</strong>。<ul><li>官方明确建议：<strong>一个 FMDatabase 实例只能在单一线程中使用</strong>，不能跨线程共享。</li></ul></li></ul><ol start="2"><li><strong>FMDatabaseQueue</strong></li></ol><ul><li><p>为了保证线程安全，FMDB 提供了 FMDatabaseQueue。</p></li><li><p>内部实现方式：</p><ul><li>维护一个 dispatch_queue（串行队列）。<ul><li>通过 inDatabase: 或 inTransaction: 方法，将所有对数据库的操作 block 串行提交到这个队列里执行。</li></ul></li><li>这样可以保证同一时间只有一个线程在访问数据库，从而避免 SQLite 的并发写入问题（SQLite 本身写操作也是串行化的）。</li></ul></li></ul><ol start="3"><li><strong>FMDatabasePool</strong><ul><li>为了优化多读场景，FMDB 还提供 FMDatabasePool。</li><li>内部维护多个数据库连接（通常用于读操作）。</li><li>读操作可以并发分配给不同的连接，写操作仍然会被串行化。</li></ul></li></ol><p>结论：</p><ul><li><strong>单独使用 FMDatabase → 线程不安全</strong></li><li><strong>使用 FMDatabaseQueue/Pool → 线程安全</strong></li></ul><p>8.用过哪些锁？效率比较；@synchronized 的作用是什么？</p><ol><li><strong>OSSpinLock（已废弃）</strong><ul><li>自旋锁，忙等，会不断轮询等待锁释放。</li><li>性能很高，但存在优先级反转问题（高优先级线程可能被低优先级线程“饿死”），Apple 已经不推荐使用。</li><li>iOS 10+ 建议用 os_unfair_lock 代替。</li></ul></li><li><strong>os_unfair_lock</strong><ul><li>自旋锁的替代品，会在等待时挂起线程，避免优先级反转。</li><li>适合短时间、高频加锁的场景。</li><li>性能比 pthread_mutex 更好。</li></ul></li><li><strong>pthread_mutex（互斥锁）</strong><ul><li>POSIX 标准互斥锁。</li><li>比较通用，支持递归锁（PTHREAD_MUTEX_RECURSIVE）。</li><li>开销比 os_unfair_lock 大一些，因为需要进入内核等待。</li></ul></li><li><strong>NSLock</strong><ul><li>Objective-C 封装，内部基于 pthread_mutex。</li><li>提供了面向对象的 API，简单易用。</li><li>性能略低于 os_unfair_lock。</li></ul></li><li><strong>NSRecursiveLock</strong><ul><li>递归锁，允许同一线程多次获得同一把锁，避免死锁。</li><li>底层也是 pthread_mutex(recursive)。</li></ul></li><li><strong>NSCondition / NSConditionLock</strong><ul><li>条件锁，用于线程间的条件同步（等待某个条件满足才继续）。</li><li>常用于“生产者—消费者”模型。</li></ul></li><li><strong>dispatch_semaphore</strong><ul><li>GCD 提供的信号量机制。</li><li>可用于资源计数、并发数控制，也可以当成锁来用。</li><li>性能和可控性较好。</li></ul></li><li><strong>@synchronized</strong><ul><li>Objective-C 关键字，基于 objc_sync_enter/objc_sync_exit 实现。</li><li>内部使用哈希表管理对象锁。</li><li>使用简单，但性能比 NSLock 差一些，因为额外做了对象管理和异常处理。</li><li>适合快速实现线程安全，但不推荐在性能敏感场景中使用。</li></ul></li></ol><p>9.上传大图，怎么分片，怎么控制线程最大并发数，怎么告诉web上传进度？上传进度细颗粒度，每片都有哪些状态，现有上传单个图片的方法，怎么实时同步进度</p><p>（1）分片策略</p><ul><li><p><strong>分片大小</strong>：一般 2MB5MB 一片比较合理（20M → 104 片）。</p><ul><li>分片太小：请求数太多，开销大；</li><li>分片太大：失败重传成本高。</li></ul></li><li><p><strong>分片切割</strong>：用 NSData 的 subdataWithRange: 或者 InputStream，把整张图片按顺序拆成多个 NSData。</p></li></ul><p>示例：<br><figure class="highlight objc hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">NSData</span> *imageData = <span class="hljs-built_in">UIImageJPEGRepresentation</span>(image, <span class="hljs-number">0.9</span>);</span><br><span class="line"><span class="hljs-built_in">NSUInteger</span> chunkSize = <span class="hljs-number">2</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>; <span class="hljs-comment">// 2MB</span></span><br><span class="line"><span class="hljs-built_in">NSUInteger</span> length = [imageData length];</span><br><span class="line"><span class="hljs-built_in">NSUInteger</span> offset = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-built_in">NSMutableArray</span> *chunks = [<span class="hljs-built_in">NSMutableArray</span> array];</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">while</span> (offset &lt; length) &#123;</span><br><span class="line">    <span class="hljs-built_in">NSUInteger</span> thisChunkSize = MIN(chunkSize, length - offset);</span><br><span class="line">    <span class="hljs-built_in">NSData</span>* chunk = [imageData subdataWithRange:<span class="hljs-built_in">NSMakeRange</span>(offset, thisChunkSize)];</span><br><span class="line">    [chunks addObject:chunk];</span><br><span class="line">    offset += thisChunkSize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>（2）控制并发数</p><ul><li><strong>不要一次性全部并发上传</strong>（可能耗尽带宽/内存/线程）。</li><li>推荐用 <strong>NSOperationQueue</strong> 或 <strong>GCD 信号量</strong>来限制最大并发数。</li></ul><p>例子：最多并发 3 个分片上传</p><figure class="highlight objc hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">dispatch_semaphore_t semaphore = dispatch_semaphore_create(<span class="hljs-number">3</span>); <span class="hljs-comment">// 最大并发 3</span></span><br><span class="line"><span class="hljs-built_in">dispatch_queue_t</span> queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="hljs-number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-built_in">NSData</span> *chunk <span class="hljs-keyword">in</span> chunks) &#123;</span><br><span class="line">    <span class="hljs-built_in">dispatch_async</span>(queue, ^&#123;</span><br><span class="line">        dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);</span><br><span class="line">        </span><br><span class="line">        [<span class="hljs-keyword">self</span> uploadChunk:chunk completion:^&#123;</span><br><span class="line">            dispatch_semaphore_signal(semaphore);</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要更优雅，可以用 NSOperationQueue，设置 maxConcurrentOperationCount = 3。</p><p>（3）上传进度<br>方式 A: NSURLSessionUploadTask + progress</p><ul><li>每个分片创建一个 NSURLSessionUploadTask，监听其 NSProgress 对象。</li><li>NSProgress 能返回当前上传的字节数，结合所有分片，汇总出整体进度。</li></ul><p>方式B: NSURLSession delegate (更灵活)</p><p>汇总整体进度 所有分片进度的加权平均</p><ul><li>每个分片有状态（Pending/Uploading/Success/Failed）。</li><li>上传时监听 NSURLSession 的进度回调，实时拿到字节数。</li><li>汇总所有分片进度得到整体进度。</li><li>再把整体进度同步给 UI 或 Web。</li></ul><p>10.SDWebImage 加载图片的流程，缓存机制，LRU怎么实现的？加载图片传入了 UIImageView 下载完图片后怎么拿到这个对象，因为是异步的</p><p>（1）SDWebImage 加载图片的流程</p><ol><li>入口：<figure class="highlight objc hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[imageView sd_setImageWithURL:url placeholderImage:<span class="hljs-literal">nil</span> options:<span class="hljs-number">0</span> completed:<span class="hljs-literal">nil</span>];</span><br></pre></td></tr></table></figure></li></ol><p>传入 UIImageView 和 URL 后，会走到 SDWebImageManager 的 loadImageWithURL。</p><ol start="2"><li>检查缓存：<br>•    先查 内存缓存（SDImageCache.memoryCache，底层是 NSCache + LRU）<br>•    内存没有，再查 磁盘缓存（通过 key -&gt; 文件路径 / SQLite 索引）</li><li>下载图片（如果缓存都没有）：<br>•    调用 SDWebImageDownloader，内部基于 NSURLSession 创建下载任务，异步下载数据。<br>•    支持下载队列、并发控制、请求去重、进度回调。</li><li>解码 &amp; 缓存：<br>•    图片数据下载完成后，会进行 解码（decode），避免主线程卡顿。<br>•    然后写入 内存缓存 + 磁盘缓存。</li><li>回调 UI：<br>•    下载完成后，主线程回调，把 UIImage 设置到传入的 UIImageView.image 上。</li></ol><p>（2）缓存机制</p><p>SDWebImage 的缓存分两级：</p><ol><li><strong>内存缓存</strong></li></ol><ul><li><p>使用 NSCache 封装（带自动清理机制，内存紧张时会自动回收）。</p></li><li><p>内部实现了 <strong>LRU (Least Recently Used)</strong> 算法：</p></li></ul><pre><code>- 每次访问一个图片，会把它放到链表头。- 淘汰时从链表尾部移除最久未使用的对象。- 在 SD 里，具体用的是 SDMemoryCache，基于 YYMemoryCache 的思想，维护了一个 **双向链表 + 哈希表** 结构。</code></pre><ol start="2"><li><strong>磁盘缓存</strong></li></ol><ul><li><p>旧版本用 NSKeyedArchiver 直接存二进制文件。</p></li><li><p>新版本用 sqlite + 文件混合存储：</p></li></ul><pre><code>- 小文件直接存 sqlite。- 大文件写到磁盘，sqlite 里保存路径索引。</code></pre><ul><li>有过期策略、容量控制（例如超过 1 周 / 超过 500MB 自动清理）。<br>（3）LRU 实现思路（简化版）<figure class="highlight objc hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// LRU 的核心：哈希表 + 双向链表</span></span><br><span class="line"><span class="hljs-keyword">class</span> LRUCache &#123;</span><br><span class="line">    <span class="hljs-built_in">NSMutableDictionary</span> *dict; <span class="hljs-comment">// key -&gt; node</span></span><br><span class="line">    Node *head, *tail;         <span class="hljs-comment">// 双向链表</span></span><br><span class="line"></span><br><span class="line">    - (<span class="hljs-keyword">id</span>)get:(<span class="hljs-built_in">NSString</span> *)key &#123;</span><br><span class="line">        Node *node = dict[key];</span><br><span class="line">        <span class="hljs-keyword">if</span> (node) &#123;</span><br><span class="line">            [<span class="hljs-keyword">self</span> moveToHead:node]; <span class="hljs-comment">// 最近使用过，移动到头部</span></span><br><span class="line">            <span class="hljs-keyword">return</span> node.value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    - (<span class="hljs-keyword">void</span>)put:(<span class="hljs-built_in">NSString</span> *)key value:(<span class="hljs-keyword">id</span>)value &#123;</span><br><span class="line">        Node *node = dict[key];</span><br><span class="line">        <span class="hljs-keyword">if</span> (node) &#123;</span><br><span class="line">            node.value = value;</span><br><span class="line">            [<span class="hljs-keyword">self</span> moveToHead:node];</span><br><span class="line">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">            node = [[Node alloc] initWithKey:key value:value];</span><br><span class="line">            dict[key] = node;</span><br><span class="line">            [<span class="hljs-keyword">self</span> addToHead:node];</span><br><span class="line">            <span class="hljs-keyword">if</span> (dict.count &gt; capacity) &#123;</span><br><span class="line">                Node *removed = [<span class="hljs-keyword">self</span> removeTail]; <span class="hljs-comment">// 淘汰最久没用的</span></span><br><span class="line">                [dict removeObjectForKey:removed.key];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>（4）UIImageView 与异步回调<br>UIImageView 是通过 AssociatedObject 绑定 URL 的，所以异步回调时 SDWebImage 能知道要给哪个 imageView 设置图。</p><p>11.OOM 怎么避免？</p><p>避免 OOM 的核心就是 减少单次内存峰值 + 控制整体内存占用 + 及时释放资源。实际项目中通常要针对业务做专项优化，比如：<br>    •    大图 -&gt; 缩放解码<br>    •    视频 -&gt; 硬解码，流式处理<br>    •    数据 -&gt; 分页加载，NSCache 管理<br>    •    缓存 -&gt; 收到内存警告立即清理</p><p>12.MVCS 与 SectionProvider 怎么实现的</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;米可世界&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="面试题" scheme="http://soso.wiki/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试" scheme="http://soso.wiki/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="米可世界" scheme="http://soso.wiki/tags/%E7%B1%B3%E5%8F%AF%E4%B8%96%E7%95%8C/"/>
    
  </entry>
  
  <entry>
    <title>京东金融</title>
    <link href="http://soso.wiki/2025-09-23-%E4%BA%AC%E4%B8%9C%E9%87%91%E8%9E%8D/"/>
    <id>http://soso.wiki/2025-09-23-京东金融/</id>
    <published>2025-09-23T09:00:00.000Z</published>
    <updated>2025-09-25T14:30:10.033Z</updated>
    
    <content type="html"><![CDATA[<p>京东金融<br><a id="more"></a></p><p>1.组件化，优缺点</p><p>2.SDK版本，A、B组件依赖 C，都改了 C 组件的版本，怎么保证功能可用性</p><p>3.主导的项目，SDK 体积优化，未使用的方法怎么避免误判</p><p>4.鸿蒙开发了哪些页面，列表 List 里的不同组件判断是用 Switch 吗？用过 LazyForEach 吗？JSON 转模型怎么转的？</p><p>5.有没有接触 VisionPro、机器学习、实况活动</p><p>6.规划</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;京东金融&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="面试题" scheme="http://soso.wiki/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试" scheme="http://soso.wiki/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="京东金融" scheme="http://soso.wiki/tags/%E4%BA%AC%E4%B8%9C%E9%87%91%E8%9E%8D/"/>
    
  </entry>
  
  <entry>
    <title>掌阅</title>
    <link href="http://soso.wiki/%E6%8E%8C%E9%98%85/"/>
    <id>http://soso.wiki/掌阅/</id>
    <published>2025-09-23T06:00:00.000Z</published>
    <updated>2025-09-25T14:24:51.805Z</updated>
    
    <content type="html"><![CDATA[<p>掌阅<br><a id="more"></a></p><p>一面：</p><p>1.组件化，这些方案的优缺点</p><p>2.怎么知道多次刷新的</p><p>3.解决过的线上问题，OOM，野指针，APM监控是怎么捕获，怎么上报的？</p><p>4.算法：查找两个视图的公共父视图。</p><p>二面：</p><p>1.挑选一个项目介绍自己负责的部分</p><p>2.组件化中页面是一一对应的吗？</p><p>3.AB 实验是怎么做的？</p><p>4.埋点设计：在VIP中心怎么统计到来源</p><p>5.推荐列表划了很多页后卡顿，你觉得是问题吗？有哪些优化手段</p><p>6.讲讲做过的业务</p><p>7.算法：把无序数组变成均匀的V字形数组</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;掌阅&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="面试题" scheme="http://soso.wiki/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试" scheme="http://soso.wiki/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="掌阅" scheme="http://soso.wiki/tags/%E6%8E%8C%E9%98%85/"/>
    
  </entry>
  
  <entry>
    <title>猫糖跳动</title>
    <link href="http://soso.wiki/%E7%8C%AB%E7%B3%96%E8%B7%B3%E5%8A%A8/"/>
    <id>http://soso.wiki/猫糖跳动/</id>
    <published>2025-09-18T09:00:00.000Z</published>
    <updated>2025-09-18T09:47:27.050Z</updated>
    
    <content type="html"><![CDATA[<p>猫糖跳动<br><a id="more"></a></p><p>1.Swift 的底层原理</p><p>2.Swift 的派发机制</p><p>3.Struct 中包含 Class 里的一个属性，会 copy 吗？</p><p>4.App 启动为什么需要 Rebase&amp;Bind</p><p>5.GCD 怎么取消任务</p><p>6.Hook 和反 Hook 的方法</p><p>7.弱网环境下上传大图</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;猫糖跳动&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="面试题" scheme="http://soso.wiki/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试" scheme="http://soso.wiki/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="猫糖跳动" scheme="http://soso.wiki/tags/%E7%8C%AB%E7%B3%96%E8%B7%B3%E5%8A%A8/"/>
    
  </entry>
  
  <entry>
    <title>首汽约车</title>
    <link href="http://soso.wiki/%E9%A6%96%E6%B1%BD%E7%BA%A6%E8%BD%A6/"/>
    <id>http://soso.wiki/首汽约车/</id>
    <published>2025-09-18T06:00:00.000Z</published>
    <updated>2025-09-18T09:46:40.464Z</updated>
    
    <content type="html"><![CDATA[<p>首汽约车<br><a id="more"></a></p><p>1.组件化</p><p>2.多线程，遇到哪些问题；一个页面8个请求，需要注意什么？数据读写安全</p><p>3.tableView 流畅性</p><p>4.用过 RAC、RxSwift 吗？</p><p>5.用地图多吗？</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首汽约车&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="面试题" scheme="http://soso.wiki/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试" scheme="http://soso.wiki/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="首汽约车" scheme="http://soso.wiki/tags/%E9%A6%96%E6%B1%BD%E7%BA%A6%E8%BD%A6/"/>
    
  </entry>
  
  <entry>
    <title>马上消费金融</title>
    <link href="http://soso.wiki/%E9%A9%AC%E4%B8%8A%E6%B6%88%E8%B4%B9%E9%87%91%E8%9E%8D/"/>
    <id>http://soso.wiki/马上消费金融/</id>
    <published>2025-09-16T09:00:00.000Z</published>
    <updated>2025-09-18T09:45:31.549Z</updated>
    
    <content type="html"><![CDATA[<p>马上消费金融<br><a id="more"></a></p><p>一面：</p><p>项目：</p><p>1.组件化，类似 CTMediator ？平级组件 A 和 B，Protocol 是写A里还是B里？怎么知道对外的API</p><p>2.路由硬编码？</p><p>3.SDK 体积优化，图片占大头吗？构建时长为什么那么长？</p><p>4.私有方法调用其实暴漏出来方法就能解决吧？</p><p>5.MVCS、MVC、MVVM 的共性和区别；SectionProvider 拆分 TableView，Cell 是在什么时候注册的？怎么自注册？在复用的时候判断是否有，用NSDictionary存，没有则创建。</p><p>6.鸿蒙开发是什么水平？</p><p>7.随版-&gt;非随怎么做的？</p><p>8.抽象手百能力，有点类似依赖注入？</p><p>9.接口精简字段怎么保证历史版本没问题？</p><p>10.活动页组件化是类似 DSL 吗？有下发样式吗？</p><p>11.H5 怎么提升访问速度？</p><p>12.H5、小程序双向通信方法做了啥？</p><p>13.接口层、JS 监控；遇到堆栈不清晰的怎么处理？</p><p>14.抽离公共组件需要注意什么？</p><p>基础知识：</p><p>1.URL 的组成，#的作用</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://user:pass@www.example.com:8080/path/page.html?id=10&amp;sort=asc#content</span><br></pre></td></tr></table></figure><ul><li><strong>协议</strong>：https</li><li><strong>用户信息</strong>：user:pass</li><li><strong>主机</strong>：<a href="http://www.example.com" target="_blank" rel="noopener">www.example.com</a></li><li><strong>端口</strong>：8080</li><li><strong>路径</strong>：/path/page.html</li><li><strong>查询参数</strong>：id=10&amp;sort=asc</li><li><strong>片段</strong>：content  用 # 引入，通常用于定位页面内部的位置（不会发送到服务器，只在浏览器端解析）</li></ul><p>2.AFN post 请求怎么修改 body 格式</p><p>3.autoreleasepool、Runloop什么时候释放</p><p>算法：括号匹配口述，如果栈提前为空，符合吗？</p><p>栈提前为空，通常意味着字符串里出现了多余的右括号</p><ul><li>在 “())” 里，前两个 () 匹配没问题，但当遇到第三个 ) 时，栈已经空了 → 没有对应的左括号 → <strong>不合法</strong>。</li><li>在 “)(“ 里，第一个就是右括号，栈一开始就空 → <strong>不合法</strong>。</li></ul><p>只有在整个遍历结束后，栈为空，才说明括号完全匹配。</p><p>二面：</p><p>项目</p><p>1.组件间通信</p><p>2.SDK构建时长为啥那么久？组件化应该怎么细分</p><p>3.加载速度优化，缓存的策略</p><p>4.活动页组件化应该是模块化吧</p><p>5.鸿蒙为什么iOS来开发，安卓更接近吧</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;马上消费金融&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="面试题" scheme="http://soso.wiki/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试" scheme="http://soso.wiki/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="马上消费金融" scheme="http://soso.wiki/tags/%E9%A9%AC%E4%B8%8A%E6%B6%88%E8%B4%B9%E9%87%91%E8%9E%8D/"/>
    
  </entry>
  
  <entry>
    <title>雷神网络</title>
    <link href="http://soso.wiki/%E9%9B%B7%E7%A5%9E%E7%BD%91%E7%BB%9C/"/>
    <id>http://soso.wiki/雷神网络/</id>
    <published>2025-09-15T11:00:00.000Z</published>
    <updated>2025-09-16T15:35:32.992Z</updated>
    
    <content type="html"><![CDATA[<p>雷神网络<br><a id="more"></a></p><p>1.Runtime 的流程，实际项目中使用</p><p>2.IM 高并发时怎么避免卡顿？卡顿与即时性，几千条消息</p><p>批量刷新，可以设置积累几条消息后刷新，或多长时间没有消息时刷新；</p><p>用户滑动时不刷新</p><p>3.设计 SDK 怎么考虑安全性，不容易崩溃、扩展性？</p><p>分层、写代码用安全方法、开闭原则、尽可能少的暴漏非必要的属性</p><p>4.鸿蒙和原生开发效率的比较</p><p>5.AI提效做了哪些</p><p>项目：</p><p>1.SDK 构建时长为什么那么长？</p><p>2.百度文库的架构，怎么集成的小程序？</p><p>3.百度小程序跨域怎么解决的？</p><p>4.小程序、H5 双向通信方法小程序提供有，你做的是？</p><p>5.稳定性，崩溃、卡顿检测</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;雷神网络&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="面试题" scheme="http://soso.wiki/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试" scheme="http://soso.wiki/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="雷神网络" scheme="http://soso.wiki/tags/%E9%9B%B7%E7%A5%9E%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>乐信圣文</title>
    <link href="http://soso.wiki/%E4%B9%90%E4%BF%A1%E5%9C%A3%E6%96%87/"/>
    <id>http://soso.wiki/乐信圣文/</id>
    <published>2025-09-15T09:00:00.000Z</published>
    <updated>2025-09-16T15:34:59.479Z</updated>
    
    <content type="html"><![CDATA[<p>乐信圣文<br><a id="more"></a></p><p>编程题：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在输入框中输入“10+2”，点击确定按钮，输出“10+2=12”  支持+-*/ 要求：考虑面向对象、扩展性，如又来了第五种运算%。40分钟</span><br></pre></td></tr></table></figure><p>基础：</p><p>1.@property weak 和 assign 的区别，assign 什么情况下修饰对象，unsafe_unretain 的作用</p><p>2.category 和 extension 的区别，多个 category 实现了同名方法，执行哪个？</p><p>3.通知是同步的还是异步的？</p><p>4.内存泄漏都有哪些场景，除了循环引用还有别的吗？</p><p>5.Runloop 和线程的关系，Mode 的作用，为什么这么设计？除了隔离还有什么作用？Runloop 什么时候停止？</p><p>项目：</p><p>1.构建提效</p><p>2.私有方法调用</p><p>3.MVCS 和 MVC 的区别</p><p>4.子孙组件传值</p><p>另一位面试官：</p><p>原生和跨端的占比</p><p>最近做的项目</p><h2 id="参考答案"><a href="#参考答案" class="headerlink" title="参考答案"></a>参考答案</h2><p>编程题：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在输入框中输入“10+2”，点击确定按钮，输出“10+2=12”  支持+-*/ 要求：考虑面向对象、扩展性，如又来了第五种运算%。40分钟</span><br></pre></td></tr></table></figure><p>使用策略模式和工厂模式</p><p>策略模式：将一系列算法或行为定义成一组可以相互替换的策略类，并让它们在同一个接口下独立实现，从而使得算法的选择可以在运行时决定。</p><p>（1）抽象策略  定义统一接口</p><p>（2）具体策略 实现某个特定的算法逻辑</p><p>（3）上下文 持有策略，并通过它来执行算法</p><ul><li><strong>策略模式</strong>：侧重于 <strong>同一个对象可以有不同的行为</strong>，运行时可切换。</li><li><p><strong>工厂模式</strong>：侧重于 <strong>对象如何被创建</strong>，屏蔽创建的复杂性。</p></li><li><p>运算的 <strong>加减乘除</strong> = <strong>不同的策略（策略模式）</strong></p></li><li>运算类由 <strong>工厂统一创建（工厂模式）</strong></li><li>所以我们用了 <strong>工厂 + 策略</strong> 的组合。</li></ul><figure class="highlight objc hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#import <span class="hljs-meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/// 运算协议</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">@protocol</span> <span class="hljs-title">OperatorProtocol</span> &lt;<span class="hljs-title">NSObject</span>&gt;</span></span><br><span class="line">- (<span class="hljs-keyword">double</span>)calculateWithLeft:(<span class="hljs-keyword">double</span>)left right:(<span class="hljs-keyword">double</span>)right;</span><br><span class="line"><span class="hljs-keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/// 加法</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">AddOperator</span> : <span class="hljs-title">NSObject</span> &lt;<span class="hljs-title">OperatorProtocol</span>&gt;</span></span><br><span class="line"><span class="hljs-keyword">@end</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">@implementation</span> <span class="hljs-title">AddOperator</span></span></span><br><span class="line">- (<span class="hljs-keyword">double</span>)calculateWithLeft:(<span class="hljs-keyword">double</span>)left right:(<span class="hljs-keyword">double</span>)right &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> left + right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/// 减法</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">SubOperator</span> : <span class="hljs-title">NSObject</span> &lt;<span class="hljs-title">OperatorProtocol</span>&gt;</span></span><br><span class="line"><span class="hljs-keyword">@end</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">@implementation</span> <span class="hljs-title">SubOperator</span></span></span><br><span class="line">- (<span class="hljs-keyword">double</span>)calculateWithLeft:(<span class="hljs-keyword">double</span>)left right:(<span class="hljs-keyword">double</span>)right &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> left - right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/// 乘法</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">MulOperator</span> : <span class="hljs-title">NSObject</span> &lt;<span class="hljs-title">OperatorProtocol</span>&gt;</span></span><br><span class="line"><span class="hljs-keyword">@end</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">@implementation</span> <span class="hljs-title">MulOperator</span></span></span><br><span class="line">- (<span class="hljs-keyword">double</span>)calculateWithLeft:(<span class="hljs-keyword">double</span>)left right:(<span class="hljs-keyword">double</span>)right &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> left * right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/// 除法</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">DivOperator</span> : <span class="hljs-title">NSObject</span> &lt;<span class="hljs-title">OperatorProtocol</span>&gt;</span></span><br><span class="line"><span class="hljs-keyword">@end</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">@implementation</span> <span class="hljs-title">DivOperator</span></span></span><br><span class="line">- (<span class="hljs-keyword">double</span>)calculateWithLeft:(<span class="hljs-keyword">double</span>)left right:(<span class="hljs-keyword">double</span>)right &#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (right == <span class="hljs-number">0</span>) &#123;</span><br><span class="line">        <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@"除数不能为0"</span>);</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> left / right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/// 取模</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">ModOperator</span> : <span class="hljs-title">NSObject</span> &lt;<span class="hljs-title">OperatorProtocol</span>&gt;</span></span><br><span class="line"><span class="hljs-keyword">@end</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">@implementation</span> <span class="hljs-title">ModOperator</span></span></span><br><span class="line">- (<span class="hljs-keyword">double</span>)calculateWithLeft:(<span class="hljs-keyword">double</span>)left right:(<span class="hljs-keyword">double</span>)right &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> fmod(left, right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/// 工厂类</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">OperatorFactory</span> : <span class="hljs-title">NSObject</span></span></span><br><span class="line">+ (<span class="hljs-keyword">id</span>&lt;OperatorProtocol&gt;)operatorForSymbol:(<span class="hljs-built_in">NSString</span> *)symbol;</span><br><span class="line"><span class="hljs-keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">@implementation</span> <span class="hljs-title">OperatorFactory</span></span></span><br><span class="line">+ (<span class="hljs-keyword">id</span>&lt;OperatorProtocol&gt;)operatorForSymbol:(<span class="hljs-built_in">NSString</span> *)symbol &#123;</span><br><span class="line">    <span class="hljs-keyword">static</span> <span class="hljs-built_in">NSDictionary</span> *map;</span><br><span class="line">    <span class="hljs-keyword">static</span> <span class="hljs-built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">    <span class="hljs-built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">        map = @&#123;</span><br><span class="line">            <span class="hljs-string">@"+"</span>: [AddOperator new],</span><br><span class="line">            <span class="hljs-string">@"-"</span>: [SubOperator new],</span><br><span class="line">            <span class="hljs-string">@"*"</span>: [MulOperator new],</span><br><span class="line">            <span class="hljs-string">@"/"</span>: [DivOperator new],</span><br><span class="line">            <span class="hljs-string">@"%"</span>: [ModOperator new]</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="hljs-keyword">return</span> map[symbol];</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/// 主控制器逻辑</span></span><br><span class="line"><span class="hljs-keyword">int</span> main(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * argv[]) &#123;</span><br><span class="line">    <span class="hljs-keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        <span class="hljs-comment">// 假设输入框的字符串</span></span><br><span class="line">        <span class="hljs-built_in">NSString</span> *input = <span class="hljs-string">@"10+2"</span>; </span><br><span class="line">        </span><br><span class="line">        <span class="hljs-comment">// 简单解析：找到第一个运算符位置</span></span><br><span class="line">        <span class="hljs-built_in">NSCharacterSet</span> *operators = [<span class="hljs-built_in">NSCharacterSet</span> characterSetWithCharactersInString:<span class="hljs-string">@"+-*/%"</span>];</span><br><span class="line">        <span class="hljs-built_in">NSRange</span> range = [input rangeOfCharacterFromSet:operators];</span><br><span class="line">        </span><br><span class="line">        <span class="hljs-keyword">if</span> (range.location != <span class="hljs-built_in">NSNotFound</span>) &#123;</span><br><span class="line">            <span class="hljs-built_in">NSString</span> *leftStr = [input substringToIndex:range.location];</span><br><span class="line">            <span class="hljs-built_in">NSString</span> *rightStr = [input substringFromIndex:range.location + <span class="hljs-number">1</span>];</span><br><span class="line">            <span class="hljs-built_in">NSString</span> *symbol = [input substringWithRange:range];</span><br><span class="line">            </span><br><span class="line">            <span class="hljs-keyword">double</span> left = [leftStr doubleValue];</span><br><span class="line">            <span class="hljs-keyword">double</span> right = [rightStr doubleValue];</span><br><span class="line">            </span><br><span class="line">            <span class="hljs-keyword">id</span>&lt;OperatorProtocol&gt; op = [OperatorFactory operatorForSymbol:symbol];</span><br><span class="line">            <span class="hljs-keyword">if</span> (op) &#123;</span><br><span class="line">                <span class="hljs-keyword">double</span> result = [op calculateWithLeft:left right:right];</span><br><span class="line">                <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@"%@=%g"</span>, input, result);</span><br><span class="line">            &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@"不支持的运算符: %@"</span>, symbol);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基础：</p><p>1.@property weak 和 assign 的区别，assign 什么情况下修饰对象，unsafe_unretain 的作用</p><p>2.category 和 extension 的区别，多个 category 实现了同名方法，执行哪个？</p><p>3.通知是同步的还是异步的</p><p>同步的</p><p>4.内存泄漏都有哪些场景，除了循环引用还有别的吗？</p><p>循环引用：block、NSTimer、delegate</p><p>非循环引用：非 OC 对象，如 CGImage 等需要手动调用 Release</p><p>5.Runloop 和线程的关系，Mode的作用，为什么这么设计？除了隔离还有什么作用？Runloop 什么时候停止</p><ul><li>主线程的 RunLoop：几乎不停止，除非 App 结束。</li><li>子线程的 RunLoop：<ul><li>没有事件源就退出；</li><li>或者你显式 CFRunLoopStop()；</li><li>或者超时返回；</li><li>或者线程销毁。</li></ul></li></ul><p>项目：</p><p>1.构建提效，类数量 删除2200+头文件，删除未使用的类100+</p><p>2.私有方法调用</p><p>3.MVCS 和 MVC 的区别</p><p>4.子孙组件传值</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;乐信圣文&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="面试题" scheme="http://soso.wiki/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试" scheme="http://soso.wiki/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="乐信圣文" scheme="http://soso.wiki/tags/%E4%B9%90%E4%BF%A1%E5%9C%A3%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>转转</title>
    <link href="http://soso.wiki/2024-09-03-%E8%BD%AC%E8%BD%AC/"/>
    <id>http://soso.wiki/2024-09-03-转转/</id>
    <published>2024-09-03T07:00:00.000Z</published>
    <updated>2025-04-09T12:25:55.933Z</updated>
    
    <content type="html"><![CDATA[<p>转转<br><a id="more"></a></p><p>一面：</p><p>1.活动页组件化，JSON 结构，跳转区分 Scheme 和 HTTP 是谁来处理的？</p><p>2.加载速度优化</p><p>3.检测无用代码是检测的 mach-o 的无用类还是方法？</p><p>4.多个请求完成后通知除了 GCD 还有什么方法？</p><p>5.webView 和原生的交互，设计一个监听原生页面声明周期，通知 H5，（有些需要监听，有些不需要监听）</p><p>6.webView 加载速度优化，项目里用到的</p><p>7.组件化怎么划分的模块，分层</p><p>8.内存管理，项目里常见的循环引用，为什么用 NSProxy，和 NSObject 区别</p><p>二面：</p><p>1.介绍项目亮点</p><p>2.设计原生与 Flutter/H5 交互  上中下三层</p><p>3.iOS 和 H5 交互方法，优缺点</p><p>4.具体规划，目前待遇，offer，期望薪资</p><h1 id="参考答案"><a href="#参考答案" class="headerlink" title="参考答案"></a>参考答案</h1><p>一面：</p><p>1.活动页组件化，JSON 结构，跳转区分 Scheme 和 HTTP 是谁来处理的？</p><p>2.加载速度优化</p><p>3.检测无用代码是检测的 mach-o 的无用类还是方法？</p><p>4.多个请求完成后通知除了 GCD 还有什么方法？</p><p>5.webView 和原生的交互，设计一个监听原生页面声明周期，通知 H5，（有些需要监听，有些不需要监听）</p><p>6.webView 加载速度优化，项目里用到的</p><p>7.组件化怎么划分的模块，分层</p><p>（1）Accessories App附属品</p><p>Watch、Extension、Widget</p><p>（2）Business 业务组件</p><p>文库、网盘、性能监控、付费咨询、Feed、搜索等</p><p>（3）Interface 接口层</p><p>（4）Underlays 服务组件</p><p>搜索工具、Feed通用业务，天气通用数据组件等</p><p>（5）Services 服务组件</p><p>IM、Talos、Performance、UBC、AFX等</p><p>（6）Basics 基础组件</p><p>BDPDevice、Cocoa（BBAFoundation、BBAUIKit、BDPWindow、BDPAppearance、AFX）、Network</p><p>（7）Vendors 三方库</p><p>AFNetworking、SDWebImage、YYModel等</p><p>8.内存管理，项目里常见的循环引用，为什么用 NSProxy，和 NSObject 区别</p><ul><li><code>NSProxy</code> 主要用于代理和消息转发，它提供了一个机制来实现不直接处理方法调用的对象。</li><li><code>NSObject</code> 是所有 Objective-C 对象的基础类，提供了对象管理和通用功能的实现。</li></ul><p>通常情况下，如果你需要实现一种代理模式或远程调用，<code>NSProxy</code> 是合适的选择。如果你在创建一个普通的对象，<code>NSObject</code> 是你通常会继承的类。</p><p>二面：</p><p>1.介绍项目亮点</p><p>2.设计原生与 Flutter/H5 交互  上中下三层</p><p>3.iOS 和 H5 交互方法，优缺点</p><p>4.具体规划，目前待遇，offer，期望薪资</p><h2 id="📘-iOS-面试通关手册（组件化-H5-性能-架构）"><a href="#📘-iOS-面试通关手册（组件化-H5-性能-架构）" class="headerlink" title="📘 iOS 面试通关手册（组件化 / H5 / 性能 / 架构）"></a>📘 iOS 面试通关手册（组件化 / H5 / 性能 / 架构）</h2><hr><h3 id="🧩-一面核心题目详解"><a href="#🧩-一面核心题目详解" class="headerlink" title="🧩 一面核心题目详解"></a>🧩 一面核心题目详解</h3><h4 id="1-活动页组件化，JSON-结构，跳转区分-Scheme-和-HTTP-是谁来处理的？"><a href="#1-活动页组件化，JSON-结构，跳转区分-Scheme-和-HTTP-是谁来处理的？" class="headerlink" title="1. 活动页组件化，JSON 结构，跳转区分 Scheme 和 HTTP 是谁来处理的？"></a>1. 活动页组件化，JSON 结构，跳转区分 Scheme 和 HTTP 是谁来处理的？</h4><p><strong>答案要点：</strong></p><ul><li>JSON 描述跳转目标（如 URL、pageId、params）</li><li><p><code>RouterManager</code>/<code>Navigator</code> 统一解析 URL，决定打开方式：</p><figure class="highlight objc hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">if</span> ([url.scheme isEqualToString:<span class="hljs-string">@"http"</span>] || [url.scheme isEqualToString:<span class="hljs-string">@"https"</span>]) &#123;</span><br><span class="line">    <span class="hljs-comment">// 打开 WebView</span></span><br><span class="line">&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ([url.scheme isEqualToString:<span class="hljs-string">@"app"</span>]) &#123;</span><br><span class="line">    <span class="hljs-comment">// 原生跳转</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>分离跳转逻辑与页面结构，便于动态配置与热更新。</p></li></ul><hr><h4 id="2-加载速度优化"><a href="#2-加载速度优化" class="headerlink" title="2. 加载速度优化"></a>2. 加载速度优化</h4><p><strong>优化方式：</strong></p><ul><li>首屏优化：异步加载、骨架屏占位、按需加载</li><li>图片优化：压缩、缓存（SDWebImage）、懒加载</li><li>数据优化：合并请求、接口聚合、GZIP 压缩</li><li>离线缓存：预加载 HTML、JS Bundle、资源包</li><li>网络优化：HTTP2、多路复用、CDN 配置</li></ul><hr><h4 id="3-检测无用代码是检测-Mach-O-的类还是方法？"><a href="#3-检测无用代码是检测-Mach-O-的类还是方法？" class="headerlink" title="3. 检测无用代码是检测 Mach-O 的类还是方法？"></a>3. 检测无用代码是检测 Mach-O 的类还是方法？</h4><p><strong>答法：</strong></p><ul><li>都可以，通过静态分析：<ul><li><code>LinkMap</code> 文件分析未被引用的符号</li><li><code>Clang 插桩</code>、<code>Swift Demangle</code> 查看未调用的方法</li></ul></li><li>Mach-O 是最终产物，反映“未被链接进二进制”的部分</li></ul><hr><h4 id="4-多请求完成通知除了-GCD，还有什么？"><a href="#4-多请求完成通知除了-GCD，还有什么？" class="headerlink" title="4. 多请求完成通知除了 GCD，还有什么？"></a>4. 多请求完成通知除了 GCD，还有什么？</h4><p><strong>方案：</strong></p><ul><li><code>NSOperationQueue + addDependency</code></li><li>Promise/Future：PromiseKit、Combine、RxSwift</li><li>KVO 监听属性变化，触发 UI 更新</li><li>Dispatch Semaphore：手动控制信号</li></ul><hr><h4 id="5-WebView-与原生交互，监听页面生命周期通知-H5"><a href="#5-WebView-与原生交互，监听页面生命周期通知-H5" class="headerlink" title="5. WebView 与原生交互，监听页面生命周期通知 H5"></a>5. WebView 与原生交互，监听页面生命周期通知 H5</h4><p><strong>设计：</strong></p><ul><li><p>原生页面生命周期调用 JS 通知：</p><figure class="highlight objc hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[webView evaluateJavaScript:<span class="hljs-string">@"window.onNativeLifeCycle('viewDidAppear')"</span>]</span><br></pre></td></tr></table></figure></li><li><p>JS 注册：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">window</span>.onNativeLifeCycle = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">state</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">if</span> (state === <span class="hljs-string">'viewDidAppear'</span>) &#123; <span class="hljs-comment">/* 处理 */</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>可配置控制哪些生命周期需要同步（如通过 JSBridge 参数指定）</p></li></ul><hr><h4 id="6-WebView-加载速度优化（项目中用到的）"><a href="#6-WebView-加载速度优化（项目中用到的）" class="headerlink" title="6. WebView 加载速度优化（项目中用到的）"></a>6. WebView 加载速度优化（项目中用到的）</h4><p><strong>方法：</strong></p><ul><li>离线资源包（JS/CSS/HTML）打包在本地</li><li>WKWebView 复用池（WebViewPool）减少初始化开销</li><li>设置 cachePolicy，合理使用缓存</li><li>禁用插件（如 JS 插件、自动检测）提高启动速度</li></ul><hr><h4 id="7-组件化怎么划分模块-分层？"><a href="#7-组件化怎么划分模块-分层？" class="headerlink" title="7. 组件化怎么划分模块 / 分层？"></a>7. 组件化怎么划分模块 / 分层？</h4><p><strong>推荐结构：</strong></p><ul><li>Base 层：网络、工具类、日志、配置</li><li>UI 层：通用 UI 组件（按钮、卡片、弹窗）</li><li>Biz 层：独立业务模块（登录、支付、商城）</li><li>Service 层：统一服务（埋点、权限、推送）</li><li>Protocol 层：各模块之间解耦协议</li></ul><p><strong>关键词：</strong> 解耦、高内聚、低耦合、模块隔离、可热更新</p><hr><h4 id="8-内存管理：循环引用、NSProxy-与-NSObject-区别"><a href="#8-内存管理：循环引用、NSProxy-与-NSObject-区别" class="headerlink" title="8. 内存管理：循环引用、NSProxy 与 NSObject 区别"></a>8. 内存管理：循环引用、NSProxy 与 NSObject 区别</h4><p><strong>常见循环引用：</strong></p><ul><li>Timer 持有控制器</li><li>Block 捕获 self</li><li>delegate 强引用</li></ul><p><strong>NSProxy 使用：</strong></p><ul><li>中转代理（如 NSTimer）：<figure class="highlight objc hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">NSTimer</span> *timer = [<span class="hljs-built_in">NSTimer</span> scheduledTimerWithTimeInterval:<span class="hljs-number">1</span> target:[WeakProxy proxyWithTarget:<span class="hljs-keyword">self</span>] selector:<span class="hljs-keyword">@selector</span>(run) userInfo:<span class="hljs-literal">nil</span> repeats:<span class="hljs-literal">YES</span>];</span><br></pre></td></tr></table></figure></li></ul><p><strong>与 NSObject 区别：</strong></p><ul><li>NSProxy 是消息转发专用，不继承 NSObject，无默认行为</li><li>NSObject 有默认的内存管理 / KVO / 响应链</li></ul><hr><h3 id="🚀-二面核心题目详解"><a href="#🚀-二面核心题目详解" class="headerlink" title="🚀 二面核心题目详解"></a>🚀 二面核心题目详解</h3><h4 id="1-项目亮点介绍"><a href="#1-项目亮点介绍" class="headerlink" title="1. 项目亮点介绍"></a>1. 项目亮点介绍</h4><p><strong>答题建议：</strong></p><ul><li>选一个“有挑战/成果”的模块深入讲：<ul><li>比如：活动页组件化、加载优化、自研 Bridge 桥接方案</li><li>体现技术落地、团队协作、提效效果</li></ul></li></ul><hr><h4 id="2-原生与-Flutter-H5-交互设计（上下三层）"><a href="#2-原生与-Flutter-H5-交互设计（上下三层）" class="headerlink" title="2. 原生与 Flutter/H5 交互设计（上下三层）"></a>2. 原生与 Flutter/H5 交互设计（上下三层）</h4><p><strong>三层架构：</strong></p><ul><li>上层：业务 API（login、pay、share）</li><li>中层：Bridge 协议定义、参数统一封装（JSON）</li><li>底层：Native 实现，JS 调用处理、回调、权限判断等</li></ul><hr><h4 id="3-iOS-与-H5-交互方法及优缺点"><a href="#3-iOS-与-H5-交互方法及优缺点" class="headerlink" title="3. iOS 与 H5 交互方法及优缺点"></a>3. iOS 与 H5 交互方法及优缺点</h4><table><thead><tr><th>方法</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td><code>evaluateJavaScript</code></td><td>简单直接</td><td>无回调、不安全</td></tr><tr><td><code>WKScriptMessageHandler</code></td><td>安全规范、结构清晰</td><td>配置繁琐，不适合高频交互</td></tr><tr><td>URL Scheme 拦截</td><td>通用性强</td><td>参数受限、安全差</td></tr></tbody></table><hr><h4 id="4-当前待遇-amp-期望薪资"><a href="#4-当前待遇-amp-期望薪资" class="headerlink" title="4. 当前待遇 &amp; 期望薪资"></a>4. 当前待遇 &amp; 期望薪资</h4><p><strong>建议答法：</strong></p><ul><li>当前总包/薪资范围</li><li>期望平台成长 + 技术深度 +回报匹配</li><li>可接受一定灵活性，但看重发展潜力</li></ul><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转转&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="面试题" scheme="http://soso.wiki/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试" scheme="http://soso.wiki/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="转转" scheme="http://soso.wiki/tags/%E8%BD%AC%E8%BD%AC/"/>
    
  </entry>
  
  <entry>
    <title>京东</title>
    <link href="http://soso.wiki/2024-08-29-%E4%BA%AC%E4%B8%9C/"/>
    <id>http://soso.wiki/2024-08-29-京东/</id>
    <published>2024-08-29T09:30:00.000Z</published>
    <updated>2024-09-11T07:53:08.376Z</updated>
    
    <content type="html"><![CDATA[<p>京东<br><a id="more"></a></p><p>一面：</p><p>1.SDK 体积优化</p><p>2.组件化</p><p>3.端到端监控，具体实现</p><p>4.YYModel 的实现原理，和 MJExtension 区别，为什么比 MJExtension 快？</p><p>5.OOM 怎么排查</p><p>6.Facebook 出的异步渲染框架 AsyncDisplayKit 原理</p><p>7.样式字段很多，怎么和逻辑字段分开下发？</p><p>8.跨端方案，Talos lite</p><p>9.怎么提升代码质量</p><p>10.设计模式：策略模式、中介者模式</p><p>11.打点 cell 50%展现时打点</p><p>打点规范，怎么快速找到某一个页面的所有点击点位</p><p>12.产品上的业务指标</p><p>13.读写安全，除了加锁还有哪些方法</p><p>14.算法：实现一个列表，复用，不卡顿，cell 上是多个文本</p><p>二面：</p><p>1.Flutter 与 iOS 交互方法？</p><p>2.Flutter 的 UI 层在哪儿？RN 是原生控件</p><p>3.组件化的 Router 里的映射表什么时候生成？</p><p>4.JSBridge 原理，前端 JS 有哪些异步方法？前端有哪些存储方法，localstorage有大小限制吗？</p><p>5.iOS 打包流程，命令  Xcode build；Cocoapods 打包出来的第三方库是什么形式的？源码还是二进制？.a和.framework 有什么区别？</p><p>6.接口监控</p><p>7.为什么用到动态库，动态库类型是什么 so？</p><p>8.加载速度优化</p><p>9.SDK 体积优化</p><p>10.RN 的原理，怎么转成了原生控件？了解哪些动态化的方案？Weex、小程序等的区别</p><p>11.了解哪些性能优化，滑动流畅性的指标</p><p>12.深拷贝和浅拷贝的区别</p><p>13.App 启动流程，优化手段，main函数有哪些优化地方</p><p>14.发一个 Post 请求，怎么加快速度？Get 和 Post 请求区别，Get 可以将参数放在请求体吗？</p><p>15.触摸屏幕流程</p><p>16.Swift 中 Class 和 Struct 区别，Struct 可以继承吗？</p><p>17.堆和栈的区别</p><p>18.内存 isa</p><p>19.绘制流程</p><p>20.加载速度优化，各个阶段耗时有统计吗？网络的耗时在哪块儿？</p><p>21.IM 的架构</p><p>22.IM 怎么保证消息的顺序</p><h2 id="参考答案"><a href="#参考答案" class="headerlink" title="参考答案"></a>参考答案</h2><p>一面：</p><p>1.SDK体积优化</p><p>2.组件化</p><p>3.端到端监控，具体实现</p><p>4.OOM怎么排查</p><p>5.样式字段很多，怎么和逻辑字段分开下发？</p><p>6.跨端方案，Talos lite</p><p>7.怎么提升代码质量</p><p>8.设计模式：策略模式、中介者模式</p><p>常见的23种设计模式包括：</p><ol><li><strong>创建型模式</strong>：<ul><li>单例模式 (Singleton)</li><li>工厂方法模式 (Factory Method)</li><li>抽象工厂模式 (Abstract Factory)</li><li>建造者模式 (Builder)</li><li>原型模式 (Prototype)</li></ul></li><li><strong>结构型模式</strong>：<ul><li>适配器模式 (Adapter)</li><li>桥接模式 (Bridge)</li><li>组合模式 (Composite)</li><li>装饰器模式 (Decorator)</li><li>外观模式 (Facade)</li><li>享元模式 (Flyweight)</li><li>代理模式 (Proxy)</li></ul></li><li><strong>行为型模式</strong>：<ul><li>责任链模式 (Chain of Responsibility)</li><li>命令模式 (Command)</li><li>解释器模式 (Interpreter)</li><li>迭代器模式 (Iterator)</li><li>中介者模式 (Mediator)</li><li>存储器模式 (Memento)</li><li>观察者模式 (Observer)</li><li>状态模式 (State)</li><li>策略模式 (Strategy)</li><li>模板方法模式 (Template Method)</li><li>访问者模式 (Visitor)</li></ul></li></ol><h4 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a><a href="https://www.runoob.com/design-pattern/mediator-pattern.html" target="_blank" rel="noopener">中介者模式</a></h4><p>中介者模式（Mediator Pattern）是用来降低多个对象和类之间的通信复杂性，属于行为型模式。</p><p>中介者模式定义了一个中介对象来封装一系列对象之间的交互。中介者使各对象之间不需要显式地相互引用，从而使其耦合松散，且可以独立地改变它们之间的交互。</p><h4 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a><a href="https://www.runoob.com/design-pattern/strategy-pattern.html" target="_blank" rel="noopener">策略模式</a></h4><p>在策略模式（Strategy Pattern）中一个类的行为或其算法可以在运行时更改。这种类型的设计模式属于行为型模式。</p><p>在策略模式定义了一系列算法或策略，并将每个算法封装在独立的类中，使得它们可以互相替换。通过使用策略模式，可以在运行时根据需要选择不同的算法，而不需要修改客户端代码。</p><p>在策略模式中，我们创建表示各种策略的对象和一个行为随着策略对象改变而改变的 context 对象。策略对象改变 context 对象的执行算法。</p><p>9.打点 cell 50%展现时打点</p><p>可以使用<code>UITableView</code>的<code>scrollViewDidScroll</code>方法来检测<code>cell</code>的可见区域。具体步骤如下：</p><ol><li><strong>设置UITableViewDelegate</strong>: 确保你的视图控制器实现了<code>UITableViewDelegate</code>协议，并设置<code>delegate</code>。</li><li><strong>计算可见区域</strong>: 在<code>scrollViewDidScroll</code>方法中，计算每个<code>cell</code>的可见区域，并检查它是否至少展现了50%。</li><li><strong>打点逻辑</strong>: 根据计算结果进行打点操作，例如记录数据或发送网络请求。</li></ol><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight objc hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#import <span class="hljs-meta-string">"ViewController.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">ViewController</span> () &lt;<span class="hljs-title">UITableViewDelegate</span>, <span class="hljs-title">UITableViewDataSource</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">weak</span>, <span class="hljs-keyword">nonatomic</span>) <span class="hljs-keyword">IBOutlet</span> <span class="hljs-built_in">UITableView</span> *tableView;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">@implementation</span> <span class="hljs-title">ViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="hljs-keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="hljs-keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="hljs-keyword">self</span>.tableView.delegate = <span class="hljs-keyword">self</span>;</span><br><span class="line">    <span class="hljs-keyword">self</span>.tableView.dataSource = <span class="hljs-keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#pragma mark - UITableViewDataSource</span></span><br><span class="line"></span><br><span class="line">- (<span class="hljs-built_in">NSInteger</span>)tableView:(<span class="hljs-built_in">UITableView</span> *)tableView numberOfRowsInSection:(<span class="hljs-built_in">NSInteger</span>)section &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">100</span>; <span class="hljs-comment">// 示例行数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="hljs-built_in">UITableViewCell</span> *)tableView:(<span class="hljs-built_in">UITableView</span> *)tableView cellForRowAtIndexPath:(<span class="hljs-built_in">NSIndexPath</span> *)indexPath &#123;</span><br><span class="line">    <span class="hljs-built_in">UITableViewCell</span> *cell = [tableView dequeueReusableCellWithIdentifier:<span class="hljs-string">@"cell"</span> forIndexPath:indexPath];</span><br><span class="line">    cell.textLabel.text = [<span class="hljs-built_in">NSString</span> stringWithFormat:<span class="hljs-string">@"Row %ld"</span>, (<span class="hljs-keyword">long</span>)indexPath.row];</span><br><span class="line">    <span class="hljs-keyword">return</span> cell;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#pragma mark - UIScrollViewDelegate</span></span><br><span class="line"></span><br><span class="line">- (<span class="hljs-keyword">void</span>)scrollViewDidScroll:(<span class="hljs-built_in">UIScrollView</span> *)scrollView &#123;</span><br><span class="line">    <span class="hljs-built_in">NSArray</span>&lt;<span class="hljs-built_in">UITableViewCell</span> *&gt; *visibleCells = [<span class="hljs-keyword">self</span>.tableView visibleCells];</span><br><span class="line">    <span class="hljs-built_in">CGRect</span> visibleRect;</span><br><span class="line">    visibleRect.origin = <span class="hljs-keyword">self</span>.tableView.contentOffset;</span><br><span class="line">    visibleRect.size = <span class="hljs-keyword">self</span>.tableView.bounds.size;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">UITableViewCell</span> *cell <span class="hljs-keyword">in</span> visibleCells) &#123;</span><br><span class="line">        <span class="hljs-built_in">CGRect</span> cellRect = [<span class="hljs-keyword">self</span>.tableView convertRect:cell.frame toView:<span class="hljs-keyword">self</span>.tableView.superview];</span><br><span class="line">        <span class="hljs-built_in">CGRect</span> intersection = <span class="hljs-built_in">CGRectIntersection</span>(visibleRect, cellRect);</span><br><span class="line">        <span class="hljs-built_in">CGFloat</span> intersectionRatio = intersection.size.height / cellRect.size.height;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> (intersectionRatio &gt;= <span class="hljs-number">0.5</span>) &#123;</span><br><span class="line">            <span class="hljs-built_in">NSIndexPath</span> *indexPath = [<span class="hljs-keyword">self</span>.tableView indexPathForCell:cell];</span><br><span class="line">            <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@"Cell at %ld is at least 50%% visible."</span>, (<span class="hljs-keyword">long</span>)indexPath.row);</span><br><span class="line">            <span class="hljs-comment">// 打点逻辑，例如记录或发送请求</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">@end</span></span><br></pre></td></tr></table></figure><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ul><li><strong>计算可见区域</strong>：使用<code>convertRect:toView:</code>方法将<code>cell</code>的frame转换到<code>superview</code>的坐标系，然后计算交集区域。</li><li><strong>检查比例</strong>：判断交集区域的高度与<code>cell</code>的总高度的比例是否大于或等于50%。</li></ul><p>这个实现将确保在<code>UITableView</code>滚动时，对每个<code>cell</code>进行检查，并在其至少展现50%时执行打点操作。</p><p>打点规范，怎么快速找到某一个页面的所有点击点位</p><p>10.产品上的业务指标</p><p>11.读写安全，除了加锁还有哪些方法</p><p>12.算法：实现一个列表，复用，不卡顿，cell上是多个文本</p><p>二面：</p><p>1.Flutter 与 iOS 交互方法？</p><p>2.Flutter 的 UI 层在哪儿？RN 是原生控件</p><p>3.组件化的 Router 里的映射表什么时候生成？</p><p>4.JSBridge 原理</p><p>5.iOS 打包流程，命令  Xcode build；Cocoapods 打包出来的第三方库是什么形式的？源码还是二进制？.a和.framework 有什么区别？</p><p>CocoaPods 打包出来的第三方库可以是源码形式，也可以是二进制形式，取决于库的发布方式。</p><ol><li><strong>源码形式</strong>：大多数CocoaPods库以源码形式提供。这意味着CocoaPods会将库的源代码下载到你的项目中，并在构建时编译这些代码。</li><li><strong>二进制形式</strong>：一些库提供二进制预编译版本，以减少编译时间和提高构建速度。在这种情况下，CocoaPods会下载预编译的二进制文件，而不是源码。</li></ol><p>你可以在<code>Podspec</code>文件中检查库的具体形式，通常在<code>source</code>字段中定义了库的来源。如果是二进制库，<code>Podspec</code>会指定二进制文件的URL和相关配置。</p><p><code>.a</code>和<code>.framework</code>是iOS开发中常见的两种二进制文件格式，分别代表静态库和动态库。它们的主要区别如下：</p><ol><li><strong><code>.a</code>（静态库）</strong>：<ul><li><strong>打包形式</strong>：静态库是一个归档文件，包含了多个编译好的目标文件（<code>.o</code>文件）。</li><li><strong>链接方式</strong>：在编译时，静态库的代码会被直接链接到应用程序中。每次构建时，库的代码会被复制到最终的可执行文件中。</li><li><strong>更新</strong>：如果静态库的代码有更新，必须重新编译整个应用程序。</li><li><strong>体积</strong>：由于代码被复制到应用程序中，最终的应用包可能会较大。</li></ul></li><li><strong><code>.framework</code>（动态库）</strong>：<ul><li><strong>打包形式</strong>：动态库是一个文件夹（包），包含库的二进制文件以及相关的资源文件（如头文件和配置文件）。它可以包含多个版本和资源。</li><li><strong>链接方式</strong>：动态库在运行时被加载到内存中。应用程序在运行时与库链接，而不是在编译时。这样，多个应用程序可以共享同一个动态库。</li><li><strong>更新</strong>：更新动态库只需替换库文件，不需要重新编译依赖于该库的应用程序。</li><li><strong>体积</strong>：动态库的使用可以减少最终应用程序的体积，因为库的代码和资源在运行时被共享和加载。</li></ul></li></ol><p>简而言之，<code>.a</code>是静态库，编译时直接包含在应用中；<code>.framework</code>是动态库，在运行时动态加载和共享。</p><p>6.接口监控</p><p>7.为什么用到动态库，动态库类型是什么 so？</p><p>8.加载速度优化</p><p>9.SDK 体积优化</p><p>10.RN 的原理，怎么转成了原生控件？了解哪些动态化的方案？Weex、小程序等的区别</p><p>11.了解哪些性能优化，滑动流畅性的指标</p><p>12.深拷贝和浅拷贝的区别</p><p>13.App 启动流程，优化手段，main函数有哪些优化地方</p><p>14.发一个 Post 请求，怎么加快速度？Get 和 Post 请求区别，Get 可以将参数放在请求体吗？</p><p>15.触摸屏幕流程</p><p>16.Swift 中 Class 和 Struct 区别，Struct 可以继承吗？</p><p>17.堆和栈的区别</p><p>18.内存 isa</p><p>19.绘制流程</p><p>20.加载速度优化，各个阶段耗时有统计吗？网络的耗时在哪块儿？</p><p>21.IM 的架构</p><p>22.IM 怎么保证消息的顺序</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;京东&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="面试题" scheme="http://soso.wiki/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试" scheme="http://soso.wiki/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="京东" scheme="http://soso.wiki/tags/%E4%BA%AC%E4%B8%9C/"/>
    
      <category term="京东搜索" scheme="http://soso.wiki/tags/%E4%BA%AC%E4%B8%9C%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>天眼查</title>
    <link href="http://soso.wiki/2024-08-29-%E5%A4%A9%E7%9C%BC%E6%9F%A5/"/>
    <id>http://soso.wiki/2024-08-29-天眼查/</id>
    <published>2024-08-29T03:00:00.000Z</published>
    <updated>2024-08-29T09:14:55.744Z</updated>
    
    <content type="html"><![CDATA[<p>天眼查<br><a id="more"></a></p><p>1.通用化技术提升迭代效率</p><p>2.降低三方 App 接入成本</p><p>3.SDK 体积优化，为什么用 Masonry 会增加体积</p><p>4.加载速度优化，怎么统计的？多个请求并发怎么处理的？</p><p>5.引用计数，isa 里都有什么？weak 的实现？对象的释放流程</p><p>6.方法交换交换的是什么？</p><p>7.SDWebImage加载url的流程，三级缓存，清除缓存</p><p>7.block 的变量捕获，为什么用<code>__block</code>可以修改局部变量的值</p><p>8.找出代码里有问题的地方，可变数组用 copy 修饰，调用添加元素方法会发生什么？能不能上报、拦截闪退？线程不安全怎么处理？常用的加锁方式，区别？</p><p>9.<a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/" target="_blank" rel="noopener">删除链表的倒数第 N 个结点</a></p><h2 id="参考答案"><a href="#参考答案" class="headerlink" title="参考答案"></a>参考答案</h2><p>1.通用化技术提升迭代效率</p><p>2.降低三方 App 接入成本</p><p>3.SDK 体积优化，为什么用 Masonry 会增加体积</p><p>4.加载速度优化，怎么统计的？多个请求并发怎么处理的？</p><p>5.引用计数，isa 里都有什么？weak 的实现？对象的释放流程，怎么判断是否有弱引用</p><p>isa</p><ul><li><p>nonpointer 0，代表普通的指针，存储着Class、Meta-Class对象的内存地址1，代表优化过，使用位域存储更多的信息</p></li><li><p>has_assoc 是否有设置过关联对象，如果没有，释放时会更快</p></li><li><p>has_cxx_dtor 是否有C++的析构函数（.cxx_destruct），如果没有，释放时会更快</p></li><li><p>shiftcls 存储着Class、Meta-Class对象的内存地址信息</p></li><li><p>magic 用于在调试时分辨对象是否未完成初始化</p></li><li><p>weakly_referenced 是否有被弱引用指向过，如果没有，释放时会更快</p></li><li><p>deallocating 对象是否正在释放</p></li><li><p>extra_rc 里面存储的值是引用计数器减1</p></li><li><p>has_sidetable_rc 引用计数器是否过大无法存储在isa中如果为1，那么引用计数会存储在一个叫SideTable的类的属性中</p></li></ul><p>6.方法交换交换的是什么？</p><p>7.block 的变量捕获，为什么用<code>__block</code>可以修改局部变量的值</p><p>8.找出代码里有问题的地方，可变数组用 copy 修饰，调用添加元素方法会发生什么？能不能上报、拦截闪退？线程不安全怎么处理？常用的加锁方式，区别？</p><p>9.<a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/" target="_blank" rel="noopener">删除链表的倒数第 N 个结点</a></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * function ListNode(val, next) &#123;</span></span><br><span class="line"><span class="hljs-comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="hljs-comment"> *     this.next = (next===undefined ? null : next)</span></span><br><span class="line"><span class="hljs-comment"> * &#125;</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-keyword">var</span> removeNthFromEnd = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">head, n</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> length = getLength(head);</span><br><span class="line">    <span class="hljs-keyword">let</span> i = length - n;</span><br><span class="line">    <span class="hljs-keyword">let</span> dummyNode = <span class="hljs-keyword">new</span> ListNode();</span><br><span class="line">    dummyNode.next = head;</span><br><span class="line">    <span class="hljs-keyword">let</span> p = dummyNode;</span><br><span class="line">    <span class="hljs-keyword">while</span> (i &gt; <span class="hljs-number">0</span>) &#123;</span><br><span class="line">        p = p.next;</span><br><span class="line">        i--;</span><br><span class="line">    &#125;</span><br><span class="line">    p.next = p.next.next;</span><br><span class="line">    <span class="hljs-keyword">return</span> dummyNode.next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> getLength = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">head</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> length = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">let</span> p = head;</span><br><span class="line">    <span class="hljs-keyword">while</span> (p) &#123;</span><br><span class="line">        length++;</span><br><span class="line">        p = p.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;天眼查&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="面试题" scheme="http://soso.wiki/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试" scheme="http://soso.wiki/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="天眼查" scheme="http://soso.wiki/tags/%E5%A4%A9%E7%9C%BC%E6%9F%A5/"/>
    
  </entry>
  
  <entry>
    <title>二叉树算法题</title>
    <link href="http://soso.wiki/2024-08-29-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    <id>http://soso.wiki/2024-08-29-二叉树算法题/</id>
    <published>2024-08-28T16:06:00.000Z</published>
    <updated>2024-08-28T16:13:54.197Z</updated>
    
    <content type="html"><![CDATA[<p>二叉树算法题（ JavaScript 实现）<br><a id="more"></a></p><h4 id="二叉树的中序遍历"><a href="#二叉树的中序遍历" class="headerlink" title="二叉树的中序遍历"></a><a href="https://leetcode.cn/problems/binary-tree-inorder-traversal/" target="_blank" rel="noopener">二叉树的中序遍历</a></h4><p>递归：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> inorderTraversal = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">root</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> res = []</span><br><span class="line">    <span class="hljs-keyword">const</span> inorder = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">root</span>) </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="hljs-keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        inorder(root.left);</span><br><span class="line">        res.push(root.val);</span><br><span class="line">        inorder(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">    inorder(root);</span><br><span class="line">    <span class="hljs-keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>迭代：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> inorderTraversal = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">root</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> res = [];</span><br><span class="line">    <span class="hljs-keyword">const</span> stack = [];</span><br><span class="line">    <span class="hljs-keyword">let</span> cur = root;</span><br><span class="line">    <span class="hljs-keyword">while</span> (stack.length || cur) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (cur) &#123;</span><br><span class="line">            stack.push(cur);</span><br><span class="line">            cur = cur.left;</span><br><span class="line">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">            cur = stack.pop();</span><br><span class="line">            res.push(cur.val);</span><br><span class="line">            cur = cur.right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="二叉树的层序遍历"><a href="#二叉树的层序遍历" class="headerlink" title="二叉树的层序遍历"></a><a href="https://leetcode.cn/problems/binary-tree-level-order-traversal/" target="_blank" rel="noopener">二叉树的层序遍历</a></h4><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> levelOrder = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">root</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> res = [], queue = [];</span><br><span class="line">    queue.push(root);</span><br><span class="line">    <span class="hljs-keyword">if</span> (root === <span class="hljs-literal">null</span>) &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">while</span> (queue.length) &#123;</span><br><span class="line">        <span class="hljs-keyword">let</span> curLevel = [];</span><br><span class="line">        <span class="hljs-keyword">let</span> length = queue.length;</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="hljs-keyword">let</span> node = queue.shift();</span><br><span class="line">            curLevel.push(node.val);</span><br><span class="line">            <span class="hljs-keyword">if</span> (node.left) &#123;</span><br><span class="line">                queue.push(node.left);</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="hljs-keyword">if</span> (node.right) &#123;</span><br><span class="line">                queue.push(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res.push(curLevel);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="二叉树的最大深度"><a href="#二叉树的最大深度" class="headerlink" title="二叉树的最大深度"></a><a href="https://leetcode.cn/problems/maximum-depth-of-binary-tree/" target="_blank" rel="noopener">二叉树的最大深度</a></h4><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> maxDepth = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">root</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (!root) &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.max(maxDepth(root.left), maxDepth(root.right)) + <span class="hljs-number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="翻转二叉树"><a href="#翻转二叉树" class="headerlink" title="翻转二叉树"></a><a href="https://leetcode.cn/problems/invert-binary-tree/" target="_blank" rel="noopener">翻转二叉树</a></h4><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> invertTree = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">root</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (!root) &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">let</span> left = invertTree(root.left);</span><br><span class="line">    <span class="hljs-keyword">let</span> right = invertTree(root.right);</span><br><span class="line">    root.left = right;</span><br><span class="line">    root.right = left;</span><br><span class="line">    <span class="hljs-keyword">return</span> root;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="二叉树的直径"><a href="#二叉树的直径" class="headerlink" title="二叉树的直径"></a><a href="https://leetcode.cn/problems/diameter-of-binary-tree/" target="_blank" rel="noopener">二叉树的直径</a></h4><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> diameterOfBinaryTree = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">root</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> ans = <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getDepth</span>(<span class="hljs-params">root</span>) </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">let</span> left = getDepth(root.left);</span><br><span class="line">        <span class="hljs-keyword">let</span> right = getDepth(root.right);</span><br><span class="line">        ans = <span class="hljs-built_in">Math</span>.max(ans, left + right + <span class="hljs-number">1</span>);</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.max(left, right) + <span class="hljs-number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    getDepth(root);</span><br><span class="line">    <span class="hljs-keyword">return</span> ans - <span class="hljs-number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;二叉树算法题（ JavaScript 实现）&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="面试题" scheme="http://soso.wiki/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试" scheme="http://soso.wiki/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="算法" scheme="http://soso.wiki/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="二叉树" scheme="http://soso.wiki/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>百川智能</title>
    <link href="http://soso.wiki/%E7%99%BE%E5%B7%9D%E6%99%BA%E8%83%BD/"/>
    <id>http://soso.wiki/百川智能/</id>
    <published>2024-08-28T03:00:00.000Z</published>
    <updated>2024-08-30T05:53:38.036Z</updated>
    
    <content type="html"><![CDATA[<p>百川智能<br><a id="more"></a></p><p>一面：</p><p>1.SDK体积优化</p><p>2.webView白屏</p><p>3.线上闪退处理流程</p><p>4.Runtime、Runloop应用，结合项目；为什么开启runloop</p><p>5.MVC MVVM 项目里具体的用法</p><p>算法：</p><p>1.单链表中是否存在环？如果存在，返回环的起始节点。解释快慢指针原理。</p><p>2.一百盏灯排成一行,从左到右编号1-100,每盏灯都有一根开关,一开始全是灭的,另外有100小孩,第一个把1的倍数的开关拉一下,第二个把凡是2的倍数开关拉一下,这样下去到最后一盏灯,有哪些是亮的？（口述思路）</p><p>二面：</p><p>1.写一个工具方法：用 OC 或 Swift 实现，查找数组的第 k 个大的元素</p><p>要求能在项目里实际使用，可以用三方库。注意边界条件。</p><p>2.卡片动态化，怎么避免因为卡片样式等接需求</p><p>3.IM列表数据过大的问题</p><p>4.删除消息怎么保证多端一致性</p><p>5.怎么解决ViewModel过大的问题，MVVM和MVC的核心区别是双向绑定吗？</p><p>6.为什么选择SSE</p><p>7.离线包</p><p>8.webView cookie 丢失问题</p><p>9.RN长列表性能问题</p><h2 id="参考答案"><a href="#参考答案" class="headerlink" title="参考答案"></a>参考答案</h2><p>(GPT)</p><p>1.SDK体积优化</p><p>2.webView白屏</p><p>3.线上闪退处理流程</p><p>4.Runtime、Runloop应用，结合项目</p><p>算法：</p><p>1.单链表中是否存在环？如果存在，返回环的起始节点。解释快慢指针原理。</p><p>2.一百盏灯排成一行,从左到右编号1-100,每盏灯都有一根开关,一开始全是灭的,另外有100小孩,第一个把1的倍数的开关拉一下,第二个把凡是2的倍数开关拉一下,这样下去到最后一盏灯,有哪些是亮的？（口述思路）</p><p>这个问题可以通过分析开关操作的规律来解决。我们来详细探讨一下每盏灯的状态。</p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><ul><li>一开始，每盏灯都是灭的。</li><li>每个小孩操作的是与他们编号相同的倍数的开关。例如，第一个小孩操作的是1、2、3、4、…、100号开关；第二个小孩操作的是2、4、6、8、…、100号开关，依此类推。</li></ul><h3 id="观察灯的状态"><a href="#观察灯的状态" class="headerlink" title="观察灯的状态"></a>观察灯的状态</h3><p>每盏灯的状态取决于被多少个小孩操作。一个灯的状态会在操作次数（开关次数）为奇数时变为亮，为偶数时保持灭。</p><p>我们可以发现：</p><ul><li>如果灯的编号是 ( n )，那么它会被所有 ( n ) 的因子的小孩操作。比如，灯编号为12的灯会被1、2、3、4、6、12号小孩操作。</li><li>因此，每盏灯的状态由它的因子数量决定。如果因子数量是奇数，则灯是亮的。如果因子数量是偶数，则灯是灭的。</li></ul><h3 id="因子数量的分析"><a href="#因子数量的分析" class="headerlink" title="因子数量的分析"></a>因子数量的分析</h3><p>每个正整数 ( n ) 的因子数量通常是偶数，因为因子通常成对出现（比如 ( 1 ) 和 ( n ), ( 2 ) 和 ( n/2 ) 等）。然而，完全平方数（如1, 4, 9, 16, …）的因子数量是奇数，因为一个因子对（如 ( \sqrt{n} )）会被重复计算一次。</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><ul><li>只有完全平方数的因子数量是奇数，因此只有那些灯编号是完全平方数的灯会在最后亮着。</li></ul><h3 id="列出完全平方数"><a href="#列出完全平方数" class="headerlink" title="列出完全平方数"></a>列出完全平方数</h3><ol><li>( 1^2 = 1 )</li><li>( 2^2 = 4 )</li><li>( 3^2 = 9 )</li><li>( 4^2 = 16 )</li><li>( 5^2 = 25 )</li><li>( 6^2 = 36 )</li><li>( 7^2 = 49 )</li><li>( 8^2 = 64 )</li><li>( 9^2 = 81 )</li><li>( 10^2 = 100 )</li></ol><p>所以，最后亮着的灯的编号是：1, 4, 9, 16, 25, 36, 49, 64, 81, 100。</p><p>二面：</p><p>1.写一个工具方法：用 OC 或 Swift 实现，查找数组的第 k 个大的元素</p><p>要求能在项目里实际使用，可以用三方库。注意边界条件。</p><p>2.卡片动态化，怎么避免因为卡片样式等接需求</p><p>3.IM列表数据过大的问题</p><p>4.删除消息怎么保证多端一致性</p><p>5.怎么解决ViewModel过大的问题，MVVM和MVC的核心区别是双向绑定吗？</p><p>6.为什么选择SSE</p><p>相较于其他流式数据传输方式，SSE 的优点包括：</p><ol><li><strong>简单实现</strong>：SSE 使用标准的 HTTP 协议，易于实现和调试，尤其是对于基本的实时推送需求。</li><li><strong>自动重连</strong>：SSE 支持自动重连机制，连接丢失后会自动尝试重新建立连接，确保数据传输的可靠性。</li><li><strong>单向通信</strong>：适用于只需要从服务器到客户端的单向数据流的场景，例如新闻推送或实时更新。</li><li><strong>轻量级</strong>：SSE 不需要额外的握手或复杂的协议栈，相比 WebSocket，SSE 的实现和维护成本较低。</li><li><strong>文本数据</strong>：SSE 以 UTF-8 编码的文本格式传输数据，解析起来较为简单。</li></ol><p>这些优点使 SSE 在需要简单、可靠的实时数据推送时成为一个合适的选择。</p><p>流式数据可以通过多种方式进行传输，具体选择取决于应用场景、性能需求和技术栈。以下是一些常见的流式数据传输方法：</p><h3 id="1-WebSocket"><a href="#1-WebSocket" class="headerlink" title="1. WebSocket"></a>1. <strong>WebSocket</strong></h3><ul><li><strong>描述</strong>：WebSocket 是一种在单个 TCP 连接上进行全双工通信的协议。与 HTTP 不同，它允许在客户端和服务器之间进行双向实时数据交换。</li><li><strong>适用场景</strong>：需要双向实时通信的应用，例如在线游戏、实时聊天、协作工具。</li><li><strong>优点</strong>：低延迟、双向通信、持久连接。</li></ul><h3 id="2-Server-Sent-Events-SSE"><a href="#2-Server-Sent-Events-SSE" class="headerlink" title="2. Server-Sent Events (SSE)"></a>2. <strong>Server-Sent Events (SSE)</strong></h3><ul><li><strong>描述</strong>：SSE 允许服务器通过单向的持久连接向客户端推送实时事件。客户端可以通过 EventSource API 接收这些事件。</li><li><strong>适用场景</strong>：需要从服务器向客户端推送实时数据的应用，例如实时更新的新闻推送、监控系统。</li><li><strong>优点</strong>：简单易用、自动重连、支持文本数据。</li></ul><h3 id="3-HTTP-2"><a href="#3-HTTP-2" class="headerlink" title="3. HTTP/2"></a>3. <strong>HTTP/2</strong></h3><ul><li><strong>描述</strong>：HTTP/2 是 HTTP 协议的升级版，支持多路复用（multiplexing），允许在单个 TCP 连接上并发传输多个请求和响应。</li><li><strong>适用场景</strong>：需要高效和快速加载的网页应用、实时更新的内容。</li><li><strong>优点</strong>：减少延迟、提高传输效率、支持流式数据传输。</li></ul><h3 id="4-gRPC"><a href="#4-gRPC" class="headerlink" title="4. gRPC"></a>4. <strong>gRPC</strong></h3><ul><li><strong>描述</strong>：gRPC 是 Google 开发的开源高性能 RPC 框架，支持双向流式通信。基于 HTTP/2，提供了高效的通信机制。</li><li><strong>适用场景</strong>：微服务架构、需要高效传输和处理大规模数据的系统。</li><li><strong>优点</strong>：强类型、安全、高性能、支持双向流。</li></ul><h3 id="5-MQTT-Message-Queuing-Telemetry-Transport"><a href="#5-MQTT-Message-Queuing-Telemetry-Transport" class="headerlink" title="5. MQTT (Message Queuing Telemetry Transport)"></a>5. <strong>MQTT (Message Queuing Telemetry Transport)</strong></h3><ul><li><strong>描述</strong>：MQTT 是一种轻量级的消息传输协议，设计用于低带宽、不稳定的网络环境。支持发布/订阅模型。</li><li><strong>适用场景</strong>：物联网（IoT）设备通信、低带宽网络中的消息传输。</li><li><strong>优点</strong>：轻量、可靠、适合低带宽和高延迟的环境。</li></ul><h3 id="6-Apache-Kafka"><a href="#6-Apache-Kafka" class="headerlink" title="6. Apache Kafka"></a>6. <strong>Apache Kafka</strong></h3><ul><li><strong>描述</strong>：Apache Kafka 是一个分布式流媒体平台，用于构建实时数据流应用和数据管道。支持高吞吐量的数据传输。</li><li><strong>适用场景</strong>：需要处理大量实时数据的应用、数据管道、日志聚合。</li><li><strong>优点</strong>：高吞吐量、可扩展、持久性、高可靠性。</li></ul><h3 id="7-Redis-Streams"><a href="#7-Redis-Streams" class="headerlink" title="7. Redis Streams"></a>7. <strong>Redis Streams</strong></h3><ul><li><strong>描述</strong>：Redis Streams 是 Redis 的一种数据结构，用于处理流数据。支持持久化、高效的流数据存储和处理。</li><li><strong>适用场景</strong>：需要高效处理流数据的应用，例如实时数据分析、日志处理。</li><li><strong>优点</strong>：高性能、简单易用、支持持久化和数据恢复。</li></ul><h3 id="8-WebRTC"><a href="#8-WebRTC" class="headerlink" title="8. WebRTC"></a>8. <strong>WebRTC</strong></h3><ul><li><strong>描述</strong>：WebRTC 是一种支持浏览器之间直接进行实时通信的技术，支持视频、音频和数据流。</li><li><strong>适用场景</strong>：视频会议、实时数据传输、点对点通信。</li><li><strong>优点</strong>：低延迟、点对点通信、支持多种数据类型。</li></ul><h3 id="9-Chunked-Transfer-Encoding"><a href="#9-Chunked-Transfer-Encoding" class="headerlink" title="9. Chunked Transfer Encoding"></a>9. <strong>Chunked Transfer Encoding</strong></h3><ul><li><strong>描述</strong>：这是 HTTP/1.1 中的一种传输编码方式，允许服务器分块传输数据，客户端可以在接收数据时开始处理。</li><li><strong>适用场景</strong>：需要逐步传输大数据的场景。</li><li><strong>优点</strong>：支持动态生成和传输数据，减少了延迟。</li></ul><h3 id="10-Data-Streams-File-Streams"><a href="#10-Data-Streams-File-Streams" class="headerlink" title="10. Data Streams (File Streams)"></a>10. <strong>Data Streams (File Streams)</strong></h3><ul><li><strong>描述</strong>：通过文件流传输数据，通常用于大文件的逐步传输和处理。</li><li><strong>适用场景</strong>：大文件传输、流式处理数据。</li><li><strong>优点</strong>：支持大数据文件的逐步传输、处理。</li></ul><p>选择合适的流式数据传输方式需要考虑具体的应用需求、数据量、实时性要求、网络条件等因素。每种技术都有其特定的优点和适用场景。</p><p>7.离线包</p><p>8.webView cookie 丢失问题</p><p>iOS WebView 中的 Cookie 丢失通常可以由以下几个原因引起：</p><ol><li><strong>App 重新启动</strong>：WebView 的 Cookie 存储在内存中，当应用被终止或重启时，这些 Cookie 可能会丢失。</li><li><strong>Cookies 设置</strong>：iOS 的 WebView 可能会受到应用的 Cookie 设置或隐私策略的影响，特别是在使用 <code>WKWebView</code> 时，它的 Cookie 存储可能与 <code>UIWebView</code> 不同。</li><li><strong>共享 Cookie</strong>：<code>WKWebView</code> 和 <code>UIWebView</code> 使用不同的 Cookie 存储机制，它们之间的 Cookie 可能无法共享。</li><li><strong>域名问题</strong>：确保设置和读取 Cookie 的域名一致，跨域请求可能导致 Cookie 丢失。</li></ol><h3 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h3><ol><li><p><strong>使用 <code>WKWebView</code> 的 <code>WKWebsiteDataStore</code></strong>：</p><figure class="highlight swift hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> webView = <span class="hljs-type">WKWebView</span>(frame: .zero, configuration: <span class="hljs-type">WKWebViewConfiguration</span>())</span><br><span class="line"><span class="hljs-keyword">let</span> dataStore = <span class="hljs-type">WKWebsiteDataStore</span>.<span class="hljs-keyword">default</span>()</span><br><span class="line">webView.configuration.websiteDataStore = dataStore</span><br></pre></td></tr></table></figure></li><li><p><strong>持久化 Cookie</strong>： 你可以手动持久化和恢复 Cookie。例如，通过 <code>HTTPCookieStorage</code> 保存 Cookie，然后在应用启动时恢复：</p><figure class="highlight swift hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Save cookies</span></span><br><span class="line"><span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> cookies = <span class="hljs-type">HTTPCookieStorage</span>.shared.cookies &#123;</span><br><span class="line">    <span class="hljs-type">UserDefaults</span>.standard.<span class="hljs-keyword">set</span>(cookies.<span class="hljs-built_in">map</span> &#123; <span class="hljs-type">NSKeyedArchiver</span>.archivedData(withRootObject: \$<span class="hljs-number">0</span>) &#125;, forKey: <span class="hljs-string">"savedCookies"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Load cookies</span></span><br><span class="line"><span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> cookieData = <span class="hljs-type">UserDefaults</span>.standard.array(forKey: <span class="hljs-string">"savedCookies"</span>) <span class="hljs-keyword">as</span>? [<span class="hljs-type">Data</span>] &#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> cookies = cookieData.compactMap &#123; <span class="hljs-type">NSKeyedUnarchiver</span>.unarchiveObject(with: \$<span class="hljs-number">0</span>) <span class="hljs-keyword">as</span>? <span class="hljs-type">HTTPCookie</span> &#125;</span><br><span class="line">    cookies.forEach &#123; <span class="hljs-type">HTTPCookieStorage</span>.shared.setCookie(\$<span class="hljs-number">0</span>) &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>确保 WebView 配置正确</strong>：确保 WebView 使用的是适当的 <code>WKWebViewConfiguration</code>，并且 Cookie 设置没有被隐私设置或其他配置所干扰。</p></li></ol><p>这些方法可以帮助管理和解决 iOS WebView 中的 Cookie 丢失问题。</p><p><a href="https://www.jianshu.com/p/8636ccd3674b" target="_blank" rel="noopener">https://www.jianshu.com/p/8636ccd3674b</a></p><p>9.RN长列表性能问题</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;百川智能&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="面试题" scheme="http://soso.wiki/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试" scheme="http://soso.wiki/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="百川智能" scheme="http://soso.wiki/tags/%E7%99%BE%E5%B7%9D%E6%99%BA%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>汽车之家</title>
    <link href="http://soso.wiki/%E6%B1%BD%E8%BD%A6%E4%B9%8B%E5%AE%B6/"/>
    <id>http://soso.wiki/汽车之家/</id>
    <published>2024-08-23T06:00:00.000Z</published>
    <updated>2024-08-28T07:40:22.757Z</updated>
    
    <content type="html"><![CDATA[<p>汽车之家<br><a id="more"></a><br>1.动态库和静态库的区别</p><p>2.网络优化</p><p>3.静态分析发现了哪些问题？</p><p>4.加载速度优化</p><p>5.Crash 监测，野指针定位</p><p>.打印结果</p><figure class="highlight objc hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">__block <span class="hljs-keyword">int</span> a = <span class="hljs-number">0</span>;</span><br><span class="line"> <span class="hljs-keyword">int</span>(^aBlock)(<span class="hljs-keyword">int</span>) = ^(<span class="hljs-keyword">int</span> num) &#123;</span><br><span class="line">     a += num;</span><br><span class="line">     <span class="hljs-keyword">if</span> (a &lt; <span class="hljs-number">5</span>) &#123;</span><br><span class="line">         aBlock(a);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="hljs-keyword">return</span> a++;</span><br><span class="line"> &#125;;</span><br><span class="line"> <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@"%d"</span>, aBlock(<span class="hljs-number">1</span>));</span><br></pre></td></tr></table></figure><p>aBlock为什么是空？</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;汽车之家&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="面试题" scheme="http://soso.wiki/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试" scheme="http://soso.wiki/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="汽车之家" scheme="http://soso.wiki/tags/%E6%B1%BD%E8%BD%A6%E4%B9%8B%E5%AE%B6/"/>
    
  </entry>
  
  <entry>
    <title>元石</title>
    <link href="http://soso.wiki/%E5%85%83%E7%9F%B3/"/>
    <id>http://soso.wiki/元石/</id>
    <published>2024-08-23T03:00:00.000Z</published>
    <updated>2024-08-28T07:32:32.818Z</updated>
    
    <content type="html"><![CDATA[<p>元石<br><a id="more"></a></p><p>一面：</p><p>项目</p><p>1.SSE 怎么实现逐字打印效果，event来了个卡片，怎么保证顺序？</p><p>2.三方接入成本为什么还需要5人日？toast这种是不是SDK实现好点，担心增加体积可以用subPackage</p><p>3.SDK体积优化</p><p>4.加载速度优化</p><p>5.活动页组件化</p><p>6.卡顿监控，能获取到卡顿的堆栈吗？</p><p>7.组件化能不在+load注册吗？attribute注册了解吗？</p><p>算法：</p><p>1.<a href="https://leetcode.cn/problems/combination-sum/" target="_blank" rel="noopener">39. 组合总和</a></p><p>2.合并两个有序链表</p><p>二面：</p><p>1.通用化技术提升迭代效率，scheme和动态化，设计scheme需要有哪些注意点</p><p>2.白屏率怎么统计？</p><p>3.活动页组件化</p><p>4.RN跟Flutter的对比</p><p>5.SSE实现打字机效果，对SSE的了解，切换前后台，怎么断点续传</p><p>6.算法：反转数  输入int  返回int   边界条件、能运行</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;元石&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="面试题" scheme="http://soso.wiki/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试" scheme="http://soso.wiki/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="元石" scheme="http://soso.wiki/tags/%E5%85%83%E7%9F%B3/"/>
    
  </entry>
  
  <entry>
    <title>度小满</title>
    <link href="http://soso.wiki/%E5%BA%A6%E5%B0%8F%E6%BB%A1/"/>
    <id>http://soso.wiki/度小满/</id>
    <published>2024-08-20T14:50:00.000Z</published>
    <updated>2024-08-20T14:50:56.034Z</updated>
    
    <content type="html"><![CDATA[<p>度小满<br><a id="more"></a></p><p>一面：</p><p>1.内存管理，内存泄漏，监测方法，解决办法</p><p>2.App启动流程，优化方法，查看每个阶段耗时的方法</p><p>Category和Extension区别，使用场景</p><p>Category可以添加属性吗？</p><p>3.webView和原生交互，怎么提升webView加载速度？H5怎么加载本地的JS和图片资源？</p><p>4.HTTP和HTTPS的区别，HTTPS怎么保证安全？GET和POST区别？请求头里一般有什么？</p><p>5.MVC、MVP、MVVM区别，使用场景</p><p>6.用OC实现一个栈，push  pop  isEmpty方法，栈和队列的区别，使用场景</p><p>7.了解鸿蒙吗</p><p>二面：</p><p>1.了解提升研发效率的方法，跨平台框架？</p><p>2.Flutter和原生交互方法</p><p>3.小程序的实现原理，SN的实现原理</p><p>3.设计图片下载框架，包括内存，缓存，解码等；缓存的技术指标是什么？(命中率) 在缓存即将达到最大容量时，同时有大量写入缓存的操作，怎么优化？</p><p>4.下载限制并发数量，下载断点续传    http请求码是多少</p><p>5.同层渲染怎么实现</p><p>6.webView加载速度优化</p><p>7.线上卡顿监控，卡顿优化</p><p>8.线上内存监控</p><p>9.口述快速排序，快速排序用迭代实现</p><p>10.HTTPS的流程，客户端校验证书的过程，链式验证</p><p>三面：</p><p>1.监控</p><p>2.原生与H5交互，注入和post message怎么选型的？</p><p>3.有没有关注过业务指标，技术手段提升业务指标的情况？收银台支付成功率？</p><p>4.其他：年龄、看机会原因，有没有别的offer</p><h2 id="参考答案"><a href="#参考答案" class="headerlink" title="参考答案"></a>参考答案</h2><p>1.内存管理，内存泄漏，卡顿监测方法，解决办法</p><p>2.App启动流程，优化方法，查看每个阶段耗时的方法</p><p>3.webView和原生交互，怎么提升webView加载速度？H5怎么加载本地的JS和图片资源？</p><p>4.HTTP和HTTPS的区别，HTTPS怎么保证安全？GET和POST区别？请求头里一般有什么？</p><p>HTTP（HyperText Transfer Protocol）和HTTPS（HyperText Transfer Protocol Secure）是用于在网络上传输数据的两种协议。它们有以下主要区别：</p><ol><li><strong>安全性</strong>：<ul><li><strong>HTTP</strong>：数据以纯文本形式传输，不加密。因此，数据在传输过程中容易被截获和篡改。</li><li><strong>HTTPS</strong>：在HTTP的基础上增加了SSL/TLS加密层。数据在传输过程中会被加密，提供了数据的保密性和完整性，防止被窃听和篡改。</li></ul></li><li><strong>端口</strong>：<ul><li><strong>HTTP</strong>：默认使用80端口。</li><li><strong>HTTPS</strong>：默认使用443端口。</li></ul></li><li><strong>证书</strong>：<ul><li><strong>HTTP</strong>：不需要证书。</li><li><strong>HTTPS</strong>：需要SSL/TLS证书，用于加密通信和验证服务器身份。证书由受信任的证书颁发机构（CA）签发。</li></ul></li><li><strong>性能</strong>：<ul><li><strong>HTTP</strong>：因为没有加密和解密的过程，速度相对较快。</li><li><strong>HTTPS</strong>：由于需要进行加密和解密操作，性能会有所下降，但现代硬件和优化技术已经极大地减少了这种影响。</li></ul></li></ol><p>GET和POST区别</p><ul><li><strong>GET</strong>：主要用于获取数据，参数在URL中，适合传输较少、非敏感数据，幂等且可缓存。</li><li><strong>POST</strong>：主要用于提交数据，参数在请求体中，适合传输大量、敏感数据，非幂等且通常不缓存。</li></ul><p>以下是一些常见的HTTP请求头字段及其作用：</p><h3 id="1-通用请求头字段"><a href="#1-通用请求头字段" class="headerlink" title="1. 通用请求头字段"></a>1. <strong>通用请求头字段</strong></h3><ul><li><strong>Host</strong>：指定请求的目标主机和端口，例如：<code>Host: www.example.com</code>。这是HTTP/1.1中必须包含的头字段。</li><li><strong>User-Agent</strong>：标识发出请求的客户端软件信息，例如浏览器类型和版本、操作系统等，例如：<code>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3</code>。</li><li><strong>Accept</strong>：指定客户端能够处理的内容类型，例如：<code>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</code>。</li><li><strong>Accept-Language</strong>：指定客户端首选的语言和地区，例如：<code>Accept-Language: en-US,en;q=0.5</code>。</li><li><strong>Accept-Encoding</strong>：指定客户端支持的内容编码类型，例如：<code>Accept-Encoding: gzip, deflate, br</code>。</li><li><strong>Connection</strong>：控制连接的管理，例如：<code>Connection: keep-alive</code>或<code>Connection: close</code>。</li></ul><h3 id="2-请求头字段（请求特有）"><a href="#2-请求头字段（请求特有）" class="headerlink" title="2. 请求头字段（请求特有）"></a>2. <strong>请求头字段（请求特有）</strong></h3><ul><li><strong>Referer</strong>：指示请求的来源页面的URL，例如：<code>Referer: https://www.example.com/previous-page</code>。</li><li><strong>Cookie</strong>：发送存储在客户端的Cookie数据，例如：<code>Cookie: sessionId=abc123; theme=light</code>。</li><li><strong>Authorization</strong>：用于传递身份验证凭据，例如：<code>Authorization: Bearer token123</code>或<code>Authorization: Basic base64credentials</code>。</li><li><strong>Content-Type</strong>：指定请求体的媒体类型，常用于POST和PUT请求，例如：<code>Content-Type: application/json</code>或<code>Content-Type: application/x-www-form-urlencoded</code>。</li><li><strong>Content-Length</strong>：表示请求体的字节长度，例如：<code>Content-Length: 348</code>。</li><li><strong>Origin</strong>：表明请求的来源，用于跨域请求，例如：<code>Origin: https://www.example.com</code>。</li><li><strong>If-Modified-Since</strong>：用于条件请求，只在指定日期之后资源被修改时才返回，例如：<code>If-Modified-Since: Wed, 21 Oct 2015 07:28:00 GMT</code>。</li><li><strong>If-None-Match</strong>：用于条件请求，当ETag不匹配时才返回，例如：<code>If-None-Match: &quot;abc123&quot;</code>。</li><li><strong>Range</strong>：请求部分资源内容，例如：<code>Range: bytes=500-999</code>。</li></ul><h3 id="3-自定义请求头字段"><a href="#3-自定义请求头字段" class="headerlink" title="3. 自定义请求头字段"></a>3. <strong>自定义请求头字段</strong></h3><ul><li><strong>X-Requested-With</strong>：通常用于标识Ajax请求，例如：<code>X-Requested-With: XMLHttpRequest</code>。</li><li><strong>X-CSRF-Token</strong>：用于传递CSRF（跨站请求伪造）令牌，以防止CSRF攻击。</li><li><strong>X-Forwarded-For</strong>：记录原始客户端IP地址，常用于代理服务器，例如：<code>X-Forwarded-For: 203.0.113.195</code>。</li></ul><h3 id="4-HTTP-2-特有头字段"><a href="#4-HTTP-2-特有头字段" class="headerlink" title="4. HTTP/2 特有头字段"></a>4. <strong>HTTP/2 特有头字段</strong></h3><ul><li><strong>:method</strong>：表示HTTP方法，例如：<code>:method: GET</code>。</li><li><strong>:scheme</strong>：表示请求的协议（http或https），例如：<code>:scheme: https</code>。</li><li><strong>:path</strong>：表示请求的路径和查询字符串，例如：<code>:path: /index.html</code>。</li><li><strong>:authority</strong>：表示服务器的主机名和端口，类似于HTTP/1.1的Host头字段，例如：<code>:authority: www.example.com</code>。</li></ul><h3 id="示例请求头"><a href="#示例请求头" class="headerlink" title="示例请求头"></a>示例请求头</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET /index.html HTTP/1.1</span><br><span class="line">Host: www.example.com</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line">Accept-Language: en-US,en;q=0.5</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Referer: https://www.example.com/previous-page</span><br><span class="line">Cookie: sessionId=abc123; theme=light</span><br><span class="line">Authorization: Bearer token123</span><br></pre></td></tr></table></figure><p>这些请求头字段在客户端和服务器之间传递时，提供了关于请求和客户端环境的丰富信息，使得服务器能够理解和处理请求，并返回适当的响应。</p><p>5.MVC、MVP、MVVM区别，使用场景</p><p>6.用OC实现一个栈，push  pop  isEmpty方法，栈和队列的区别，使用场景</p><p>7.了解鸿蒙吗</p><p>二面：</p><p>1.了解提升研发效率的方法，跨平台框架？</p><p>2.Flutter和原生交互方法</p><p>3.小程序的实现原理，SN的实现原理</p><p>3.设计图片下载框架，包括内存，缓存，解码等；缓存的技术指标是什么？(命中率) 在缓存即将达到最大容量时，同时有大量写入缓存的操作，怎么优化？</p><p>4.下载限制并发数量，下载断点续传    http请求码是多少</p><p>5.同层渲染怎么实现</p><p><a href="https://developers.weixin.qq.com/community/develop/article/doc/000c4e433707c072c1793e56f5c813" target="_blank" rel="noopener">小程序同层渲染原理剖析</a></p><p><a href="https://zhuanlan.zhihu.com/p/498449103" target="_blank" rel="noopener">小程序在同层渲染上的探索</a></p><p>6.webView加载速度优化</p><p>7.线上卡顿监控，卡顿优化</p><p>8.线上内存监控</p><p><a href="https://wetest.qq.com/labs/367" target="_blank" rel="noopener">iOS微信内存监控 </a></p><p>9.口述快速排序，快速排序用迭代实现</p><p>10.HTTPS的流程，客户端校验证书的过程，链式验证</p><p>第一步是检查证书的链式验证。客户端会使用已信任的根证书（Root Certificate Authority）去验证服务器证书的有效性。根证书是权威机构颁发的，被广泛信任的证书，用于证明其它证书的合法性。客户端会检查服务器证书中的颁发者，然后递归地检查颁发者的证书，直到检查到根证书或者找不到信任的根证书为止。</p><p>第二步是检查证书的有效期。客户端会检查证书的有效起始日期和有效截止日期，确保证书在有效期内。如果证书过期，客户端将拒绝连接。</p><p>第三步是检查证书的公钥。客户端会验证服务器证书中的公钥和域名是否匹配。客户端会从证书中提取服务器的公钥，并与服务器进行握手协议，验证证书中的公钥是否与服务器的公钥匹配。如果不匹配，客户端将拒绝连接。</p><p>除了上述基本的校验步骤，客户端还可以进行更加严格的校验，以提高安全性。例如，客户端可以检查证书中是否包含指纹信息（Fingerprint），从而确保证书的完整性和一致性。客户端也可以检查证书中的扩展字段，查看是否存在其他安全相关的信息。</p><p>总结来说，客户端校验证书的过程包括链式验证、有效期验证和公钥匹配验证。通过这些验证步骤，客户端能够确保所连接的服务器是合法且可信赖的，从而保障通信的安全性。</p><p>三面：</p><p>1.监控</p><p>2.原生与H5交互，注入和post message怎么选型的？</p><p>在移动开发中，原生与H5（HTML5）交互是一个常见的需求。为了实现这种交互，通常有两种主要的方法：注入（Injection）和 <code>postMessage</code>。各有优缺点，选择哪种方法取决于具体的应用场景和需求。下面对这两种方法进行详细比较和建议：</p><h3 id="注入（Injection）"><a href="#注入（Injection）" class="headerlink" title="注入（Injection）"></a>注入（Injection）</h3><h4 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h4><ol><li><strong>灵活性高</strong>：可以直接在H5页面中注入原生代码，灵活性较高。</li><li><strong>强大的控制力</strong>：原生代码可以直接操作H5页面的DOM和JavaScript，控制力强。</li><li><strong>无需特定API支持</strong>：不需要依赖特定的API或者更新H5页面的代码。</li></ol><h4 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h4><ol><li><strong>安全性问题</strong>：注入代码可能会带来安全风险，容易被恶意代码利用。</li><li><strong>维护复杂</strong>：代码维护复杂，尤其是原生代码和H5页面频繁变动时。</li><li><strong>浏览器兼容性</strong>：不同浏览器对注入代码的支持可能有所不同。</li></ol><h3 id="postMessage"><a href="#postMessage" class="headerlink" title="postMessage"></a><code>postMessage</code></h3><h4 id="优点：-1"><a href="#优点：-1" class="headerlink" title="优点："></a>优点：</h4><ol><li><strong>安全性高</strong>：通过消息传递的方式进行交互，安全性较高，不容易被恶意代码利用。</li><li><strong>标准化</strong>：<code>postMessage</code>是HTML5标准的一部分，具有较好的跨浏览器兼容性。</li><li><strong>易于调试和维护</strong>：消息传递方式使得代码逻辑更加清晰，易于调试和维护。</li></ol><h4 id="缺点：-1"><a href="#缺点：-1" class="headerlink" title="缺点："></a>缺点：</h4><ol><li><strong>性能影响</strong>：在高频率消息传递的情况下，可能会有性能影响。</li><li><strong>依赖API</strong>：需要H5页面和原生代码都支持<code>postMessage</code> API。</li><li><strong>有限的控制力</strong>：相比直接注入代码，控制力稍弱，只能通过消息进行交互。</li></ol><h3 id="如何选择？"><a href="#如何选择？" class="headerlink" title="如何选择？"></a>如何选择？</h3><p>选择哪种方法取决于具体的应用场景和需求：</p><ol><li><strong>安全性优先</strong>：如果安全性是首要考虑因素，建议使用<code>postMessage</code>，因为这种方法更安全，不容易被恶意代码利用。</li><li><strong>高频交互</strong>：如果需要高频率的交互，且对性能要求较高，可以考虑注入方式，但要特别注意代码的安全性和浏览器兼容性。</li><li><strong>跨浏览器兼容</strong>：如果需要在多个浏览器中运行，并且希望代码易于维护和调试，<code>postMessage</code>是更好的选择。</li><li><strong>快速开发</strong>：如果需要快速实现功能，且不考虑长远的维护和安全性问题，注入方式可能会更快捷。</li></ol><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>综合来看，<code>postMessage</code>在大多数情况下是更优的选择，特别是在考虑安全性、标准化和易于维护的情况下。但在某些特定场景下，比如需要高频率的交互或者对H5页面进行强控制时，注入方式也不失为一个可选方案。最终的选择应根据具体的项目需求和开发环境来决定。</p><p>3.有没有关注过业务指标，技术手段提升业务指标的情况？收银台支付成功率？</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;度小满&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="面试题" scheme="http://soso.wiki/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试" scheme="http://soso.wiki/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="度小满" scheme="http://soso.wiki/tags/%E5%BA%A6%E5%B0%8F%E6%BB%A1/"/>
    
  </entry>
  
  <entry>
    <title>瓴岳科技</title>
    <link href="http://soso.wiki/%E7%93%B4%E5%B2%B3%E7%A7%91%E6%8A%80/"/>
    <id>http://soso.wiki/瓴岳科技/</id>
    <published>2024-08-05T03:00:00.000Z</published>
    <updated>2024-08-07T07:39:54.396Z</updated>
    
    <content type="html"><![CDATA[<p>瓴岳科技<br><a id="more"></a></p><p>1.SDK 体积优化</p><p>2.webView 加载速度优化，H5 怎么加载本地 JS/图片资源</p><p>3.线上监控，卡顿、内存</p><p>4.Runloop 有几个 mode？</p><p>5.项目里有用到常驻线程吗？</p><p>6.KVO 原理</p><p>7.IMP、selector、SEL 含义和区别</p><p>8.消息转发机制的优劣，和直接调用相比</p><p>9.点击界面上的一个按钮，发生了什么？</p><p>10.SQLite3 和 Realm 的区别？</p><p>11.Category 和 Extension 的区别</p><p>12.Block 的本质，结构体里有哪些东西？内存管理</p><p>13.为什么要在主线程刷新 UI</p><p>14.Swift 中 Result 类型</p><p>15.二叉树的翻转</p><p><a href="https://leetcode.cn/problems/invert-binary-tree/" target="_blank" rel="noopener">226. 翻转二叉树</a></p><h2 id="参考答案"><a href="#参考答案" class="headerlink" title="参考答案"></a>参考答案</h2><p>(GPT)</p><h2 id="1-SDK体积优化"><a href="#1-SDK体积优化" class="headerlink" title="1.SDK体积优化"></a>1.SDK体积优化</h2><p>优化iOS SDK体积对于提升应用性能、减少下载时间以及节省用户设备存储空间都非常重要。以下是一些有效的方法来优化iOS SDK的体积：</p><h3 id="1-移除不必要的架构"><a href="#1-移除不必要的架构" class="headerlink" title="1. 移除不必要的架构"></a>1. 移除不必要的架构</h3><ul><li><p>只保留所需的架构：在构建SDK时，移除不必要的架构，例如x86_64和i386（模拟器架构），只保留arm64（实际设备架构）。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lipo -remove x86_64 YourSDK.framework/YourSDK -o YourSDK.framework/YourSDK</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-减少资源文件"><a href="#2-减少资源文件" class="headerlink" title="2. 减少资源文件"></a>2. 减少资源文件</h3><ul><li><strong>移除未使用的资源</strong>：移除未使用的图片、音频、视频等资源文件。</li><li><strong>压缩资源文件</strong>：使用工具（如ImageOptim）压缩图片文件，使用合适的编码格式压缩音频和视频文件。</li></ul><h3 id="3-使用符号表压缩"><a href="#3-使用符号表压缩" class="headerlink" title="3. 使用符号表压缩"></a>3. 使用符号表压缩</h3><ul><li><p>压缩符号表：通过strip工具压缩符号表以减少二进制文件的体积。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strip -S YourSDK.framework/YourSDK</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-代码优化"><a href="#4-代码优化" class="headerlink" title="4. 代码优化"></a>4. 代码优化</h3><ul><li><strong>移除未使用代码</strong>：通过代码分析工具（如Xcode的静态分析功能）查找并移除未使用的代码。</li><li><strong>模块化</strong>：将SDK拆分成多个模块，只在需要时引入特定模块。</li></ul><h3 id="5-使用Swift-Package-Manager"><a href="#5-使用Swift-Package-Manager" class="headerlink" title="5. 使用Swift Package Manager"></a>5. 使用Swift Package Manager</h3><ul><li><strong>Swift Package Manager (SPM)</strong>：使用SPM来管理和分发SDK，可以显著减少SDK的体积，因为SPM只会下载和编译所需的代码。</li></ul><h3 id="6-动态库-vs-静态库"><a href="#6-动态库-vs-静态库" class="headerlink" title="6. 动态库 vs 静态库"></a>6. 动态库 vs 静态库</h3><ul><li><strong>选择合适的库类型</strong>：在某些情况下，使用动态库（.dylib或.framework）可以减少整体应用的体积，因为它们可以被多个应用共享。</li></ul><h3 id="7-编译优化"><a href="#7-编译优化" class="headerlink" title="7. 编译优化"></a>7. 编译优化</h3><ul><li><p>优化编译设置：在Xcode中，确保在Release配置下选择优化选项（如-Oz）以减少代码体积。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Build Settings -&gt; Optimization Level -&gt; Optimize for Size [-Oz]</span><br></pre></td></tr></table></figure></li></ul><h3 id="8-引用第三方库优化"><a href="#8-引用第三方库优化" class="headerlink" title="8. 引用第三方库优化"></a>8. 引用第三方库优化</h3><ul><li><strong>移除未使用的第三方库</strong>：确保只包含那些在SDK中实际使用的第三方库。</li><li><strong>使用轻量级的第三方库</strong>：选择功能相同但体积更小的第三方库。</li></ul><h3 id="9-符号混淆"><a href="#9-符号混淆" class="headerlink" title="9. 符号混淆"></a>9. 符号混淆</h3><ul><li><strong>符号混淆</strong>：使用符号混淆工具（如llvm-obfuscator）混淆符号表以减少符号表大小和提高代码安全性。</li></ul><p>通过以上方法，您可以显著减少iOS SDK的体积，从而提升用户体验和应用的整体性能。</p><h2 id="2-webView加载速度优化，H5怎么加载本地JS-图片资源"><a href="#2-webView加载速度优化，H5怎么加载本地JS-图片资源" class="headerlink" title="2.webView加载速度优化，H5怎么加载本地JS/图片资源"></a>2.webView加载速度优化，H5怎么加载本地JS/图片资源</h2><p><a href="https://blog.cnbang.net/tech/3477/" target="_blank" rel="noopener">移动 H5 首屏秒开优化方案探讨</a></p><p><a href="https://tech.meituan.com/2017/06/09/webviewperf.html" target="_blank" rel="noopener">WebView性能、体验分析与优化</a></p><h2 id="3-线上监控，卡顿、内存"><a href="#3-线上监控，卡顿、内存" class="headerlink" title="3.线上监控，卡顿、内存"></a>3.线上监控，卡顿、内存</h2><h2 id="4-Runloop有几个mode？"><a href="#4-Runloop有几个mode？" class="headerlink" title="4.Runloop有几个mode？"></a>4.Runloop有几个mode？</h2><p>最常用的模式主要是以下几个：</p><ul><li><code>NSDefaultRunLoopMode</code> / <code>kCFRunLoopDefaultMode</code></li><li><code>UITrackingRunLoopMode</code></li><li><code>NSRunLoopCommonModes</code> / <code>kCFRunLoopCommonModes</code></li></ul><h2 id="5-项目里有用到常驻线程吗？"><a href="#5-项目里有用到常驻线程吗？" class="headerlink" title="5.项目里有用到常驻线程吗？"></a>5.项目里有用到常驻线程吗？</h2><h2 id="6-KVO原理"><a href="#6-KVO原理" class="headerlink" title="6.KVO原理"></a>6.KVO原理</h2><h3 id="KVO-基本概念"><a href="#KVO-基本概念" class="headerlink" title="KVO 基本概念"></a>KVO 基本概念</h3><p>KVO 允许对象观察另一个对象的某个属性，当该属性发生变化时，观察者会收到通知。通常，KVO 的使用分为以下几个步骤：</p><ol><li><strong>注册观察者</strong>：使用 <code>addObserver:forKeyPath:options:context:</code> 方法注册观察者。</li><li><strong>实现回调方法</strong>：实现 <code>observeValueForKeyPath:ofObject:change:context:</code> 方法来处理属性变化。</li><li><strong>移除观察者</strong>：使用 <code>removeObserver:forKeyPath:</code> 方法移除观察者。</li></ol><h3 id="KVO-工作原理"><a href="#KVO-工作原理" class="headerlink" title="KVO 工作原理"></a>KVO 工作原理</h3><p>KVO 的实现主要依赖于 Objective-C 的运行时机制，具体步骤如下：</p><ol><li><strong>动态创建子类</strong><br>当你为某个对象的某个属性注册观察者时，Objective-C 运行时会动态创建该对象的一个子类（通常以 <code>NSKVONotifying_</code> 为前缀），并将该对象的类指针（<code>isa</code> 指针）指向这个新创建的子类。</li><li><strong>重写属性的 setter 方法</strong><br>在这个新创建的子类中，Objective-C 运行时会重写被观察属性的 setter 方法。例如，如果你观察的是 <code>name</code> 属性，KVO 会重写 <code>setName:</code> 方法。</li><li><strong>通知观察者</strong><br>在重写的 setter 方法中，KVO 会插入一些钩子代码，在属性值变更前后调用 <code>willChangeValueForKey:</code> 和 <code>didChangeValueForKey:</code> 方法。这些方法用于通知观察者属性即将改变和已经改变。</li><li><strong>调用观察者的回调方法</strong><br><code>didChangeValueForKey:</code> 方法会触发 KVO 通知机制，最终调用观察者的 <code>observeValueForKeyPath:ofObject:change:context:</code> 方法。</li></ol><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li><strong>移除观察者</strong>：在对象释放之前，一定要移除所有的观察者，否则会导致崩溃。</li><li><strong>线程安全</strong>：KVO 通知是同步的，意味着属性的 setter 方法会在观察者的回调方法完成之后才返回。确保观察者的回调方法是线程安全的非常重要。</li><li><strong>KVO-compliant</strong>：确保属性遵循 KVO 协议，即通过 setter 方法（而不是直接修改实例变量）来改变属性的值。</li><li><strong>自动和手动通知</strong>：默认情况下，KVO 是自动通知的。你也可以通过重写 <code>automaticallyNotifiesObserversForKey:</code> 方法来禁用自动通知，并手动调用 <code>willChangeValueForKey:</code> 和 <code>didChangeValueForKey:</code>。</li></ol><h2 id="7-IMP、selector、SEL含义和区别"><a href="#7-IMP、selector、SEL含义和区别" class="headerlink" title="7.IMP、selector、SEL含义和区别"></a>7.IMP、selector、SEL含义和区别</h2><ol><li><strong>SEL（selector）</strong><ul><li><code>SEL</code> 或 <code>selector</code> 是方法的唯一标识符。</li><li>在编译时，编译器会将方法名称映射为一个 <code>SEL</code> 类型的选择器。</li><li>选择器用于在运行时查找方法的实现。</li></ul></li><li><strong>IMP</strong><ul><li><code>IMP</code> 是一个函数指针，指向方法的实际实现。</li><li>当你发送消息给对象时，运行时系统会根据 <code>SEL</code> 找到对应的 <code>IMP</code>，然后调用它。</li><li>直接调用 <code>IMP</code> 可以略过消息传递机制，提高性能。</li></ul></li></ol><h2 id="8-消息转发机制的优劣，和直接调用相比"><a href="#8-消息转发机制的优劣，和直接调用相比" class="headerlink" title="8.消息转发机制的优劣，和直接调用相比"></a>8.消息转发机制的优劣，和直接调用相比</h2><ol><li><strong>性能</strong><ul><li><strong>直接调用方法</strong>：最快，因为编译器在编译时已经确定了方法的实现。</li><li><strong>消息传递机制</strong>：稍慢，因为需要在运行时查找方法的实现。</li><li><strong>消息转发机制</strong>：最慢，因为涉及多个步骤来处理未知消息。</li></ul></li><li><strong>灵活性</strong><ul><li><strong>直接调用方法</strong>：灵活性最低，因为方法实现是静态绑定的。</li><li><strong>消息传递机制</strong>：灵活性较高，可以在运行时动态查找和调用方法。</li><li><strong>消息转发机制</strong>：灵活性最高，可以在运行时动态处理未知消息，甚至可以将消息转发给其他对象。</li></ul></li><li><strong>使用场景</strong><ul><li><strong>直接调用方法</strong>：适用于性能关键的代码，方法实现是确定的。</li><li><strong>消息传递机制</strong>：适用于需要一些动态特性的代码。</li><li><strong>消息转发机制</strong>：适用于需要高度动态性和灵活性的代码，例如代理模式、消息路由等。</li></ul></li></ol><h2 id="9-点击界面上的一个按钮，发生了什么？"><a href="#9-点击界面上的一个按钮，发生了什么？" class="headerlink" title="9.点击界面上的一个按钮，发生了什么？"></a>9.点击界面上的一个按钮，发生了什么？</h2><h3 id="响应者链（Responder-Chain）"><a href="#响应者链（Responder-Chain）" class="headerlink" title="响应者链（Responder Chain）"></a>响应者链（Responder Chain）</h3><p>响应者链是一个由 <code>UIResponder</code> 对象组成的链条，这些对象可以响应和处理事件。<code>UIView</code>, <code>UIViewController</code>, <code>UIWindow</code>, 以及 <code>UIApplication</code> 都是 <code>UIResponder</code> 的子类。</p><h4 id="事件传递和响应者链"><a href="#事件传递和响应者链" class="headerlink" title="事件传递和响应者链"></a>事件传递和响应者链</h4><ol><li><strong>触摸事件的产生</strong>：当用户点击屏幕时，硬件会捕捉到这个触摸事件，并将其传递给 iOS 系统。</li><li><strong>创建 UIEvent 对象</strong>：iOS 系统会将触摸数据封装成一个 <code>UIEvent</code> 对象。</li><li><strong>事件传递给 UIWindow</strong>：系统会将这个 <code>UIEvent</code> 传递给应用的主 <code>UIWindow</code>。</li><li><strong>找到第一响应者</strong>：<code>UIWindow</code> 会调用 <code>hitTest:withEvent:</code> 方法，从视图层次结构中找出最合适的视图来处理这个触摸事件。这个视图成为第一响应者。</li><li><strong>事件传递给 UIView</strong>：触摸事件会被传递给找到的视图（通常是一个 <code>UIButton</code>），并调用其 <code>touchesBegan:withEvent:</code>, <code>touchesMoved:withEvent:</code>, <code>touchesEnded:withEvent:</code> 方法来处理具体的触摸事件。</li></ol><h3 id="手势识别器的优先级"><a href="#手势识别器的优先级" class="headerlink" title="手势识别器的优先级"></a>手势识别器的优先级</h3><p>手势识别器（Gesture Recognizer）在 iOS 的事件处理机制中具有较高的优先级。具体来说，手势识别器会先接收到触摸事件，并尝试识别是否是自己关心的手势。如果手势识别器识别成功，那么它会处理该事件并阻止事件继续传递给响应者链。</p><h3 id="具体的事件传递顺序"><a href="#具体的事件传递顺序" class="headerlink" title="具体的事件传递顺序"></a>具体的事件传递顺序</h3><ol><li><strong>触摸事件产生</strong>：用户触摸屏幕，触摸事件被硬件捕获并传递给 iOS 系统。</li><li><strong>创建 UIEvent 对象</strong>：iOS 系统将触摸数据封装成一个 <code>UIEvent</code> 对象。</li><li><strong>事件传递给 UIWindow</strong>：系统将此 <code>UIEvent</code> 对象传递给应用的主 <code>UIWindow</code>。</li><li><strong>手势识别器检测</strong>：<code>UIWindow</code> 会先将触摸事件传递给视图层次结构中相关视图的手势识别器。如果有手势识别器检测到手势并识别成功，那么该手势识别器会处理该事件，并阻止事件继续传递。</li><li><strong>事件传递给响应者链</strong>：如果手势识别器没有处理该事件，那么事件将按照响应者链的机制传递。响应者链会从最合适的视图开始处理触摸事件，调用相关的 <code>touchesBegan:withEvent:</code>, <code>touchesMoved:withEvent:</code>, <code>touchesEnded:withEvent:</code> 方法。</li></ol><h2 id="10-SQLite3和Realm的区别？"><a href="#10-SQLite3和Realm的区别？" class="headerlink" title="10.SQLite3和Realm的区别？"></a>10.SQLite3和Realm的区别？</h2><h3 id="1-数据库类型"><a href="#1-数据库类型" class="headerlink" title="1. 数据库类型"></a>1. 数据库类型</h3><ul><li><strong>SQLite3</strong>: SQLite 是一个轻量级的关系型数据库管理系统，遵循 SQL 标准。它使用 SQL 语言进行数据操作，支持复杂的查询和事务处理。</li><li><strong>Realm</strong>: Realm 是一个面向对象的数据库，旨在简化数据存储和查询过程。它不使用 SQL，而是通过对象模型进行数据操作。</li></ul><h3 id="2-数据模型"><a href="#2-数据模型" class="headerlink" title="2. 数据模型"></a>2. 数据模型</h3><ul><li><strong>SQLite3</strong>: 使用关系型数据模型，数据存储在表中，表包含行和列。数据操作通过 SQL 查询语句完成。</li><li><strong>Realm</strong>: 使用面向对象的数据模型，数据存储在对象中。你可以直接通过对象属性进行查询和操作，这使得代码更加直观和简洁。</li></ul><h3 id="3-性能"><a href="#3-性能" class="headerlink" title="3. 性能"></a>3. 性能</h3><ul><li><strong>SQLite3</strong>: 通常在处理非常复杂的查询或需要高度自定义的查询时性能较好。SQLite3 的性能可能会受到 SQL 查询复杂性的影响。</li><li><strong>Realm</strong>: 由于其设计面向移动设备，通常在读写性能上表现优异，尤其是对于常见的、简单的查询操作。Realm 还提供了对多线程的支持，以提高并发性能。</li></ul><h3 id="4-数据迁移"><a href="#4-数据迁移" class="headerlink" title="4. 数据迁移"></a>4. 数据迁移</h3><ul><li><strong>SQLite3</strong>: 数据库迁移通常需要手动编写 SQL 脚本来修改表结构，这可能会比较繁琐。</li><li><strong>Realm</strong>: 提供了内置的数据迁移机制，可以通过代码来定义迁移步骤，这使得数据迁移过程更加方便和安全。</li></ul><h3 id="5-易用性"><a href="#5-易用性" class="headerlink" title="5. 易用性"></a>5. 易用性</h3><ul><li><strong>SQLite3</strong>: 由于使用 SQL 语言，开发者需要了解 SQL 语法和关系型数据库的基本概念。数据模型的改变通常需要手动修改表结构。</li><li><strong>Realm</strong>: 提供了面向对象的 API，使用起来更加直观。开发者不需要学习 SQL，只需操作对象模型即可。</li></ul><h3 id="6-数据同步"><a href="#6-数据同步" class="headerlink" title="6. 数据同步"></a>6. 数据同步</h3><ul><li><strong>SQLite3</strong>: 本身不提供数据同步功能。如果需要在不同设备间同步数据，通常需要额外的服务器支持。</li><li><strong>Realm</strong>: 提供了 Realm Cloud 服务，可以实现数据的实时同步和离线访问，适合需要多设备数据同步的应用。</li></ul><h3 id="7-文件大小和存储方式"><a href="#7-文件大小和存储方式" class="headerlink" title="7. 文件大小和存储方式"></a>7. 文件大小和存储方式</h3><ul><li><strong>SQLite3</strong>: 数据存储在单个文件中，文件大小会随着数据量的增加而增加。SQLite3 支持多种数据类型和存储格式。</li><li><strong>Realm</strong>: 数据也存储在单个文件中，但由于其高效的存储格式和压缩机制，通常文件大小较小。Realm 对于对象模型的存储进行了优化，减少了数据的冗余。</li></ul><h3 id="8-加密和安全性"><a href="#8-加密和安全性" class="headerlink" title="8. 加密和安全性"></a>8. 加密和安全性</h3><ul><li><strong>SQLite3</strong>: 支持加密，但需要使用第三方库（如 SQLCipher）来实现。</li><li><strong>Realm</strong>: 内置支持加密，可以方便地加密整个数据库文件，提高数据安全性。</li></ul><h3 id="9-多平台支持"><a href="#9-多平台支持" class="headerlink" title="9. 多平台支持"></a>9. 多平台支持</h3><ul><li><strong>SQLite3</strong>: 支持几乎所有的平台，包括 iOS、Android、Windows、Linux 等。因为其广泛的支持和成熟度，SQLite 是一个非常可靠的选择。</li><li><strong>Realm</strong>: 也支持多平台，包括 iOS、Android、React Native 等。Realm 提供的 API 在不同平台上保持一致性，便于跨平台开发。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><strong>SQLite3</strong>: 适合需要复杂查询、事务处理和高度自定义的应用，尤其是那些开发者已经熟悉 SQL 语言的情况。</li><li><strong>Realm</strong>: 适合需要高性能、简单易用和面向对象的数据存储解决方案，特别是移动应用开发。</li></ul><h2 id="11-Category和Extension的区别"><a href="#11-Category和Extension的区别" class="headerlink" title="11.Category和Extension的区别"></a>11.Category和Extension的区别</h2><table><thead><tr><th>特性</th><th>Category</th><th>Extension</th></tr></thead><tbody><tr><td>定义和用途</td><td>为现有类添加方法</td><td>在实现文件中添加私有方法和属性</td></tr><tr><td>实例变量</td><td>不能添加</td><td>可以添加</td></tr><tr><td>访问控制</td><td>方法是公开的</td><td>方法和属性是私有的</td></tr><tr><td>编译时机</td><td>动态加载，在运行时添加</td><td>编译时添加，类定义的一部分</td></tr><tr><td>使用场景</td><td>将类的方法划分到多个文件，为系统类添加方法</td><td>在实现文件中定义私有方法和属性，提高封装性</td></tr></tbody></table><h2 id="12-Block的本质，结构体里有哪些东西？内存管理"><a href="#12-Block的本质，结构体里有哪些东西？内存管理" class="headerlink" title="12.Block的本质，结构体里有哪些东西？内存管理"></a>12.Block的本质，结构体里有哪些东西？内存管理</h2><h3 id="Block-的本质"><a href="#Block-的本质" class="headerlink" title="Block 的本质"></a>Block 的本质</h3><p>在底层，<code>Block</code> 是一个封装了函数指针、捕获变量及其他相关信息的结构体。可以通过 Clang 提供的编译器选项 <code>-rewrite-objc</code> 将 Objective-C 代码转换为纯 C++ 代码，来查看 <code>Block</code> 的具体实现。</p><p>例如，以下是一个简单的 <code>Block</code> 声明和使用：</p><figure class="highlight objc hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">void</span> (^simpleBlock)(<span class="hljs-keyword">void</span>) = ^&#123;</span><br><span class="line">    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@"This is a simple block"</span>);</span><br><span class="line">&#125;;</span><br><span class="line">simpleBlock();</span><br></pre></td></tr></table></figure><p>使用 <code>-rewrite-objc</code> 将其转换为 C++ 代码后，可以看到 <code>Block</code> 的底层实现。</p><h3 id="Block-的结构体"><a href="#Block-的结构体" class="headerlink" title="Block 的结构体"></a>Block 的结构体</h3><p>在底层，<code>Block</code> 是一个结构体，通常包含以下几个部分：</p><ol><li><strong>isa 指针</strong>：指向 <code>Block</code> 的类对象，用于实现 Objective-C 的动态特性。</li><li><strong>flags</strong>：标志位，指示 <code>Block</code> 的一些特性（如是否需要复制、是否包含捕获变量等）。</li><li><strong>reserved</strong>：保留字段，通常用于内存对齐。</li><li><strong>invoke 指针</strong>：指向实际执行 <code>Block</code> 代码的函数指针。</li><li><strong>descriptor 指针</strong>：指向 <code>Block</code> 的描述信息，包括 <code>Block</code> 的大小、拷贝和释放函数等。</li><li><strong>捕获变量</strong>：如果 <code>Block</code> 捕获了外部变量，这些变量会被存储在结构体中。</li></ol><p>具体的结构体定义可能如下所示：</p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> __<span class="hljs-title">block_impl</span> &#123;</span></span><br><span class="line">    <span class="hljs-keyword">void</span> *isa;</span><br><span class="line">    <span class="hljs-keyword">int</span> flags;</span><br><span class="line">    <span class="hljs-keyword">int</span> reserved;</span><br><span class="line">    <span class="hljs-keyword">void</span> (*invoke)(<span class="hljs-keyword">void</span> *, ...);</span><br><span class="line">    <span class="hljs-class"><span class="hljs-keyword">struct</span> __<span class="hljs-title">block_descriptor</span> *<span class="hljs-title">descriptor</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> __<span class="hljs-title">block_descriptor</span> &#123;</span></span><br><span class="line">    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> reserved;</span><br><span class="line">    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> size;</span><br><span class="line">    <span class="hljs-keyword">void</span> (*copy)(<span class="hljs-keyword">void</span> *dst, <span class="hljs-keyword">void</span> *src);</span><br><span class="line">    <span class="hljs-keyword">void</span> (*dispose)(<span class="hljs-keyword">void</span> *src);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Block-的内存管理"><a href="#Block-的内存管理" class="headerlink" title="Block 的内存管理"></a>Block 的内存管理</h3><p><code>Block</code> 的内存管理涉及到以下几个方面：</p><ol><li><strong>栈上的 Block</strong>：默认情况下，<code>Block</code> 是在栈上分配的。这意味着它的生命周期是有限的，当超出其作用域时，<code>Block</code> 会被销毁。如果试图在作用域外使用该 <code>Block</code>，会导致崩溃。</li><li><strong>堆上的 Block</strong>：为了让 <code>Block</code> 在作用域外仍然有效，可以将其复制到堆上。可以使用 <code>Block_copy</code> 函数或 <code>^</code> 运算符来实现这一点。在 ARC 环境下，直接赋值给 <code>__strong</code> 类型的变量时，<code>Block</code> 会自动复制到堆上。</li><li><strong>捕获变量的内存管理</strong>：<code>Block</code> 可以捕获其作用域中的变量，包括自动变量（局部变量）和静态变量。捕获变量的内存管理取决于变量的类型：<ul><li>对于自动变量，<code>Block</code> 会将其值拷贝到 <code>Block</code> 的结构体中。</li><li>对于对象类型的变量，<code>Block</code> 会对其进行 <code>retain</code> 操作（在 ARC 下），以确保 <code>Block</code> 的生命周期内变量仍然有效。</li></ul></li></ol><h2 id="13-为什么要在主线程刷新UI"><a href="#13-为什么要在主线程刷新UI" class="headerlink" title="13.为什么要在主线程刷新UI"></a>13.为什么要在主线程刷新UI</h2><p>在 iOS 和 macOS 开发中，所有的 UI 更新必须在主线程（也称为主队列）上执行。以下是为什么需要在主线程刷新 UI 的几个原因：</p><h3 id="1-UIKit-和-AppKit-的线程安全性"><a href="#1-UIKit-和-AppKit-的线程安全性" class="headerlink" title="1. UIKit 和 AppKit 的线程安全性"></a>1. UIKit 和 AppKit 的线程安全性</h3><ul><li>单线程设计：<ul><li>UIKit（iOS 的 UI 框架）和 AppKit（macOS 的 UI 框架）是设计为非线程安全的。它们的大多数 API 都假定是在主线程上调用的。</li><li>这是因为 UI 操作通常涉及到大量复杂的内部状态管理和绘图操作，确保所有这些操作在一个单一线程上可以避免并发问题。</li></ul></li></ul><h3 id="2-数据一致性和线程同步"><a href="#2-数据一致性和线程同步" class="headerlink" title="2. 数据一致性和线程同步"></a>2. 数据一致性和线程同步</h3><ul><li>数据一致性：<ul><li>如果多个线程同时操作 UI 组件，可能会导致不一致的 UI 状态。例如，一个线程正在修改视图的属性，而另一个线程正在试图渲染视图，这可能会导致崩溃或未定义行为。</li></ul></li><li>线程同步：<ul><li>多线程操作 UI 需要额外的同步机制来防止并发访问冲突。使用主线程可以简化这种同步需求，使代码更容易维护和理解。</li></ul></li></ul><h3 id="3-事件处理模型"><a href="#3-事件处理模型" class="headerlink" title="3. 事件处理模型"></a>3. 事件处理模型</h3><ul><li>事件循环：<ul><li>iOS 和 macOS 应用程序的主线程运行一个事件循环，处理用户交互、定时器、网络响应等各种事件。UI 更新也是事件循环的一部分。</li><li>通过将所有 UI 操作放在主线程上，确保了事件处理的顺序性和一致性。</li></ul></li></ul><h3 id="4-用户体验"><a href="#4-用户体验" class="headerlink" title="4. 用户体验"></a>4. 用户体验</h3><ul><li>平滑的 UI 动画和响应：<ul><li>在主线程上更新 UI 可以确保动画的平滑性和用户交互的及时响应。如果在后台线程更新 UI，可能会导致动画卡顿或延迟响应，影响用户体验。</li></ul></li><li>避免死锁：<ul><li>主线程上的操作是顺序执行的，这降低了发生死锁的风险。如果尝试在后台线程进行复杂的 UI 操作，可能会导致线程间的资源争用和死锁。</li></ul></li></ul><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>在主线程刷新 UI 是为了确保 UIKit 和 AppKit 的线程安全性、保持数据一致性和简化线程同步、遵循事件处理模型以及提供更好的用户体验。通过理解和遵循这些原则，可以避免许多潜在的并发问题和性能瓶颈，从而构建更稳定和高效的应用程序。</p><h2 id="14-Swift中Result类型"><a href="#14-Swift中Result类型" class="headerlink" title="14.Swift中Result类型"></a>14.Swift中Result类型</h2><p>在 Swift 中，<code>Result</code> 类型是一种用于表示操作结果的枚举，能够明确地表达成功和失败的情况。它的引入使得错误处理更加简洁和明确，特别是在异步操作和函数返回值中。</p><h3 id="Result-类型的定义"><a href="#Result-类型的定义" class="headerlink" title="Result 类型的定义"></a><code>Result</code> 类型的定义</h3><p><code>Result</code> 类型是一个泛型枚举，有两个可能的值：</p><ul><li><code>.success(Value)</code>：表示操作成功，并包含成功时的返回值。</li><li><code>.failure(Error)</code>：表示操作失败，并包含失败时的错误。</li></ul><p>以下是 <code>Result</code> 类型的定义：</p><figure class="highlight swift hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">Result</span>&lt;<span class="hljs-title">Success</span>, <span class="hljs-title">Failure</span>: <span class="hljs-title">Error</span>&gt; </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">case</span> success(<span class="hljs-type">Success</span>)</span><br><span class="line">    <span class="hljs-keyword">case</span> failure(<span class="hljs-type">Failure</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-Result-类型"><a href="#使用-Result-类型" class="headerlink" title="使用 Result 类型"></a>使用 <code>Result</code> 类型</h3><h4 id="定义一个返回-Result-类型的函数"><a href="#定义一个返回-Result-类型的函数" class="headerlink" title="定义一个返回 Result 类型的函数"></a>定义一个返回 <code>Result</code> 类型的函数</h4><p>假设我们有一个函数，用于从服务器获取数据，该函数可以成功返回数据，也可能因为网络错误而失败：</p><figure class="highlight swift hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">NetworkError</span>: <span class="hljs-title">Error</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">case</span> badURL</span><br><span class="line">    <span class="hljs-keyword">case</span> requestFailed</span><br><span class="line">    <span class="hljs-keyword">case</span> unknown</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">fetchData</span><span class="hljs-params">(from urlString: String, completion: <span class="hljs-params">(Result&lt;Data, NetworkError&gt;)</span></span></span> -&gt; <span class="hljs-type">Void</span>) &#123;</span><br><span class="line">    <span class="hljs-keyword">guard</span> <span class="hljs-keyword">let</span> url = <span class="hljs-type">URL</span>(string: urlString) <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">        completion(.failure(.badURL))</span><br><span class="line">        <span class="hljs-keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-type">URLSession</span>.shared.dataTask(with: url) &#123; data, response, error <span class="hljs-keyword">in</span></span><br><span class="line">        <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> <span class="hljs-number">_</span> = error &#123;</span><br><span class="line">            completion(.failure(.requestFailed))</span><br><span class="line">        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> data = data &#123;</span><br><span class="line">            completion(.success(data))</span><br><span class="line">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">            completion(.failure(.unknown))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;.resume()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="调用并处理-Result"><a href="#调用并处理-Result" class="headerlink" title="调用并处理 Result"></a>调用并处理 <code>Result</code></h4><p>调用 <code>fetchData</code> 函数，并处理返回的 <code>Result</code>：</p><figure class="highlight swift hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">fetchData(from: <span class="hljs-string">"https://example.com"</span>) &#123; result <span class="hljs-keyword">in</span></span><br><span class="line">    <span class="hljs-keyword">switch</span> result &#123;</span><br><span class="line">    <span class="hljs-keyword">case</span> .success(<span class="hljs-keyword">let</span> data):</span><br><span class="line">        <span class="hljs-comment">// 处理成功情况</span></span><br><span class="line">        <span class="hljs-built_in">print</span>(<span class="hljs-string">"Data received: \(data)"</span>)</span><br><span class="line">    <span class="hljs-keyword">case</span> .failure(<span class="hljs-keyword">let</span> error):</span><br><span class="line">        <span class="hljs-comment">// 处理失败情况</span></span><br><span class="line">        <span class="hljs-keyword">switch</span> error &#123;</span><br><span class="line">        <span class="hljs-keyword">case</span> .badURL:</span><br><span class="line">            <span class="hljs-built_in">print</span>(<span class="hljs-string">"Bad URL"</span>)</span><br><span class="line">        <span class="hljs-keyword">case</span> .requestFailed:</span><br><span class="line">            <span class="hljs-built_in">print</span>(<span class="hljs-string">"Request failed"</span>)</span><br><span class="line">        <span class="hljs-keyword">case</span> .unknown:</span><br><span class="line">            <span class="hljs-built_in">print</span>(<span class="hljs-string">"Unknown error"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Result-类型的便利方法"><a href="#Result-类型的便利方法" class="headerlink" title="Result 类型的便利方法"></a><code>Result</code> 类型的便利方法</h3><p>Swift 提供了一些便利方法来处理 <code>Result</code> 类型，包括 <code>map</code>、<code>flatMap</code>、<code>mapError</code> 和 <code>flatMapError</code>。</p><h4 id="map-方法"><a href="#map-方法" class="headerlink" title="map 方法"></a><code>map</code> 方法</h4><p><code>map</code> 方法可以将 <code>Result</code> 中的成功值转换为另一种类型：</p><figure class="highlight swift hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> result: <span class="hljs-type">Result</span>&lt;<span class="hljs-type">Int</span>, <span class="hljs-type">NetworkError</span>&gt; = .success(<span class="hljs-number">42</span>)</span><br><span class="line"><span class="hljs-keyword">let</span> stringResult = result.<span class="hljs-built_in">map</span> &#123; value <span class="hljs-keyword">in</span></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-string">"The answer is \(value)"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// stringResult 是 Result&lt;String, NetworkError&gt;.success("The answer is 42")</span></span><br></pre></td></tr></table></figure><h4 id="flatMap-方法"><a href="#flatMap-方法" class="headerlink" title="flatMap 方法"></a><code>flatMap</code> 方法</h4><p><code>flatMap</code> 方法用于将 <code>Result</code> 中的成功值转换为另一个 <code>Result</code>：</p><figure class="highlight swift hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> result: <span class="hljs-type">Result</span>&lt;<span class="hljs-type">Int</span>, <span class="hljs-type">NetworkError</span>&gt; = .success(<span class="hljs-number">42</span>)</span><br><span class="line"><span class="hljs-keyword">let</span> newResult = result.flatMap &#123; value <span class="hljs-keyword">in</span></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-type">Result</span>&lt;<span class="hljs-type">String</span>, <span class="hljs-type">NetworkError</span>&gt;.success(<span class="hljs-string">"The answer is \(value)"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// newResult 是 Result&lt;String, NetworkError&gt;.success("The answer is 42")</span></span><br></pre></td></tr></table></figure><h4 id="mapError-方法"><a href="#mapError-方法" class="headerlink" title="mapError 方法"></a><code>mapError</code> 方法</h4><p><code>mapError</code> 方法用于将 <code>Result</code> 中的错误值转换为另一种错误类型：</p><figure class="highlight swift hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> result: <span class="hljs-type">Result</span>&lt;<span class="hljs-type">Int</span>, <span class="hljs-type">NetworkError</span>&gt; = .failure(.badURL)</span><br><span class="line"><span class="hljs-keyword">let</span> newResult = result.mapError &#123; error <span class="hljs-keyword">in</span></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-type">MyCustomError</span>.networkError(error)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// newResult 是 Result&lt;Int, MyCustomError&gt;.failure(.networkError(.badURL))</span></span><br></pre></td></tr></table></figure><h4 id="flatMapError-方法"><a href="#flatMapError-方法" class="headerlink" title="flatMapError 方法"></a><code>flatMapError</code> 方法</h4><p><code>flatMapError</code> 方法用于将 <code>Result</code> 中的错误值转换为另一个 <code>Result</code>：</p><figure class="highlight swift hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> result: <span class="hljs-type">Result</span>&lt;<span class="hljs-type">Int</span>, <span class="hljs-type">NetworkError</span>&gt; = .failure(.badURL)</span><br><span class="line"><span class="hljs-keyword">let</span> newResult = result.flatMapError &#123; error <span class="hljs-keyword">in</span></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-type">Result</span>&lt;<span class="hljs-type">Int</span>, <span class="hljs-type">MyCustomError</span>&gt;.failure(.networkError(error))</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// newResult 是 Result&lt;Int, MyCustomError&gt;.failure(.networkError(.badURL))</span></span><br></pre></td></tr></table></figure><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><p><code>Result</code> 类型在 Swift 中提供了一种优雅的方式来处理可能成功或失败的操作。通过明确地表达成功和失败的情况，<code>Result</code> 类型使得代码更加易读和可维护。借助 <code>map</code>、<code>flatMap</code>、<code>mapError</code> 和 <code>flatMapError</code> 等便利方法，可以更方便地处理 <code>Result</code> 类型的值。使用 <code>Result</code> 类型可以更好地管理错误处理，特别是在异步操作中。</p><h2 id="15-二叉树的翻转"><a href="#15-二叉树的翻转" class="headerlink" title="15.二叉树的翻转"></a>15.二叉树的翻转</h2><p><a href="https://leetcode.cn/problems/invert-binary-tree/" target="_blank" rel="noopener">226. 翻转二叉树</a></p><p>递归：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> invertTree = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">root</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (root === <span class="hljs-literal">null</span>) &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">const</span> left = invertTree(root.left);</span><br><span class="line">    <span class="hljs-keyword">const</span> right = invertTree(root.right);</span><br><span class="line">    root.left = right;</span><br><span class="line">    root.right = left;</span><br><span class="line">    <span class="hljs-keyword">return</span> root;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>迭代：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> invertTree = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">root</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">let</span> stack = [];</span><br><span class="line">    stack.push(root);</span><br><span class="line">    <span class="hljs-keyword">while</span> (stack.length) &#123;</span><br><span class="line">        <span class="hljs-keyword">let</span> node = stack.pop();</span><br><span class="line">        <span class="hljs-keyword">if</span> (node.left != <span class="hljs-literal">null</span>) &#123;</span><br><span class="line">            stack.push(node.left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">if</span> (node.right != <span class="hljs-literal">null</span>) &#123;</span><br><span class="line">            stack.push(node.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">let</span> temp = node.left;</span><br><span class="line">        node.left = node.right;</span><br><span class="line">        node.right = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> root;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;瓴岳科技&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="面试题" scheme="http://soso.wiki/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试" scheme="http://soso.wiki/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="瓴岳科技" scheme="http://soso.wiki/tags/%E7%93%B4%E5%B2%B3%E7%A7%91%E6%8A%80/"/>
    
  </entry>
  
  <entry>
    <title>去哪儿网</title>
    <link href="http://soso.wiki/%E5%8E%BB%E5%93%AA%E5%84%BF%E7%BD%91/"/>
    <id>http://soso.wiki/去哪儿网/</id>
    <published>2024-07-31T03:00:00.000Z</published>
    <updated>2024-08-07T07:39:50.610Z</updated>
    
    <content type="html"><![CDATA[<p>去哪儿网<br><a id="more"></a><br>1.项目</p><ul><li><p>降低三方 App 接入成本怎么做的？</p></li><li><p>加载速度优化怎么做的？主要是从业务逻辑纬度处理的？</p></li><li><p>异常监控怎么做的？</p></li><li><p>动态库版式缩放怎么实现的？</p></li></ul><p>2.线上闪退捕获怎么做的？有没有捕获不到的异常，watchdog 能捕获吗？APM 性能监控</p><p>3.RN 是怎么实现的？跨端还了解哪些？Flutter是怎么实现的，为什么说 Flutter 的性能比 RN 好？</p><p>4.H5 和原生通信有哪些方法？</p><p>5.怎么提升 webView 的加载速度，使其接近原生？大的图片、JS 等端上下载后，怎么交给H5使用</p><p>6.小程序是怎么实现的？</p><p>7.前端 JS 的异步是怎么实现的？</p><p>8.项目亮点</p><h2 id="参考答案"><a href="#参考答案" class="headerlink" title="参考答案"></a>参考答案</h2><p>(GPT)</p><h2 id="1-项目"><a href="#1-项目" class="headerlink" title="1.项目"></a>1.项目</h2><ul><li><p>降低三方 App 接入成本怎么做的？</p></li><li><p>加载速度优化怎么做的？主要是从业务逻辑纬度处理的？</p></li><li><p>异常监控怎么做的？</p></li><li><p>动态库版式缩放怎么实现的？</p></li></ul><h2 id="2-线上闪退捕获怎么做的？有没有捕获不到的异常，watchdog能捕获吗？APM-性能监控"><a href="#2-线上闪退捕获怎么做的？有没有捕获不到的异常，watchdog能捕获吗？APM-性能监控" class="headerlink" title="2.线上闪退捕获怎么做的？有没有捕获不到的异常，watchdog能捕获吗？APM 性能监控"></a>2.线上闪退捕获怎么做的？有没有捕获不到的异常，watchdog能捕获吗？APM 性能监控</h2><p><a href="https://www.jianshu.com/p/8123fc17fe0e" target="_blank" rel="noopener">移动端监控体系之技术原理剖析</a></p><p><a href="https://www.jianshu.com/p/29051908c74b" target="_blank" rel="noopener">iOS Crash 捕获及堆栈符号化思路剖析</a></p><p><a href="https://zhuanlan.zhihu.com/p/614227556" target="_blank" rel="noopener">知乎-iOS云音乐APM性能监控实践</a></p><h2 id="3-RN-是怎么实现的？跨端还了解哪些？Flutter-是怎么实现的，为什么说-Flutter-的性能比-RN-好？"><a href="#3-RN-是怎么实现的？跨端还了解哪些？Flutter-是怎么实现的，为什么说-Flutter-的性能比-RN-好？" class="headerlink" title="3.RN 是怎么实现的？跨端还了解哪些？Flutter 是怎么实现的，为什么说 Flutter 的性能比 RN 好？"></a>3.RN 是怎么实现的？跨端还了解哪些？Flutter 是怎么实现的，为什么说 Flutter 的性能比 RN 好？</h2><p>React Native 通过 JavaScript 和原生代码之间的桥接，实现了跨平台的移动应用开发。其核心是通过 Bridge 在 JavaScript 和原生线程之间进行通信，使用 React 构建用户界面，并通过 Yoga 引擎处理布局。这样，开发者可以使用熟悉的 JavaScript 和 React 技术栈来构建高性能的移动应用，同时享受原生性能和体验。</p><p>Flutter 通过使用 Dart 语言、Skia 图形引擎和自定义的渲染引擎，实现了跨平台的高性能应用开发。其核心是完全自行绘制界面，不依赖于平台的原生控件，提供了一种一致的开发体验和用户体验。Flutter 的 Widget 系统、渲染树、状态管理和平台通道等机制，使其能够高效地构建复杂的跨平台应用。</p><p>Flutter 和 React Native（RN）是两种流行的跨平台移动应用开发框架，各有其优点和缺点。性能是评估这两种框架的一个重要方面。以下是从多个角度对 Flutter 和 React Native 性能的比较：</p><h3 id="1-启动时间"><a href="#1-启动时间" class="headerlink" title="1. 启动时间"></a>1. <strong>启动时间</strong></h3><ul><li><strong>Flutter</strong>: Flutter 应用的启动时间通常较快，因为 Flutter 使用了 AOT（Ahead-of-Time）编译，将 Dart 代码编译成了原生 ARM 代码。在启动时，无需进行额外的解释或编译步骤。</li><li><strong>React Native</strong>: React Native 应用的启动时间可能稍慢一些，因为它依赖于 JavaScriptCore（iOS）或 Hermes 引擎（Android）来解释和执行 JavaScript 代码。尽管 Hermes 引擎在某些情况下可以减少启动时间，但它仍然需要一些初始化步骤。</li></ul><h3 id="2-UI-渲染性能"><a href="#2-UI-渲染性能" class="headerlink" title="2. UI 渲染性能"></a>2. <strong>UI 渲染性能</strong></h3><ul><li><strong>Flutter</strong>: Flutter 使用 Skia 图形引擎直接绘制到屏幕上，这使得 Flutter 可以提供非常流畅的 UI 渲染性能。Flutter 的渲染是逐帧进行的，通常可以达到 60fps 或 120fps。</li><li><strong>React Native</strong>: React Native 依赖于原生平台的控件和组件进行渲染，通过 Bridge 进行 JavaScript 和原生代码的通信。这种桥接机制可能会导致一定的性能瓶颈，特别是在处理复杂动画和大量 UI 更新时。</li></ul><h3 id="3-动画性能"><a href="#3-动画性能" class="headerlink" title="3. 动画性能"></a>3. <strong>动画性能</strong></h3><ul><li><strong>Flutter</strong>: Flutter 的动画性能通常非常出色，因为动画是在 Flutter 的渲染引擎中直接处理的，没有额外的通信开销。Flutter 提供了丰富的动画库和工具，使开发者可以轻松创建复杂和流畅的动画。</li><li><strong>React Native</strong>: React Native 的动画性能在某些情况下可能不如 Flutter，因为动画需要通过 Bridge 进行通信。虽然 React Native 提供了 Animated API 和 Reanimated 库来优化动画性能，但在处理非常复杂的动画时，可能仍然会遇到性能问题。</li></ul><h3 id="4-内存使用"><a href="#4-内存使用" class="headerlink" title="4. 内存使用"></a>4. <strong>内存使用</strong></h3><ul><li><strong>Flutter</strong>: Flutter 的内存使用通常较为高效，但由于它将整个 UI 树都保持在内存中，内存占用可能会随着应用复杂度的增加而增加。</li><li><strong>React Native</strong>: React Native 的内存使用也比较高效，不过由于 JavaScript 运行时和 Bridge 的存在，可能会引入额外的内存开销。</li></ul><h3 id="5-开发体验"><a href="#5-开发体验" class="headerlink" title="5. 开发体验"></a>5. <strong>开发体验</strong></h3><ul><li><strong>Flutter</strong>: Flutter 提供了热重载（Hot Reload）功能，使开发者可以快速看到代码修改的效果，极大地提高了开发效率。Flutter 的热重载通常速度非常快，体验流畅。</li><li><strong>React Native</strong>: React Native 也提供了热重载和快速刷新（Fast Refresh）功能，不过在某些情况下，热重载的速度可能不如 Flutter 快。</li></ul><h3 id="6-跨平台一致性"><a href="#6-跨平台一致性" class="headerlink" title="6. 跨平台一致性"></a>6. <strong>跨平台一致性</strong></h3><ul><li><strong>Flutter</strong>: 由于 Flutter 使用了自定义的绘图引擎，它在不同平台上的外观和行为非常一致，开发者可以更加精确地控制 UI 的细节。</li><li><strong>React Native</strong>: React Native 使用的是平台原生控件，虽然这意味着它在不同平台上能提供更原生的体验，但也可能导致不同平台之间的外观和行为不一致。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><strong>Flutter</strong> 在 UI 渲染性能、动画性能和跨平台一致性方面通常优于 React Native。其高效的渲染引擎和 AOT 编译使得 Flutter 应用的启动时间和运行性能都非常出色。</li><li><strong>React Native</strong> 在使用原生控件和访问原生平台功能方面有优势，可以提供更原生的用户体验。不过，由于 JavaScript 和原生代码之间的桥接机制，可能会在某些场景下遇到性能瓶颈。</li></ul><p>最终选择哪个框架，取决于具体项目的需求和开发团队的技术栈。如果需要非常高性能、流畅的动画和一致的跨平台体验，Flutter 可能是更好的选择。如果需要更原生的外观和感觉，或者开发团队已经熟悉 JavaScript 和 React 生态系统，React Native 可能更适合。</p><h2 id="4-H5-和原生通信有哪些方法？"><a href="#4-H5-和原生通信有哪些方法？" class="headerlink" title="4.H5 和原生通信有哪些方法？"></a>4.H5 和原生通信有哪些方法？</h2><h3 id="1-通过-URL-Schemes"><a href="#1-通过-URL-Schemes" class="headerlink" title="1. 通过 URL Schemes"></a>1. <strong>通过 URL Schemes</strong></h3><p>URL Schemes 是一种通过特定 URL 格式触发原生代码的方法。</p><h3 id="2-通过-WKScriptMessageHandler"><a href="#2-通过-WKScriptMessageHandler" class="headerlink" title="2. 通过 WKScriptMessageHandler"></a>2. <strong>通过 <code>WKScriptMessageHandler</code></strong></h3><p><code>WKScriptMessageHandler</code> 是 WKWebView 提供的用于接收来自 JavaScript 消息的处理器。</p><h4 id="H5-代码"><a href="#H5-代码" class="headerlink" title="H5 代码"></a>H5 代码</h4><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">window</span>.webkit.messageHandlers.myHandler.postMessage(&#123;<span class="hljs-attr">key</span>: <span class="hljs-string">'value'</span>&#125;);</span><br></pre></td></tr></table></figure><h4 id="iOS-代码"><a href="#iOS-代码" class="headerlink" title="iOS 代码"></a>iOS 代码</h4><p>在 <code>WKWebView</code> 的配置中添加一个脚本消息处理器：</p><figure class="highlight swift hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> WebKit</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ViewController</span>: <span class="hljs-title">UIViewController</span>, <span class="hljs-title">WKScriptMessageHandler</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">var</span> webView: <span class="hljs-type">WKWebView</span>!</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">viewDidLoad</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">        <span class="hljs-keyword">super</span>.viewDidLoad()</span><br><span class="line">        </span><br><span class="line">        <span class="hljs-keyword">let</span> config = <span class="hljs-type">WKWebViewConfiguration</span>()</span><br><span class="line">        config.userContentController.add(<span class="hljs-keyword">self</span>, name: <span class="hljs-string">"myHandler"</span>)</span><br><span class="line">        </span><br><span class="line">        webView = <span class="hljs-type">WKWebView</span>(frame: <span class="hljs-keyword">self</span>.view.frame, configuration: config)</span><br><span class="line">        <span class="hljs-keyword">self</span>.view.addSubview(webView)</span><br><span class="line">        </span><br><span class="line">        <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> url = <span class="hljs-type">URL</span>(string: <span class="hljs-string">"https://yourwebsite.com"</span>) &#123;</span><br><span class="line">            webView.load(<span class="hljs-type">URLRequest</span>(url: url))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">userContentController</span><span class="hljs-params">(<span class="hljs-number">_</span> userContentController: WKUserContentController, didReceive message: WKScriptMessage)</span></span> &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> message.name == <span class="hljs-string">"myHandler"</span> &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> body = message.body <span class="hljs-keyword">as</span>? [<span class="hljs-type">String</span>: <span class="hljs-type">Any</span>] &#123;</span><br><span class="line">                <span class="hljs-built_in">print</span>(<span class="hljs-string">"Message from H5: \(body)"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-通过-evaluateJavaScript"><a href="#3-通过-evaluateJavaScript" class="headerlink" title="3. 通过 evaluateJavaScript"></a>3. <strong>通过 <code>evaluateJavaScript</code></strong></h3><p>iOS 可以通过 <code>evaluateJavaScript</code> 方法执行 H5 页面上的 JavaScript 代码。</p><h4 id="iOS-代码-1"><a href="#iOS-代码-1" class="headerlink" title="iOS 代码"></a>iOS 代码</h4><figure class="highlight swift hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">webView.evaluateJavaScript(<span class="hljs-string">"javascriptFunctionName('argument')"</span>) &#123; (result, error) <span class="hljs-keyword">in</span></span><br><span class="line">    <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> error = error &#123;</span><br><span class="line">        <span class="hljs-built_in">print</span>(<span class="hljs-string">"JavaScript evaluation error: \(error)"</span>)</span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">        <span class="hljs-built_in">print</span>(<span class="hljs-string">"JavaScript evaluation result: \(String(describing: result))"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-通过-WebView-的-loadHTMLString-或-load-方法"><a href="#4-通过-WebView-的-loadHTMLString-或-load-方法" class="headerlink" title="4. 通过 WebView 的 loadHTMLString 或 load 方法"></a>4. <strong>通过 WebView 的 <code>loadHTMLString</code> 或 <code>load</code> 方法</strong></h3><p>你可以通过 <code>loadHTMLString</code> 或 <code>load</code> 方法将 HTML 内容直接加载到 WebView 中，并在 HTML 中嵌入 JavaScript 代码与原生代码进行通信。</p><h2 id="5-怎么提升-webView-的加载速度，使其接近原生？大的图片、js等端上下载后，怎么交给H5使用"><a href="#5-怎么提升-webView-的加载速度，使其接近原生？大的图片、js等端上下载后，怎么交给H5使用" class="headerlink" title="5.怎么提升 webView 的加载速度，使其接近原生？大的图片、js等端上下载后，怎么交给H5使用"></a>5.怎么提升 webView 的加载速度，使其接近原生？大的图片、js等端上下载后，怎么交给H5使用</h2><h3 id="1-预加载（Preloading）"><a href="#1-预加载（Preloading）" class="headerlink" title="1. 预加载（Preloading）"></a>1. 预加载（Preloading）</h3><ul><li><strong>提前加载 WebView</strong>：在用户访问页面之前，提前初始化和加载 WebView。这样用户点击时，内容已经部分或全部加载完毕。</li><li><strong>使用缓存</strong>：利用缓存机制来存储常用资源，减少重复加载。</li></ul><h3 id="2-优化资源"><a href="#2-优化资源" class="headerlink" title="2. 优化资源"></a>2. 优化资源</h3><ul><li><strong>减少请求数量</strong>：合并 CSS、JavaScript 文件，减少 HTTP 请求次数。</li><li><strong>压缩资源</strong>：使用 gzip 或 brotli 压缩 HTML、CSS 和 JavaScript 文件。</li><li><strong>图片优化</strong>：压缩图片，使用适当的图片格式（如 WebP），并考虑使用延迟加载（lazy loading）。</li></ul><h3 id="3-使用-WKWebView"><a href="#3-使用-WKWebView" class="headerlink" title="3. 使用 WKWebView"></a>3. 使用 WKWebView</h3><ul><li><strong>选择 WKWebView</strong>：相比 UIWebView，WKWebView 提供了更好的性能和更低的内存占用。确保你的应用使用的是 WKWebView。</li></ul><h3 id="4-加载策略"><a href="#4-加载策略" class="headerlink" title="4. 加载策略"></a>4. 加载策略</h3><ul><li><strong>懒加载</strong>：对于不在视口内的内容，使用懒加载技术，只在需要时才加载这些资源。</li><li><strong>异步加载</strong>：将 JavaScript 脚本放在页面底部或者使用 <code>defer</code> 和 <code>async</code> 属性异步加载脚本，避免阻塞页面渲染。</li></ul><h3 id="5-优化代码"><a href="#5-优化代码" class="headerlink" title="5. 优化代码"></a>5. 优化代码</h3><ul><li><strong>减少 DOM 操作</strong>：过多或复杂的 DOM 操作会降低渲染速度，优化前端代码，减少不必要的 DOM 操作。</li><li><strong>避免重排（Reflow）和重绘（Repaint）</strong>：尽量减少和优化需要重排和重绘的操作。</li></ul><h3 id="6-使用本地资源"><a href="#6-使用本地资源" class="headerlink" title="6. 使用本地资源"></a>6. 使用本地资源</h3><ul><li><strong>本地化资源</strong>：将常用的 CSS 和 JavaScript 文件内嵌到应用中，避免从远程服务器加载。</li><li><strong>Service Worker</strong>：虽然 iOS 对 Service Worker 的支持不如 Android，但可以利用它在支持的场景下缓存资源，提高加载速度。</li></ul><h3 id="7-网络优化"><a href="#7-网络优化" class="headerlink" title="7. 网络优化"></a>7. 网络优化</h3><ul><li><strong>CDN</strong>：使用内容分发网络（CDN）来加速资源加载。</li><li><strong>HTTP/2</strong>：使用 HTTP/2 协议来降低延迟和提升加载速度。</li></ul><h3 id="8-确保设备性能"><a href="#8-确保设备性能" class="headerlink" title="8. 确保设备性能"></a>8. 确保设备性能</h3><ul><li><strong>内存优化</strong>：确保 WebView 不会消耗过多内存，避免在低内存设备上崩溃或变慢。</li><li><strong>性能监控</strong>：定期监控应用的性能，并根据实际数据进行优化。</li></ul><h3 id="9-使用-SPA-Single-Page-Application"><a href="#9-使用-SPA-Single-Page-Application" class="headerlink" title="9. 使用 SPA (Single Page Application)"></a>9. 使用 SPA (Single Page Application)</h3><ul><li><strong>单页应用</strong>：如果你的应用逻辑允许，考虑将 Web 应用改为单页应用（SPA），减少页面跳转时间，并通过前端路由管理页面状态。</li></ul><h3 id="10-其他优化"><a href="#10-其他优化" class="headerlink" title="10. 其他优化"></a>10. 其他优化</h3><ul><li><strong>Lazy Load</strong>：对图片和其他资源使用懒加载技术。</li><li><strong>减少动画和特效</strong>：过多的动画和特效会增加 CPU 和 GPU 的负担，尽量减少或优化这些效果。</li></ul><p>通过综合以上方法，逐步优化 WebView 的加载速度，可以显著提升用户体验，使其接近原生应用的性能。</p><h3 id="1-预加载并注入资源"><a href="#1-预加载并注入资源" class="headerlink" title="1. 预加载并注入资源"></a>1. 预加载并注入资源</h3><p>在 WKWebView 初始化时，可以预先加载本地下载的资源，并通过 JavaScript 注入到网页中。</p><h4 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h4><figure class="highlight swift hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> WebKit</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ViewController</span>: <span class="hljs-title">UIViewController</span>, <span class="hljs-title">WKNavigationDelegate</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">var</span> webView: <span class="hljs-type">WKWebView</span>!</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">viewDidLoad</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">        <span class="hljs-keyword">super</span>.viewDidLoad()</span><br><span class="line">        </span><br><span class="line">        <span class="hljs-keyword">let</span> webConfiguration = <span class="hljs-type">WKWebViewConfiguration</span>()</span><br><span class="line">        webView = <span class="hljs-type">WKWebView</span>(frame: .zero, configuration: webConfiguration)</span><br><span class="line">        webView.navigationDelegate = <span class="hljs-keyword">self</span></span><br><span class="line">        view.addSubview(webView)</span><br><span class="line">        </span><br><span class="line">        <span class="hljs-comment">// 加载本地 HTML 文件</span></span><br><span class="line">        <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> localHTMLUrl = <span class="hljs-type">Bundle</span>.main.url(forResource: <span class="hljs-string">"index"</span>, withExtension: <span class="hljs-string">"html"</span>) &#123;</span><br><span class="line">            webView.loadFileURL(localHTMLUrl, allowingReadAccessTo: localHTMLUrl.deletingLastPathComponent())</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="hljs-comment">// 注入本地 JavaScript 文件</span></span><br><span class="line">        <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> localJSUrl = <span class="hljs-type">Bundle</span>.main.url(forResource: <span class="hljs-string">"script"</span>, withExtension: <span class="hljs-string">"js"</span>),</span><br><span class="line">           <span class="hljs-keyword">let</span> localJSContent = <span class="hljs-keyword">try</span>? <span class="hljs-type">String</span>(contentsOf: localJSUrl) &#123;</span><br><span class="line">            <span class="hljs-keyword">let</span> userScript = <span class="hljs-type">WKUserScript</span>(source: localJSContent, injectionTime: .atDocumentStart, forMainFrameOnly: <span class="hljs-literal">true</span>)</span><br><span class="line">            webView.configuration.userContentController.addUserScript(userScript)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-使用自定义-URL-Scheme"><a href="#2-使用自定义-URL-Scheme" class="headerlink" title="2. 使用自定义 URL Scheme"></a>2. 使用自定义 URL Scheme</h3><p>通过自定义 URL Scheme，将本地资源提供给 WebView。</p><h4 id="示例代码：-1"><a href="#示例代码：-1" class="headerlink" title="示例代码："></a>示例代码：</h4><figure class="highlight swift hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> WebKit</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ViewController</span>: <span class="hljs-title">UIViewController</span>, <span class="hljs-title">WKNavigationDelegate</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">var</span> webView: <span class="hljs-type">WKWebView</span>!</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">viewDidLoad</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">        <span class="hljs-keyword">super</span>.viewDidLoad()</span><br><span class="line">        </span><br><span class="line">        <span class="hljs-keyword">let</span> webConfiguration = <span class="hljs-type">WKWebViewConfiguration</span>()</span><br><span class="line">        webView = <span class="hljs-type">WKWebView</span>(frame: .zero, configuration: webConfiguration)</span><br><span class="line">        webView.navigationDelegate = <span class="hljs-keyword">self</span></span><br><span class="line">        webView.uiDelegate = <span class="hljs-keyword">self</span></span><br><span class="line">        view.addSubview(webView)</span><br><span class="line">        </span><br><span class="line">        <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> localHTMLUrl = <span class="hljs-type">Bundle</span>.main.url(forResource: <span class="hljs-string">"index"</span>, withExtension: <span class="hljs-string">"html"</span>) &#123;</span><br><span class="line">            webView.loadFileURL(localHTMLUrl, allowingReadAccessTo: localHTMLUrl.deletingLastPathComponent())</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="hljs-keyword">let</span> schemeHandler = <span class="hljs-type">LocalSchemeHandler</span>()</span><br><span class="line">        webConfiguration.setURLSchemeHandler(schemeHandler, forURLScheme: <span class="hljs-string">"myapp"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> url = <span class="hljs-type">URL</span>(string: <span class="hljs-string">"myapp://localResource/script.js"</span>) &#123;</span><br><span class="line">            webView.load(<span class="hljs-type">URLRequest</span>(url: url))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LocalSchemeHandler</span>: <span class="hljs-title">NSObject</span>, <span class="hljs-title">WKURLSchemeHandler</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">webView</span><span class="hljs-params">(<span class="hljs-number">_</span> webView: WKWebView, start urlSchemeTask: WKURLSchemeTask)</span></span> &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> url = urlSchemeTask.request.url, url.scheme == <span class="hljs-string">"myapp"</span> &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> url.path == <span class="hljs-string">"/localResource/script.js"</span>,</span><br><span class="line">               <span class="hljs-keyword">let</span> filePath = <span class="hljs-type">Bundle</span>.main.path(forResource: <span class="hljs-string">"script"</span>, ofType: <span class="hljs-string">"js"</span>) &#123;</span><br><span class="line">                <span class="hljs-keyword">let</span> data = <span class="hljs-keyword">try</span>? <span class="hljs-type">Data</span>(contentsOf: <span class="hljs-type">URL</span>(fileURLWithPath: filePath))</span><br><span class="line">                <span class="hljs-keyword">let</span> response = <span class="hljs-type">URLResponse</span>(url: url, mimeType: <span class="hljs-string">"application/javascript"</span>, expectedContentLength: data?.<span class="hljs-built_in">count</span> ?? <span class="hljs-number">0</span>, textEncodingName: <span class="hljs-literal">nil</span>)</span><br><span class="line">                urlSchemeTask.didReceive(response)</span><br><span class="line">                <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> data = data &#123;</span><br><span class="line">                    urlSchemeTask.didReceive(data)</span><br><span class="line">                &#125;</span><br><span class="line">                urlSchemeTask.didFinish()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">webView</span><span class="hljs-params">(<span class="hljs-number">_</span> webView: WKWebView, stop urlSchemeTask: WKURLSchemeTask)</span></span> &#123;</span><br><span class="line">        <span class="hljs-comment">// Handle task stopping if needed</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-使用-Base64-编码"><a href="#3-使用-Base64-编码" class="headerlink" title="3. 使用 Base64 编码"></a>3. 使用 Base64 编码</h3><p>将本地资源转换成 Base64 编码，然后通过 JavaScript 将其注入到网页中。</p><h4 id="示例代码：-2"><a href="#示例代码：-2" class="headerlink" title="示例代码："></a>示例代码：</h4><figure class="highlight swift hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> WebKit</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ViewController</span>: <span class="hljs-title">UIViewController</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">var</span> webView: <span class="hljs-type">WKWebView</span>!</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">viewDidLoad</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">        <span class="hljs-keyword">super</span>.viewDidLoad()</span><br><span class="line">        </span><br><span class="line">        webView = <span class="hljs-type">WKWebView</span>(frame: <span class="hljs-keyword">self</span>.view.frame)</span><br><span class="line">        <span class="hljs-keyword">self</span>.view.addSubview(webView)</span><br><span class="line">        </span><br><span class="line">        <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> localHTMLUrl = <span class="hljs-type">Bundle</span>.main.url(forResource: <span class="hljs-string">"index"</span>, withExtension: <span class="hljs-string">"html"</span>) &#123;</span><br><span class="line">            webView.loadFileURL(localHTMLUrl, allowingReadAccessTo: localHTMLUrl.deletingLastPathComponent())</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> imagePath = <span class="hljs-type">Bundle</span>.main.path(forResource: <span class="hljs-string">"image"</span>, ofType: <span class="hljs-string">"png"</span>),</span><br><span class="line">           <span class="hljs-keyword">let</span> imageData = <span class="hljs-keyword">try</span>? <span class="hljs-type">Data</span>(contentsOf: <span class="hljs-type">URL</span>(fileURLWithPath: imagePath)) &#123;</span><br><span class="line">            <span class="hljs-keyword">let</span> base64String = imageData.base64EncodedString()</span><br><span class="line"></span><br><span class="line">            <span class="hljs-keyword">let</span> jsCode = <span class="hljs-string">"""</span></span><br><span class="line"><span class="hljs-string">            var img = document.createElement('img');</span></span><br><span class="line"><span class="hljs-string">            img.src = 'data:image/png;base64,\(base64String)';</span></span><br><span class="line"><span class="hljs-string">            document.body.appendChild(img);</span></span><br><span class="line"><span class="hljs-string">            """</span></span><br><span class="line">            webView.evaluateJavaScript(jsCode, completionHandler: <span class="hljs-literal">nil</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-使用本地服务器"><a href="#4-使用本地服务器" class="headerlink" title="4. 使用本地服务器"></a>4. 使用本地服务器</h3><p>在应用内启动一个本地服务器（如 GCDWebServer），然后通过 HTTP 请求获取本地资源。</p><h4 id="示例代码：-3"><a href="#示例代码：-3" class="headerlink" title="示例代码："></a>示例代码：</h4><figure class="highlight swift hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> WebKit</span><br><span class="line"><span class="hljs-keyword">import</span> GCDWebServer</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ViewController</span>: <span class="hljs-title">UIViewController</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">var</span> webView: <span class="hljs-type">WKWebView</span>!</span><br><span class="line">    <span class="hljs-keyword">var</span> webServer: <span class="hljs-type">GCDWebServer</span>!</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">viewDidLoad</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">        <span class="hljs-keyword">super</span>.viewDidLoad()</span><br><span class="line">        </span><br><span class="line">        webServer = <span class="hljs-type">GCDWebServer</span>()</span><br><span class="line">        </span><br><span class="line">        <span class="hljs-comment">// 添加处理器来提供本地资源</span></span><br><span class="line">        webServer.addGETHandler(forBasePath: <span class="hljs-string">"/"</span>, directoryPath: <span class="hljs-type">Bundle</span>.main.resourcePath!, indexFilename: <span class="hljs-literal">nil</span>, cacheAge: <span class="hljs-number">3600</span>, allowRangeRequests: <span class="hljs-literal">true</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="hljs-comment">// 启动本地服务器</span></span><br><span class="line">        webServer.start(withPort: <span class="hljs-number">8080</span>, bonjourName: <span class="hljs-string">"GCD Web Server"</span>)</span><br><span class="line">        </span><br><span class="line">        webView = <span class="hljs-type">WKWebView</span>(frame: <span class="hljs-keyword">self</span>.view.frame)</span><br><span class="line">        <span class="hljs-keyword">self</span>.view.addSubview(webView)</span><br><span class="line">        </span><br><span class="line">        <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> url = <span class="hljs-type">URL</span>(string: <span class="hljs-string">"http://localhost:8080/index.html"</span>) &#123;</span><br><span class="line">            webView.load(<span class="hljs-type">URLRequest</span>(url: url))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上述方法，可以将本地下载的资源交给 H5 使用，以提升 WebView 的加载速度和用户体验。选择具体方案时，可以根据实际需求、项目复杂度和维护成本进行权衡。</p><h2 id="6-小程序是怎么实现的？"><a href="#6-小程序是怎么实现的？" class="headerlink" title="6.小程序是怎么实现的？"></a>6.小程序是怎么实现的？</h2><h2 id="7-前端-JS-的异步是怎么实现的？"><a href="#7-前端-JS-的异步是怎么实现的？" class="headerlink" title="7.前端 JS 的异步是怎么实现的？"></a>7.前端 JS 的异步是怎么实现的？</h2><p>JavaScript 的异步是通过事件循环（Event Loop）、回调函数、任务队列（Task Queue）和微任务队列（Microtask Queue）等机制共同实现的。下面我们详细讨论这些概念及其工作原理。</p><h3 id="事件循环（Event-Loop）"><a href="#事件循环（Event-Loop）" class="headerlink" title="事件循环（Event Loop）"></a>事件循环（Event Loop）</h3><p>JavaScript 运行时环境（如浏览器或 Node.js）包含一个事件循环，它是处理异步操作的核心。事件循环负责监控调用栈和任务队列，并根据情况将任务队列中的任务推入调用栈执行。</p><h3 id="调用栈（Call-Stack）"><a href="#调用栈（Call-Stack）" class="headerlink" title="调用栈（Call Stack）"></a>调用栈（Call Stack）</h3><p>调用栈用于追踪正在执行的函数，JavaScript 是单线程的，这意味着它一次只能执行一个任务。调用栈记录了函数的调用顺序，并在当前函数执行完毕后，依次返回上一级调用。</p><h3 id="Web-API"><a href="#Web-API" class="headerlink" title="Web API"></a>Web API</h3><p>浏览器提供了一些异步 API，如 <code>setTimeout</code>、<code>setInterval</code>、<code>XMLHttpRequest</code>、<code>fetch</code> 等。当调用这些 API 时，任务会被移交给浏览器处理，而不是立即在调用栈中执行。</p><h3 id="任务队列（Task-Queue）"><a href="#任务队列（Task-Queue）" class="headerlink" title="任务队列（Task Queue）"></a>任务队列（Task Queue）</h3><p>任务队列存储了已完成的异步操作对应的回调函数，这些回调函数等待事件循环将它们推入调用栈执行。任务队列包括宏任务队列（Macro Task Queue）和微任务队列（Microtask Queue）。</p><h4 id="宏任务（Macro-Task）"><a href="#宏任务（Macro-Task）" class="headerlink" title="宏任务（Macro Task）"></a>宏任务（Macro Task）</h4><p>宏任务包括 <code>setTimeout</code>、<code>setInterval</code>、I/O 操作等。这些任务会被添加到宏任务队列中，等待事件循环处理。</p><h4 id="微任务（Microtask）"><a href="#微任务（Microtask）" class="headerlink" title="微任务（Microtask）"></a>微任务（Microtask）</h4><p>微任务包括 <code>Promise</code> 的 <code>.then</code> 回调、<code>MutationObserver</code> 等。微任务会被添加到微任务队列中。微任务队列的优先级高于宏任务队列，这意味着在每次宏任务执行完毕后，事件循环会首先清空微任务队列。</p><h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><ol><li><strong>主线程执行同步代码</strong>：所有同步代码会被压入调用栈中并执行。</li><li><strong>遇到异步操作</strong>：当遇到异步操作（如 <code>setTimeout</code>、<code>fetch</code> 等），相应的回调函数会被注册并移交给浏览器的 Web API 处理。</li><li><strong>Web API 完成任务</strong>：一旦异步操作完成，回调函数会被放入相应的任务队列中（宏任务或微任务）。</li><li><strong>事件循环检查调用栈</strong>：事件循环不断检查调用栈是否为空。</li><li><strong>处理微任务</strong>：如果调用栈为空，事件循环会优先处理微任务队列中的任务。</li><li><strong>处理宏任务</strong>：如果微任务队列为空，事件循环会处理宏任务队列中的任务。</li></ol><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Start'</span>);</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Timeout callback'</span>);</span><br><span class="line">&#125;, <span class="hljs-number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">Promise</span>.resolve().then(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Promise callback'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'End'</span>);</span><br></pre></td></tr></table></figure><h3 id="执行顺序解析"><a href="#执行顺序解析" class="headerlink" title="执行顺序解析"></a>执行顺序解析</h3><ol><li><code>console.log(&#39;Start&#39;)</code> 输出 “Start”。</li><li><code>setTimeout</code> 注册一个回调函数，并将其移交给浏览器处理（宏任务）。</li><li><code>Promise.resolve().then</code> 注册一个回调函数，并将其放入微任务队列。</li><li><code>console.log(&#39;End&#39;)</code> 输出 “End”。</li><li>主线程执行完同步代码后，调用栈为空，事件循环首先处理微任务队列。</li><li>微任务队列中的 <code>Promise</code> 回调函数被执行，输出 “Promise callback”。</li><li>微任务队列清空后，事件循环处理宏任务队列中的 <code>setTimeout</code> 回调，输出 “Timeout callback”。</li></ol><p>综上所述，JavaScript 的异步机制通过事件循环、调用栈、任务队列和 Web API 的协同工作，实现了异步操作，使得代码可以在等待长时间操作（如网络请求）时，不阻塞主线程的执行。</p><h2 id="8-项目亮点"><a href="#8-项目亮点" class="headerlink" title="8.项目亮点"></a>8.项目亮点</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;去哪儿网&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="面试题" scheme="http://soso.wiki/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试" scheme="http://soso.wiki/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="去哪儿网" scheme="http://soso.wiki/tags/%E5%8E%BB%E5%93%AA%E5%84%BF%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>字节跳动</title>
    <link href="http://soso.wiki/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8/"/>
    <id>http://soso.wiki/字节跳动/</id>
    <published>2024-07-30T03:00:00.000Z</published>
    <updated>2024-07-31T08:42:25.478Z</updated>
    
    <content type="html"><![CDATA[<p>字节跳动<br><a id="more"></a></p><p>1.项目选一点来说，技术指标？了解业务指标吗？</p><p>2.KVO原理，应用场景</p><p>3.Runtime、应用，Runtime 交换方法需要注意什么？Runtime 的 hook 和 fish hook 有什么区别？</p><p>4.Runloop、应用、Runloop 来监测卡顿有什么问题？</p><p>5.UIView 和 CALaye r的区别，为什么这么设计？</p><p>6.显式动画和隐式动画的区别</p><p>7.了解的设计原则和设计模式，结合项目</p><p>8.block 的本质</p><p>9.算法：查找字符串的无重复字符子串的最大长度</p><p><a href="https://leetcode.cn/problems/longest-substring-without-repeating-characters/description/" target="_blank" rel="noopener">无重复字符的最长子串-力扣</a></p><h2 id="参考答案"><a href="#参考答案" class="headerlink" title="参考答案"></a>参考答案</h2><h2 id="1-项目选一点来说，技术指标？了解业务指标吗？"><a href="#1-项目选一点来说，技术指标？了解业务指标吗？" class="headerlink" title="1.项目选一点来说，技术指标？了解业务指标吗？"></a>1.项目选一点来说，技术指标？了解业务指标吗？</h2><h2 id="2-KVO原理，应用场景"><a href="#2-KVO原理，应用场景" class="headerlink" title="2.KVO原理，应用场景"></a>2.KVO原理，应用场景</h2><ol><li><strong>动态生成子类</strong>：当你观察某个对象的属性时，Objective-C Runtime会动态创建该对象的一个子类，并重写被观察属性的setter方法。</li><li><strong>方法重写</strong>：在重写的setter方法中，KVO机制会插入一些代码，用于通知所有观察者该属性的变化。</li><li><strong>isa指针指向</strong>：原始对象的<code>isa</code>指针会被修改，指向新创建的子类，以确保调用setter方法时实际调用的是重写后的方法。</li><li><strong>通知机制</strong>：属性值变化时，KVO机制会自动通知所有注册的观察者，调用观察者的<code>observeValueForKeyPath:ofObject:change:context:</code>方法。</li></ol><h2 id="3-Runtime、应用，Runtime-交换方法需要注意什么？Runtime的-hook-和-fish-hook-有什么区别？"><a href="#3-Runtime、应用，Runtime-交换方法需要注意什么？Runtime的-hook-和-fish-hook-有什么区别？" class="headerlink" title="3.Runtime、应用，Runtime 交换方法需要注意什么？Runtime的 hook 和 fish hook 有什么区别？"></a>3.Runtime、应用，Runtime 交换方法需要注意什么？Runtime的 hook 和 fish hook 有什么区别？</h2><h3 id="iOS-Runtime-Hook"><a href="#iOS-Runtime-Hook" class="headerlink" title="iOS Runtime Hook"></a>iOS Runtime Hook</h3><h4 id="主要特点"><a href="#主要特点" class="headerlink" title="主要特点"></a>主要特点</h4><ol><li><strong>Method Swizzling</strong>: 这是最常见的Runtime Hook技术，通过交换方法实现和自定义方法实现，从而改变类的行为。</li><li><strong>动态性强</strong>: 由于Objective-C Runtime的动态特性，可以在运行时对类和方法进行操作。</li><li><strong>灵活性高</strong>: 可以在不修改原始代码的情况下，对应用程序的行为进行修改。</li><li><strong>适用范围广</strong>: 适用于Objective-C编写的类和方法。</li></ol><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><ul><li>修改系统或第三方库的行为。</li><li>监控方法调用和参数。</li><li>在不破坏原有代码的基础上，添加额外的功能。</li></ul><h3 id="Fishhook"><a href="#Fishhook" class="headerlink" title="Fishhook"></a>Fishhook</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>Fishhook是由Facebook开源的一个库，主要用于在iOS应用中重绑定符号，从而实现对低层次的C函数进行hook。</p><h4 id="主要特点-1"><a href="#主要特点-1" class="headerlink" title="主要特点"></a>主要特点</h4><ol><li><strong>基于符号重绑定</strong>: Fishhook通过修改符号表来重新绑定函数指针，从而实现对函数的替换。</li><li><strong>适用范围</strong>: 主要用于C语言层面的函数，如系统调用和标准库函数。</li><li><strong>低层次</strong>: 适用于低层次的函数拦截，而不是面向对象的Method Swizzling。</li><li><strong>开源库</strong>: Fishhook是一个开源库，可以方便地集成到项目中。</li></ol><h4 id="使用场景-1"><a href="#使用场景-1" class="headerlink" title="使用场景"></a>使用场景</h4><ul><li>替换系统函数实现，如<code>malloc</code>、<code>free</code>、<code>open</code>等。</li><li>监控和修改底层C函数的行为。</li><li>在动态加载的库中对特定函数进行hook。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><strong>iOS Runtime Hook</strong>主要用于Objective-C的方法替换，通过Runtime机制实现，适用于面向对象的环境。</li><li><strong>Fishhook</strong>主要用于C函数的符号重绑定，通过修改符号表实现，适用于底层C函数的拦截和替换。</li></ul><h2 id="4-Runloop、应用、Runloop-来监测卡顿有什么问题？"><a href="#4-Runloop、应用、Runloop-来监测卡顿有什么问题？" class="headerlink" title="4.Runloop、应用、Runloop 来监测卡顿有什么问题？"></a>4.Runloop、应用、Runloop 来监测卡顿有什么问题？</h2><p>使用 RunLoop 来监测卡顿是一个常见的方法，但它也有一些局限性和潜在的问题。以下是一些主要问题：</p><h3 id="1-精度问题"><a href="#1-精度问题" class="headerlink" title="1. 精度问题"></a>1. 精度问题</h3><p>RunLoop 的监测精度有限。RunLoop 的每一次循环都有其自身的周期，如果要监测短暂的卡顿（比如几毫秒），RunLoop 可能无法捕捉到。</p><h3 id="2-影响性能"><a href="#2-影响性能" class="headerlink" title="2. 影响性能"></a>2. 影响性能</h3><p>频繁监测 RunLoop 的状态可能会对应用性能产生影响。尤其在主线程上进行监测时，可能会增加额外的开销，从而影响应用的响应速度。</p><h3 id="3-误报问题"><a href="#3-误报问题" class="headerlink" title="3. 误报问题"></a>3. 误报问题</h3><p>使用 RunLoop 来检测卡顿时，可能会出现误报的情况。例如，后台任务、I/O 操作或者网络请求等可能导致 RunLoop 的阻塞，这些情况未必是真正的 UI 卡顿。</p><h3 id="4-无法检测异步任务"><a href="#4-无法检测异步任务" class="headerlink" title="4. 无法检测异步任务"></a>4. 无法检测异步任务</h3><p>RunLoop 主要监测的是同步任务的执行情况，对于异步任务（如 GCD 的 <code>dispatch_async</code> 或者 <code>NSOperationQueue</code>）的监测能力有限。这可能导致一些卡顿问题被遗漏。</p><h3 id="5-复杂的实现逻辑"><a href="#5-复杂的实现逻辑" class="headerlink" title="5. 复杂的实现逻辑"></a>5. 复杂的实现逻辑</h3><p>为了准确监测卡顿，可能需要实现复杂的逻辑来处理各种边界情况和特例。这不仅增加了代码的复杂性，也增加了维护的难度。</p><h3 id="6-应用场景有限"><a href="#6-应用场景有限" class="headerlink" title="6. 应用场景有限"></a>6. 应用场景有限</h3><p>RunLoop 监测方法主要应用于主线程的 UI 卡顿检测，对于多线程环境下的卡顿监测效果不佳。因此，如果应用中存在大量的多线程操作，单纯依赖 RunLoop 进行监测可能无法全面覆盖。</p><h3 id="典型实现方法"><a href="#典型实现方法" class="headerlink" title="典型实现方法"></a>典型实现方法</h3><p>尽管存在上述问题，RunLoop 仍然是一个常用的卡顿监测工具。以下是一个简单的实现思路：</p><ol><li><strong>观察 RunLoop 的状态</strong>：通过监听 RunLoop 的 <code>kCFRunLoopBeforeSources</code> 和 <code>kCFRunLoopAfterWaiting</code> 等状态，记录 RunLoop 的执行时间。</li><li><strong>计算时间差</strong>：在每次 RunLoop 状态变化时，计算当前时间与上一次状态变化的时间差。如果时间差超过某个阈值（比如 100 毫秒），则认为发生了卡顿。</li><li><strong>记录或上报卡顿</strong>：将卡顿信息记录到日志中，或者上报到服务器进行分析。</li></ol><figure class="highlight objc hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">CFRunLoopObserverRef</span> observer;</span><br><span class="line"><span class="hljs-built_in">CFRunLoopObserverContext</span> context = &#123;<span class="hljs-number">0</span>, (__bridge <span class="hljs-keyword">void</span> *)<span class="hljs-keyword">self</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>&#125;;</span><br><span class="line">observer = <span class="hljs-built_in">CFRunLoopObserverCreate</span>(kCFAllocatorDefault,</span><br><span class="line">                                   kCFRunLoopAllActivities,</span><br><span class="line">                                   <span class="hljs-literal">YES</span>,</span><br><span class="line">                                   <span class="hljs-number">0</span>,</span><br><span class="line">                                   &amp;runLoopObserverCallback,</span><br><span class="line">                                   &amp;context);</span><br><span class="line"><span class="hljs-keyword">if</span> (observer) &#123;</span><br><span class="line">    <span class="hljs-built_in">CFRunLoopAddObserver</span>(<span class="hljs-built_in">CFRunLoopGetMain</span>(), observer, kCFRunLoopCommonModes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>runLoopObserverCallback</code> 中可以实现时间差计算和卡顿检测逻辑。</p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>虽然使用 RunLoop 来监测卡顿存在一些问题，但它仍然是一个有用的工具，尤其是在主线程的 UI 卡顿检测方面。为了提高监测的准确性和覆盖面，可以结合其他监测方法，如定期采样、堆栈追踪等，来更全面地了解应用的性能状况。</p><h2 id="5-UIView-和-CALayer-的区别，为什么这么设计？"><a href="#5-UIView-和-CALayer-的区别，为什么这么设计？" class="headerlink" title="5.UIView 和 CALayer 的区别，为什么这么设计？"></a>5.UIView 和 CALayer 的区别，为什么这么设计？</h2><h3 id="UIView"><a href="#UIView" class="headerlink" title="UIView"></a>UIView</h3><ol><li><p><strong>类型</strong>: <code>UIView</code> 是一个视图类，继承自 <code>UIResponder</code>。</p></li><li><p>功能</p><p>:</p><ul><li><strong>事件处理</strong>: <code>UIView</code> 负责处理用户交互事件，如触摸、手势等。</li><li><strong>视图层次结构</strong>: <code>UIView</code> 管理视图层次结构，可以包含其他视图（子视图）并且可以被其他视图包含（父视图）。</li><li><strong>布局和自动布局</strong>: <code>UIView</code> 支持自动布局（Auto Layout）和布局约束，并且可以响应布局变化。</li><li><strong>动画</strong>: <code>UIView</code> 提供了动画接口，可以对视图进行动画处理。</li><li><strong>渲染</strong>: <code>UIView</code> 本身并不直接进行渲染操作，而是通过其内部的 <code>CALayer</code> 来进行渲染。</li></ul></li></ol><h3 id="CALayer"><a href="#CALayer" class="headerlink" title="CALayer"></a>CALayer</h3><ol><li><strong>类型</strong>: <code>CALayer</code> 是 Core Animation 框架中的一个类，负责管理和渲染内容。</li><li>功能:<ul><li><strong>内容渲染</strong>: <code>CALayer</code> 负责渲染视图的内容，并且可以直接绘制图形、设置背景颜色、边框、阴影等。</li><li><strong>动画</strong>: <code>CALayer</code> 提供了强大的动画功能，支持隐式动画（Implicit Animations）和显式动画（Explicit Animations）。</li><li><strong>图形操作</strong>: <code>CALayer</code> 支持复杂的图形操作，如变换（旋转、缩放、平移）、遮罩（Masking）、滤镜（Filters）等。</li><li><strong>不处理事件</strong>: <code>CALayer</code> 不处理用户交互事件，这是 <code>UIView</code> 的职责。</li><li><strong>不参与自动布局</strong>: <code>CALayer</code> 不参与 <code>UIView</code> 的布局系统，它的布局需要手动设置。</li></ul></li></ol><h3 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h3><ul><li><strong>层次结构</strong>: 每个 <code>UIView</code> 都包含一个 <code>CALayer</code> 实例作为其 <code>layer</code> 属性，<code>UIView</code> 通过这个 <code>CALayer</code> 来进行内容的实际渲染。</li><li><strong>委托关系</strong>: <code>UIView</code> 是 <code>CALayer</code> 的委托（delegate），<code>CALayer</code> 的一些操作（如绘制内容）可以委托给 <code>UIView</code> 来处理。</li></ul><h3 id="典型用法"><a href="#典型用法" class="headerlink" title="典型用法"></a>典型用法</h3><ul><li><strong>UIView</strong>:<ul><li>创建和管理界面元素。</li><li>响应用户交互。</li><li>布局和子视图管理。</li></ul></li><li><strong>CALayer</strong>:<ul><li>执行复杂的动画和图形操作。</li><li>提供低级别的绘图和渲染支持。</li><li>作为 <code>UIView</code> 的底层实现，提升渲染性能。</li></ul></li></ul><p>在 iOS 开发中，<code>UIView</code> 和 <code>CALayer</code> 的设计遵循了一系列面向对象设计原则，这些原则确保了代码的灵活性、可维护性和性能。以下是一些关键的设计原则以及它们在 <code>UIView</code> 和 <code>CALayer</code> 中的体现：</p><h3 id="1-单一职责原则（Single-Responsibility-Principle-SRP）"><a href="#1-单一职责原则（Single-Responsibility-Principle-SRP）" class="headerlink" title="1. 单一职责原则（Single Responsibility Principle, SRP）"></a>1. <strong>单一职责原则（Single Responsibility Principle, SRP）</strong></h3><p><strong>定义</strong>: 每个类应该只有一个引起变化的原因，即每个类应该只有一个职责。</p><p><strong>体现</strong>:</p><ul><li><code>UIView</code> 主要负责处理用户交互事件、管理视图层次结构和布局。</li><li><code>CALayer</code> 专注于内容的渲染和动画。</li></ul><p>通过将视图的管理和渲染职责分离，可以让每个类更加专注于自身的功能，简化了类的设计和职责。</p><h3 id="2-开放-封闭原则（Open-Closed-Principle-OCP）"><a href="#2-开放-封闭原则（Open-Closed-Principle-OCP）" class="headerlink" title="2. 开放-封闭原则（Open/Closed Principle, OCP）"></a>2. <strong>开放-封闭原则（Open/Closed Principle, OCP）</strong></h3><p><strong>定义</strong>: 软件实体（类、模块、函数等）应该可以扩展，但不可修改。</p><p><strong>体现</strong>:</p><ul><li><code>UIView</code> 通过其 <code>layer</code> 属性委托渲染任务给 <code>CALayer</code>。如果需要扩展渲染功能，可以通过自定义 <code>CALayer</code> 而不是修改 <code>UIView</code>。</li><li><code>CALayer</code> 的功能可以通过子类化和委托模式来扩展，而不需要修改现有的类。</li></ul><p>这种设计允许在不修改现有代码的情况下，轻松添加新功能。</p><h3 id="3-里氏替换原则（Liskov-Substitution-Principle-LSP）"><a href="#3-里氏替换原则（Liskov-Substitution-Principle-LSP）" class="headerlink" title="3. 里氏替换原则（Liskov Substitution Principle, LSP）"></a>3. <strong>里氏替换原则（Liskov Substitution Principle, LSP）</strong></h3><p><strong>定义</strong>: 子类对象必须能够替换其父类对象，并且不会导致程序行为的改变。</p><p><strong>体现</strong>:</p><ul><li><code>UIView</code> 和 <code>CALayer</code> 都可以被子类化，子类可以替换父类的实例并正常工作。</li><li><code>UIView</code> 的子类可以扩展用户交互和布局功能，而 <code>CALayer</code> 的子类可以扩展渲染和动画功能。</li></ul><h3 id="4-依赖倒置原则（Dependency-Inversion-Principle-DIP）"><a href="#4-依赖倒置原则（Dependency-Inversion-Principle-DIP）" class="headerlink" title="4. 依赖倒置原则（Dependency Inversion Principle, DIP）"></a>4. <strong>依赖倒置原则（Dependency Inversion Principle, DIP）</strong></h3><p><strong>定义</strong>: 高层模块不应该依赖低层模块，二者都应该依赖其抽象；抽象不应该依赖细节，细节应该依赖抽象。</p><p><strong>体现</strong>:</p><ul><li><code>UIView</code> 并不直接依赖低层的渲染实现，而是通过 <code>CALayer</code> 进行抽象。</li><li><code>CALayer</code> 提供了渲染的抽象接口，具体的渲染细节可以通过子类和委托模式来实现。</li></ul><h3 id="5-接口隔离原则（Interface-Segregation-Principle-ISP）"><a href="#5-接口隔离原则（Interface-Segregation-Principle-ISP）" class="headerlink" title="5. 接口隔离原则（Interface Segregation Principle, ISP）"></a>5. <strong>接口隔离原则（Interface Segregation Principle, ISP）</strong></h3><p><strong>定义</strong>: 客户端不应该被强迫依赖它们不使用的方法；一个类对另一个类的依赖应该建立在最小接口上。</p><p><strong>体现</strong>:</p><ul><li><code>UIView</code> 和 <code>CALayer</code> 的接口设计相对独立，<code>UIView</code> 聚焦在用户交互和布局接口上，而 <code>CALayer</code> 聚焦在渲染和动画接口上。</li><li><code>UIView</code> 的用户只需要关心用户交互和布局相关的方法，而不需要了解渲染和动画的细节。</li></ul><h3 id="6-组合优于继承（Composition-over-Inheritance）"><a href="#6-组合优于继承（Composition-over-Inheritance）" class="headerlink" title="6. 组合优于继承（Composition over Inheritance）"></a>6. <strong>组合优于继承（Composition over Inheritance）</strong></h3><p><strong>定义</strong>: 应该优先使用组合而不是继承来达到代码复用和扩展的目的。</p><p><strong>体现</strong>:</p><ul><li><code>UIView</code> 通过组合 <code>CALayer</code> 来实现复杂的功能，而不是通过继承来扩展一个巨大的视图类。</li><li>这种设计允许在 <code>UIView</code> 和 <code>CALayer</code> 之间进行灵活的组合和配置，以适应不同的需求。</li></ul><h3 id="7-性能和效率"><a href="#7-性能和效率" class="headerlink" title="7. 性能和效率"></a>7. <strong>性能和效率</strong></h3><p><strong>定义</strong>: 在设计中考虑性能和效率问题，确保应用程序运行高效。</p><p><strong>体现</strong>:</p><ul><li><code>CALayer</code> 直接与 Core Animation 交互，提供硬件加速的动画和渲染性能。</li><li><code>UIView</code> 通过 <code>CALayer</code> 进行渲染，可以减少视图树的复杂度并提高渲染效率。</li></ul><p>通过遵循这些设计原则，<code>UIView</code> 和 <code>CALayer</code> 实现了职责分离、代码复用、灵活扩展和高效渲染，形成了一个强大且易于维护的视图和动画系统。这种设计不仅提升了开发体验，还提高了应用程序的性能和稳定性。</p><h2 id="6-显式动画和隐式动画的区别"><a href="#6-显式动画和隐式动画的区别" class="headerlink" title="6.显式动画和隐式动画的区别"></a>6.显式动画和隐式动画的区别</h2><p>在 iOS 开发中，动画可以分为显式动画（Explicit Animations）和隐式动画（Implicit Animations）。这两种动画方式在实现、使用场景和控制粒度上有所不同。</p><h3 id="隐式动画（Implicit-Animations）"><a href="#隐式动画（Implicit-Animations）" class="headerlink" title="隐式动画（Implicit Animations）"></a>隐式动画（Implicit Animations）</h3><p>隐式动画是由 Core Animation 框架自动处理的动画效果。它们不需要显式地创建动画对象，系统会自动为你生成动画效果。</p><p><strong>特点</strong>:</p><ol><li><strong>自动触发</strong>: 隐式动画通常在更改 <code>CALayer</code> 的可动画属性时自动触发，如 <code>position</code>、<code>opacity</code>、<code>backgroundColor</code> 等。</li><li><strong>简洁</strong>: 隐式动画不需要显式地声明动画对象，代码更简洁。</li><li><strong>默认持续时间</strong>: 隐式动画有默认的动画持续时间，通常为 0.25 秒。</li><li><strong>可定制</strong>: 可以通过事务（<code>CATransaction</code>）来定制隐式动画的属性，如持续时间、动画曲线等。</li></ol><p><strong>示例</strong>:</p><figure class="highlight swift hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ViewController</span>: <span class="hljs-title">UIViewController</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">var</span> myLayer: <span class="hljs-type">CALayer</span>!</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">viewDidLoad</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">        <span class="hljs-keyword">super</span>.viewDidLoad()</span><br><span class="line"></span><br><span class="line">        myLayer = <span class="hljs-type">CALayer</span>()</span><br><span class="line">        myLayer.frame = <span class="hljs-type">CGRect</span>(x: <span class="hljs-number">50</span>, y: <span class="hljs-number">50</span>, width: <span class="hljs-number">100</span>, height: <span class="hljs-number">100</span>)</span><br><span class="line">        myLayer.backgroundColor = <span class="hljs-type">UIColor</span>.blue.cgColor</span><br><span class="line">        view.layer.addSublayer(myLayer)</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">// 使用隐式动画更改属性</span></span><br><span class="line">        <span class="hljs-type">DispatchQueue</span>.main.asyncAfter(deadline: .now() + <span class="hljs-number">1</span>) &#123;</span><br><span class="line">            <span class="hljs-type">CATransaction</span>.begin()</span><br><span class="line">            <span class="hljs-type">CATransaction</span>.setAnimationDuration(<span class="hljs-number">2.0</span>)</span><br><span class="line">            <span class="hljs-keyword">self</span>.myLayer.position = <span class="hljs-type">CGPoint</span>(x: <span class="hljs-number">200</span>, y: <span class="hljs-number">300</span>)</span><br><span class="line">            <span class="hljs-keyword">self</span>.myLayer.backgroundColor = <span class="hljs-type">UIColor</span>.red.cgColor</span><br><span class="line">            <span class="hljs-type">CATransaction</span>.commit()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="显式动画（Explicit-Animations）"><a href="#显式动画（Explicit-Animations）" class="headerlink" title="显式动画（Explicit Animations）"></a>显式动画（Explicit Animations）</h3><p>显式动画是开发者明确创建并添加到图层上的动画对象。它们提供了更高的控制粒度，可以对动画的各个方面进行精细控制。</p><p><strong>特点</strong>:</p><ol><li><strong>明确声明</strong>: 显式动画需要显式地创建动画对象，如 <code>CABasicAnimation</code>、<code>CAKeyframeAnimation</code>、<code>CAAnimationGroup</code> 等。</li><li><strong>精细控制</strong>: 显式动画允许精细控制动画的各个方面，包括起始值、结束值、持续时间、重复次数、动画曲线等。</li><li><strong>复合动画</strong>: 可以组合多个动画，形成复杂的动画效果。</li><li><strong>更多类型</strong>: 提供了多种类型的动画，如基础动画、关键帧动画、路径动画、组动画等。</li></ol><p><strong>示例</strong>:</p><figure class="highlight swift hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ViewController</span>: <span class="hljs-title">UIViewController</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">var</span> myLayer: <span class="hljs-type">CALayer</span>!</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">viewDidLoad</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">        <span class="hljs-keyword">super</span>.viewDidLoad()</span><br><span class="line"></span><br><span class="line">        myLayer = <span class="hljs-type">CALayer</span>()</span><br><span class="line">        myLayer.frame = <span class="hljs-type">CGRect</span>(x: <span class="hljs-number">50</span>, y: <span class="hljs-number">50</span>, width: <span class="hljs-number">100</span>, height: <span class="hljs-number">100</span>)</span><br><span class="line">        myLayer.backgroundColor = <span class="hljs-type">UIColor</span>.blue.cgColor</span><br><span class="line">        view.layer.addSublayer(myLayer)</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">// 创建显式动画</span></span><br><span class="line">        <span class="hljs-type">DispatchQueue</span>.main.asyncAfter(deadline: .now() + <span class="hljs-number">1</span>) &#123;</span><br><span class="line">            <span class="hljs-keyword">let</span> positionAnimation = <span class="hljs-type">CABasicAnimation</span>(keyPath: <span class="hljs-string">"position"</span>)</span><br><span class="line">            positionAnimation.fromValue = <span class="hljs-keyword">self</span>.myLayer.position</span><br><span class="line">            positionAnimation.toValue = <span class="hljs-type">CGPoint</span>(x: <span class="hljs-number">200</span>, y: <span class="hljs-number">300</span>)</span><br><span class="line">            positionAnimation.duration = <span class="hljs-number">2.0</span></span><br><span class="line"></span><br><span class="line">            <span class="hljs-keyword">let</span> colorAnimation = <span class="hljs-type">CABasicAnimation</span>(keyPath: <span class="hljs-string">"backgroundColor"</span>)</span><br><span class="line">            colorAnimation.fromValue = <span class="hljs-type">UIColor</span>.blue.cgColor</span><br><span class="line">            colorAnimation.toValue = <span class="hljs-type">UIColor</span>.red.cgColor</span><br><span class="line">            colorAnimation.duration = <span class="hljs-number">2.0</span></span><br><span class="line"></span><br><span class="line">            <span class="hljs-comment">// 添加动画到图层</span></span><br><span class="line">            <span class="hljs-keyword">self</span>.myLayer.add(positionAnimation, forKey: <span class="hljs-string">"positionAnimation"</span>)</span><br><span class="line">            <span class="hljs-keyword">self</span>.myLayer.add(colorAnimation, forKey: <span class="hljs-string">"colorAnimation"</span>)</span><br><span class="line"></span><br><span class="line">            <span class="hljs-comment">// 更新图层属性</span></span><br><span class="line">            <span class="hljs-keyword">self</span>.myLayer.position = <span class="hljs-type">CGPoint</span>(x: <span class="hljs-number">200</span>, y: <span class="hljs-number">300</span>)</span><br><span class="line">            <span class="hljs-keyword">self</span>.myLayer.backgroundColor = <span class="hljs-type">UIColor</span>.red.cgColor</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><ul><li><strong>隐式动画</strong>:<ul><li>自动触发，代码简洁。</li><li>适用于简单的动画效果。</li><li>可以通过事务（<code>CATransaction</code>）进行有限的定制。</li></ul></li><li><strong>显式动画</strong>:<ul><li>需要显式地创建动画对象。</li><li>提供更高的控制粒度，适用于复杂的动画效果。</li><li>支持多种动画类型和复合动画。</li></ul></li></ul><p>选择使用隐式动画还是显式动画取决于具体的需求和场景。如果需要实现简单的动画效果，隐式动画通常足够且更简洁；如果需要复杂的、多步骤的动画效果，显式动画则提供了更强大的控制能力。</p><h2 id="7-了解的设计原则和设计模式，结合项目"><a href="#7-了解的设计原则和设计模式，结合项目" class="headerlink" title="7.了解的设计原则和设计模式，结合项目"></a>7.了解的设计原则和设计模式，结合项目</h2><h4 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h4><p>单一职责：一个类只负责一件事，UIView和CALayer</p><p>开闭原则：对修改关闭，对扩展开放 Cagrgory</p><p>接口隔离原则：使用多个专门的协议，而不是一个庞大臃肿的协议，协议中的方法尽量少  UITableView</p><p>依赖倒置原则：抽象不应该依赖于具体实现，具体实现可以依赖于抽象</p><p>里氏替换原则：父类可以被子类无缝替换，且原有功能不受任何影响 KVO</p><p>迪米特法则：一个对象应当对其他对象尽可能少的了解，高内聚、低耦合</p><h2 id="8-block的本质"><a href="#8-block的本质" class="headerlink" title="8.block的本质"></a>8.block的本质</h2><h2 id="9-算法：查找字符串的无重复字符子串的最大长度"><a href="#9-算法：查找字符串的无重复字符子串的最大长度" class="headerlink" title="9.算法：查找字符串的无重复字符子串的最大长度"></a>9.算法：查找字符串的无重复字符子串的最大长度</h2><p><a href="https://leetcode.cn/problems/longest-substring-without-repeating-characters/description/" target="_blank" rel="noopener">无重复字符的最长子串-力扣</a></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * @param &#123;string&#125; s</span></span><br><span class="line"><span class="hljs-comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-keyword">var</span> lengthOfLongestSubstring = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">s</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> len = s.length;</span><br><span class="line">    <span class="hljs-keyword">let</span> set = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>();</span><br><span class="line">    <span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">let</span> maxLenth = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">while</span> (i &lt; len &amp;&amp; j &lt; len) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (!set.has(s[j])) &#123;</span><br><span class="line">            set.add(s[j]);</span><br><span class="line">            j++;</span><br><span class="line">            maxLenth = <span class="hljs-built_in">Math</span>.max(maxLenth, j - i);</span><br><span class="line">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">            set.delete(s[i]);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> maxLenth;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;字节跳动&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="面试题" scheme="http://soso.wiki/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试" scheme="http://soso.wiki/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="字节跳动" scheme="http://soso.wiki/tags/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8/"/>
    
  </entry>
  
</feed>
