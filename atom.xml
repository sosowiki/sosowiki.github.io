<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SOSOWIKI</title>
  <icon>https://www.gravatar.com/avatar/0add61f863154d82902310b0dd29ec33</icon>
  <subtitle>SOSOWIKI</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://soso.wiki/"/>
  <updated>2025-10-31T05:44:59.562Z</updated>
  <id>http://soso.wiki/</id>
  
  <author>
    <name>SOSOWIKI</name>
    <email>swift@88.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>网易</title>
    <link href="http://soso.wiki/%E7%BD%91%E6%98%93/"/>
    <id>http://soso.wiki/网易/</id>
    <published>2025-10-29T08:00:00.000Z</published>
    <updated>2025-10-31T05:44:59.562Z</updated>
    
    <content type="html"><![CDATA[<p>网易</p><a id="more"></a><p>一面：</p><p>1.UIButton 的父类依次是什么？各自的作用？除了 NSObject 还有别的基类吗？Swift 里有基类吗？Swift 里的枚举和 OC 的枚举有什么区别？</p><p>2.下面代码的打印结果是：</p><figure class="highlight objc hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">Animal</span> : <span class="hljs-title">NSObject</span></span></span><br><span class="line"><span class="hljs-keyword">@end</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">@implementation</span> <span class="hljs-title">Animal</span></span></span><br><span class="line"><span class="hljs-keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">Cat</span> : <span class="hljs-title">Animal</span></span></span><br><span class="line"><span class="hljs-keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">@implementation</span> <span class="hljs-title">Cat</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="hljs-keyword">instancetype</span>)init &#123;</span><br><span class="line">    <span class="hljs-keyword">self</span> = [<span class="hljs-keyword">super</span> init];</span><br><span class="line">    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>) &#123;</span><br><span class="line">        <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@"%@"</span>, <span class="hljs-built_in">NSStringFromClass</span>([<span class="hljs-keyword">self</span> <span class="hljs-keyword">class</span>]));</span><br><span class="line">        <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@"%@"</span>, <span class="hljs-built_in">NSStringFromClass</span>([<span class="hljs-keyword">super</span> <span class="hljs-keyword">class</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> main() &#123;</span><br><span class="line">    Cat *c = [[Cat alloc] init];</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么打印结果是 Cat</p><p>3.下面代码的输出结果是：</p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">int</span> a[<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;</span><br><span class="line"><span class="hljs-keyword">int</span> *ptr = (<span class="hljs-keyword">int</span> *)(&amp;a + <span class="hljs-number">1</span>);</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d, %d"</span>, *(a+<span class="hljs-number">1</span>), *(ptr - <span class="hljs-number">1</span>));</span><br></pre></td></tr></table></figure><p>4.下面代码运行的结果是</p><figure class="highlight objc hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="hljs-keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">  [<span class="hljs-keyword">super</span> viewDidLoad];</span><br><span class="line">  <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@"1"</span>)</span><br><span class="line">    <span class="hljs-built_in">dispatch_sync</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">        <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@"2"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@"3"</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>如果把sync换成async，打印结果有什么不同，如果执行非常多的次数，会出现1,2,3吗？</p><p>5.下面代码的执行结果是？</p><figure class="highlight objc hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">NSMutableString</span> *a = [<span class="hljs-built_in">NSMutableString</span> string];</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">NSMutableString</span> *b = [a <span class="hljs-keyword">copy</span>];</span><br><span class="line"></span><br><span class="line">[b stringByAppendingString:<span class="hljs-string">@"test"</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@"%p"</span>, &amp;a);</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@"%p"</span>, &amp;b);</span><br></pre></td></tr></table></figure><p>a和b的地址一样吗？</p><p>b会崩溃吗？</p><p>6.哪一个会崩溃</p><p>A.</p><p>B.字典插入nil</p><p>C.对nil发消息</p><p>D.对非nil发消息，没有该方法</p><p>7.响应者链，查找视图和响应者链同时进行吗？</p><p>8.口述算法：判断链表是否有环</p><p>有一个 500G 的大文件，内存只能使用 20M，要找到 Top10，怎么处理？</p><p>9.Runtime 和 Runloop 的应用，消息机制，如果一个类方法找不到，找到最后有个同名的实例方法，会调用吗？</p><p>10.KVC 的原理，KVO 的原理</p><p>11.页面流畅度优化</p><p>项目：</p><p>构建提效做了哪些</p><p>了解 Socket 吗？</p><p>算法：</p><p>1.爬楼梯</p><p>2.两数之和二  一个非降序数组，和target，不使用额外空间，只遍历一次</p><p>介绍项目里有挑战的</p><p>二面：</p><p>1.iOS方向了解的比较深入的东西</p><p>2.这段代码执行后，打印顺序是什么？为什么？</p><figure class="highlight swift hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> group = <span class="hljs-type">DispatchGroup</span>()</span><br><span class="line"></span><br><span class="line">group.notify(queue: .global()) &#123;</span><br><span class="line">    <span class="hljs-built_in">print</span>(<span class="hljs-string">"1"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">group.enter()</span><br><span class="line"></span><br><span class="line">group.notify(queue: .global()) &#123;</span><br><span class="line">    <span class="hljs-built_in">print</span>(<span class="hljs-string">"2"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">group.leave()</span><br><span class="line"></span><br><span class="line">group.enter()</span><br><span class="line"></span><br><span class="line">group.notify(queue: .global()) &#123;</span><br><span class="line">    <span class="hljs-built_in">print</span>(<span class="hljs-string">"3"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>gcd. group notify 如果让你实现一个类似 gcd group enter  leave 如何实现</p><p>3.tableView cell 复用，你怎么实现一个类似的复用池  有identifer和Cell类型</p><p>4.今年 WWDC 有哪些新东西？</p><p>5.做过 iPad 和 Mac 的适配吗？自动布局，图片按16:9怎么写约束，左侧 label 超出屏幕宽度一半时，把右侧 label 放在下一行。为什么要把视图添加到 cell.contentView 上，而不是直接添加到 cell 上？</p><p>6.写过 python 吗？</p><p>7.做过 IAP 和国际化吗？</p><p>8.做过 CI 吗？流水线静态分析错误是你做的吗？</p><p>9.大学学了哪些课程，学过设计模式吗？学过 Java 吗？</p><p>10.用 AI 做过哪些工具</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;网易&lt;/p&gt;
    
    </summary>
    
      <category term="面试题" scheme="http://soso.wiki/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试" scheme="http://soso.wiki/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="网易" scheme="http://soso.wiki/tags/%E7%BD%91%E6%98%93/"/>
    
  </entry>
  
  <entry>
    <title>点众科技</title>
    <link href="http://soso.wiki/%E7%82%B9%E4%BC%97%E7%A7%91%E6%8A%80/"/>
    <id>http://soso.wiki/点众科技/</id>
    <published>2025-10-27T09:00:00.000Z</published>
    <updated>2025-10-31T05:43:42.497Z</updated>
    
    <content type="html"><![CDATA[<p>点众科技</p><a id="more"></a><p>一面：</p><p>1.组件化，哪种最好</p><p>2.做过内购吗？</p><p>3.做过哪些性能优化？启动优化，main之后，做过二进制重排吗？webp打包出来会比png小吗？</p><p>4.runtime流程，应用</p><p>5.分类都用到哪些地方</p><p>6.遇到过死锁吗？</p><p>7.多线程用的多吗？</p><p>8.NSTimer循环引用，中间对象用NSObject和NSProxy在流程上有什么区别？写法一样吗？在dealloc里停掉定时器可以吗？5s的定时器打印，提前关掉定时器还会打印吗？用weakSelf能解决循环引用吗？</p><p>9.属性修饰符都有哪些？</p><p>（1）nonatomic和atomic区别</p><p>（2）可变数组为什么用Strong，不可变数组为什么用copy，用strong有什么问题？</p><p>（3）block为什么用copy，MRC下能用retain吗？新创建的类被宏定义包裹是什么作用？类似swift中的？可选类型，unnull或nullable</p><p>10.做过广告吗？做过播放器吗？</p><p>11.口述算法：在非负int值的数组，所有元素都用上，可以+或-，结果为target，能有多少种写法？时间复杂度是多少？</p><p>二面：</p><p>1.介绍项目，组件化除了路由，需要注册，还了解哪些不需要注册的方案吗？target-action怎么实现的？让你设计一个不依赖注册的组件化，如何设计？</p><p>2.运行时runtime是怎么实现的？runtime的API，方法交互，KVO，新生成一个类，注册类的信息，还有别的吗？</p><p>3.从0到1的项目，需要注意哪些？</p><p>4.swift基于协议，怎么理解协议，在什么场景用协议多一些？组件传值用协议感觉不够泛</p><p>5.视频通话流程，是客户端录制吗？</p><p>三面：</p><p>1.介绍遇到的有挑战的问题与解决方案</p><p>2.怎么知识管理的？</p><p>3.未来规划</p><p>4.想找一个什么样的工作？</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;点众科技&lt;/p&gt;
    
    </summary>
    
      <category term="面试题" scheme="http://soso.wiki/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试" scheme="http://soso.wiki/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="点众科技" scheme="http://soso.wiki/tags/%E7%82%B9%E4%BC%97%E7%A7%91%E6%8A%80/"/>
    
      <category term="北京短剧快照" scheme="http://soso.wiki/tags/%E5%8C%97%E4%BA%AC%E7%9F%AD%E5%89%A7%E5%BF%AB%E7%85%A7/"/>
    
      <category term="DramaBox" scheme="http://soso.wiki/tags/DramaBox/"/>
    
  </entry>
  
  <entry>
    <title>新浪微博</title>
    <link href="http://soso.wiki/%E6%96%B0%E6%B5%AA%E5%BE%AE%E5%8D%9A/"/>
    <id>http://soso.wiki/新浪微博/</id>
    <published>2025-10-27T02:30:00.000Z</published>
    <updated>2025-10-31T05:39:12.313Z</updated>
    
    <content type="html"><![CDATA[<p>新浪微博</p><a id="more"></a><p>1.打印结果<br><figure class="highlight objc hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="hljs-keyword">void</span>)test &#123;</span><br><span class="line">    <span class="hljs-built_in">dispatch_sync</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">        <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@"任务1"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@"任务2"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2.打印结果</p><figure class="highlight objc hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">dispatch_semaphore_t sem = dispatch_semaphore_create(<span class="hljs-number">1</span>);</span><br><span class="line">dispatch_time_t timeout = dispatch_time(DISPATCH_TIME_NOW, <span class="hljs-number">3</span> * <span class="hljs-built_in">NSEC_PER_SEC</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="hljs-number">0</span>), ^&#123;</span><br><span class="line">    dispatch_semaphore_wait(sem, timeout);</span><br><span class="line">    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@"开始执行任务1"</span>);</span><br><span class="line">    sleep(<span class="hljs-number">2</span>);</span><br><span class="line">    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@"任务1执行结束"</span>);</span><br><span class="line">    dispatch_semaphore_signal(sem);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="hljs-number">0</span>), ^&#123;</span><br><span class="line">    sleep(<span class="hljs-number">1</span>);</span><br><span class="line">    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@"开始执行任务2"</span>);</span><br><span class="line">    dispatch_semaphore_wait(sem, timeout);</span><br><span class="line">    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@"任务2执行结束"</span>);</span><br><span class="line">    dispatch_semaphore_signal(sem);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>3.以下关于 CALayer 的描述，哪项是正确的？</p><p>A. CALayer 只能处理基本的触摸事件<br>B. CALayer 的绘制主要在 CPU 端完成，而 CAAnimation 的动画执行在 GPU 上加速<br>C. CALayer.contents 只能设置为 CGImageRef<br>D. CALayer 不能有层级结构，而 UIView 可以</p><p>4.设计 service 层，播放 gif 或视频，service 被谁持有？只是类方法作为工具方法的话意义不大</p><p>5.从某一个入口进入到页面，在 viewWillAppear 里打日志，可能是不同的页面，入口是后端下发的，不用 baseVC，如何实现？</p><p>面试前需要完成的AI编程题见最后。</p><h2 id="参考答案"><a href="#参考答案" class="headerlink" title="参考答案"></a>参考答案</h2><p>1.打印结果</p><figure class="highlight objc hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="hljs-keyword">void</span>)test &#123;</span><br><span class="line">    <span class="hljs-built_in">dispatch_sync</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">        <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@"任务1"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@"任务2"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>死锁，没有任何输出</p><p>若改为 dispatch_async，输入顺序是：任务2  任务1</p><p>2.打印结果</p><figure class="highlight objc hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">dispatch_semaphore_t sem = dispatch_semaphore_create(<span class="hljs-number">1</span>);</span><br><span class="line">dispatch_time_t timeout = dispatch_time(DISPATCH_TIME_NOW, <span class="hljs-number">3</span> * <span class="hljs-built_in">NSEC_PER_SEC</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="hljs-number">0</span>), ^&#123;</span><br><span class="line">    dispatch_semaphore_wait(sem, timeout);</span><br><span class="line">    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@"开始执行任务1"</span>);</span><br><span class="line">    sleep(<span class="hljs-number">2</span>);</span><br><span class="line">    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@"任务1执行结束"</span>);</span><br><span class="line">    dispatch_semaphore_signal(sem);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="hljs-number">0</span>), ^&#123;</span><br><span class="line">    sleep(<span class="hljs-number">1</span>);</span><br><span class="line">    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@"开始执行任务2"</span>);</span><br><span class="line">    dispatch_semaphore_wait(sem, timeout);</span><br><span class="line">    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@"任务2执行结束"</span>);</span><br><span class="line">    dispatch_semaphore_signal(sem);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>执行过程分析</p><ol><li>创建信号量 sem，初始值为 1。</li><li>信号量初始为 1，表示允许一个线程进入临界区。</li></ol><p>任务 1</p><ul><li>立即开始执行（因为是异步提交）。</li><li>dispatch_semaphore_wait(sem, timeout) 时，sem 的值为 1 → 减为 0 → 立即通过。</li><li>打印：开始执行任务1</li><li>然后 sleep(2)，意味着任务 1 占用信号量约 2 秒。</li></ul><p>任务 2</p><ul><li>延迟 1 秒后才开始（因为 sleep(1)）。</li><li>打印：开始执行任务2</li><li>此时（第 1 秒时），任务 1 还在执行（sleep(2)），sem = 0。</li><li>所以 dispatch_semaphore_wait(sem, timeout) 会阻塞等待信号量变为 1。</li></ul><p>超时判断</p><ul><li>任务 2 最多等待 3 秒。</li><li>任务 1 在第 2 秒时执行完毕，打印：任务1执行结束</li><li>并 dispatch_semaphore_signal(sem)，使 sem = 1。</li><li>此时任务 2 等待时间仅约 1 秒（没超时），于是立即通过。</li><li>继续打印：任务2执行结束</li></ul><p>最终打印顺序</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">开始执行任务1</span><br><span class="line">开始执行任务2</span><br><span class="line">任务1执行结束</span><br><span class="line">任务2执行结束</span><br></pre></td></tr></table></figure><p>延伸思考</p><p>如果把任务 1 的 sleep(2) 改成 sleep(5)，则任务 2 等待信号量会超时 3 秒后直接返回。<br>此时 dispatch_semaphore_wait 返回非 0（超时），任务 2 会继续执行后续代码，打印顺序会变为：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">开始执行任务1</span><br><span class="line">开始执行任务2</span><br><span class="line">任务2执行结束   ← 超时先执行</span><br><span class="line">任务1执行结束</span><br></pre></td></tr></table></figure><p>3.以下关于 CALayer 的描述，哪项是正确的？</p><p>A. CALayer 只能处理基本的触摸事件<br>B. CALayer 的绘制主要在 CPU 端完成，而 CAAnimation 的动画执行在 GPU 上加速<br>C. CALayer.contents 只能设置为 CGImageRef<br>D. CALayer 不能有层级结构，而 UIView 可以</p><p>解析：</p><p>A.错误 </p><p>CALayer <strong>不处理任何触摸事件</strong>，触摸事件完全由 UIView（或更上层的 UIResponder）处理。</p><p>B.正确</p><ul><li>解释：<ul><li>CALayer 的<strong>内容绘制</strong>（drawInContext:）通常在 <strong>CPU</strong> 上进行；</li><li>绘制完成后，Core Animation 将位图数据提交到 <strong>GPU</strong>；</li><li>当应用 CAAnimation（比如 position、opacity、transform）时，动画由 <strong>Render Server + GPU</strong> 执行；</li><li>因此动画可以在主线程外平滑运行，不会被 CPU 卡顿直接阻塞。</li></ul></li></ul><p>C.错误</p><ul><li>CALayer 的 contents 是 id 类型，通常用来显示 CGImageRef（UIImage 的底层图像）</li><li>但也可以设置为其他类型（如 CIImage、NSImage，底层仍会转成 CGImageRef）。</li></ul><p>D.错误</p><ul><li><p>CALayer 同样有层级结构</p><figure class="highlight objc hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[parentLayer addSublayer:childLayer];</span><br></pre></td></tr></table></figure></li></ul><p>4.设计 Service 层，播放 GIF 或视频，service 被谁持有？只是类方法作为工具方法的话意义不大</p><p>设计一个 <strong>Service 层（播放服务）</strong>，支持以下功能：</p><ol><li>支持 <strong>GIF 和视频</strong> 播放。</li><li>对外提供统一接口（不关心内部是视频还是 GIF）。</li><li>支持控制播放、暂停、停止。</li><li>可扩展（未来可能支持 Live Photo、动画序列帧等）。</li></ol><p>我们用 <strong>策略模式 + 简单工厂</strong> 来实现。</p><ol><li>播放协议（统一接口）</li></ol><figure class="highlight objc hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// LJRPPlayable.h</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">@protocol</span> <span class="hljs-title">LJRPPlayable</span> &lt;<span class="hljs-title">NSObject</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/// 准备播放资源</span></span><br><span class="line">- (<span class="hljs-keyword">void</span>)prepareWithURL:(<span class="hljs-built_in">NSURL</span> *)url inView:(<span class="hljs-built_in">UIView</span> *)containerView;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/// 开始播放</span></span><br><span class="line">- (<span class="hljs-keyword">void</span>)play;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/// 暂停</span></span><br><span class="line">- (<span class="hljs-keyword">void</span>)pause;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/// 停止并释放资源</span></span><br><span class="line">- (<span class="hljs-keyword">void</span>)stop;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/// 当前是否在播放</span></span><br><span class="line">- (<span class="hljs-built_in">BOOL</span>)isPlaying;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">@end</span></span><br></pre></td></tr></table></figure><ol start="2"><li>GIF 播放器实现</li></ol><p>你可以用 FLAnimatedImageView 或 SDAnimatedImageView 来播放 GIF。</p><figure class="highlight objc hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// LJRPGifPlayer.h</span></span><br><span class="line"><span class="hljs-meta">#import <span class="hljs-meta-string">"LJRPPlayable.h"</span></span></span><br><span class="line"><span class="hljs-meta">#import <span class="hljs-meta-string">&lt;SDWebImage/SDAnimatedImageView.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">LJRPGifPlayer</span> : <span class="hljs-title">NSObject</span> &lt;<span class="hljs-title">LJRPPlayable</span>&gt;</span></span><br><span class="line"><span class="hljs-keyword">@end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// LJRPGifPlayer.m</span></span><br><span class="line"><span class="hljs-meta">#import <span class="hljs-meta-string">"LJRPGifPlayer.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">LJRPGifPlayer</span> ()</span></span><br><span class="line"><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">strong</span>) SDAnimatedImageView *imageView;</span><br><span class="line"><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">assign</span>) <span class="hljs-built_in">BOOL</span> isPlaying;</span><br><span class="line"><span class="hljs-keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">@implementation</span> <span class="hljs-title">LJRPGifPlayer</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="hljs-keyword">void</span>)prepareWithURL:(<span class="hljs-built_in">NSURL</span> *)url inView:(<span class="hljs-built_in">UIView</span> *)containerView &#123;</span><br><span class="line">    <span class="hljs-keyword">self</span>.imageView = [[SDAnimatedImageView alloc] initWithFrame:containerView.bounds];</span><br><span class="line">    <span class="hljs-keyword">self</span>.imageView.contentMode = <span class="hljs-built_in">UIViewContentModeScaleAspectFit</span>;</span><br><span class="line">    [containerView addSubview:<span class="hljs-keyword">self</span>.imageView];</span><br><span class="line">    [<span class="hljs-keyword">self</span>.imageView sd_setImageWithURL:url];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="hljs-keyword">void</span>)play &#123;</span><br><span class="line">    [<span class="hljs-keyword">self</span>.imageView startAnimating];</span><br><span class="line">    <span class="hljs-keyword">self</span>.isPlaying = <span class="hljs-literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="hljs-keyword">void</span>)pause &#123;</span><br><span class="line">    [<span class="hljs-keyword">self</span>.imageView stopAnimating];</span><br><span class="line">    <span class="hljs-keyword">self</span>.isPlaying = <span class="hljs-literal">NO</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="hljs-keyword">void</span>)stop &#123;</span><br><span class="line">    [<span class="hljs-keyword">self</span>.imageView stopAnimating];</span><br><span class="line">    [<span class="hljs-keyword">self</span>.imageView removeFromSuperview];</span><br><span class="line">    <span class="hljs-keyword">self</span>.imageView = <span class="hljs-literal">nil</span>;</span><br><span class="line">    <span class="hljs-keyword">self</span>.isPlaying = <span class="hljs-literal">NO</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="hljs-built_in">BOOL</span>)isPlaying &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">self</span>.isPlaying;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">@end</span></span><br></pre></td></tr></table></figure><ol start="3"><li>视频播放器实现</li></ol><p>使用 AVPlayer：</p><figure class="highlight objc hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// LJRPVideoPlayer.h</span></span><br><span class="line"><span class="hljs-meta">#import <span class="hljs-meta-string">"LJRPPlayable.h"</span></span></span><br><span class="line"><span class="hljs-meta">#import <span class="hljs-meta-string">&lt;AVFoundation/AVFoundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">LJRPVideoPlayer</span> : <span class="hljs-title">NSObject</span> &lt;<span class="hljs-title">LJRPPlayable</span>&gt;</span></span><br><span class="line"><span class="hljs-keyword">@end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// LJRPVideoPlayer.m</span></span><br><span class="line"><span class="hljs-meta">#import <span class="hljs-meta-string">"LJRPVideoPlayer.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">LJRPVideoPlayer</span> ()</span></span><br><span class="line"><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">strong</span>) <span class="hljs-built_in">AVPlayer</span> *player;</span><br><span class="line"><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">strong</span>) <span class="hljs-built_in">AVPlayerLayer</span> *playerLayer;</span><br><span class="line"><span class="hljs-keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">@implementation</span> <span class="hljs-title">LJRPVideoPlayer</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="hljs-keyword">void</span>)prepareWithURL:(<span class="hljs-built_in">NSURL</span> *)url inView:(<span class="hljs-built_in">UIView</span> *)containerView &#123;</span><br><span class="line">    <span class="hljs-built_in">AVPlayerItem</span> *item = [<span class="hljs-built_in">AVPlayerItem</span> playerItemWithURL:url];</span><br><span class="line">    <span class="hljs-keyword">self</span>.player = [<span class="hljs-built_in">AVPlayer</span> playerWithPlayerItem:item];</span><br><span class="line">    <span class="hljs-keyword">self</span>.playerLayer = [<span class="hljs-built_in">AVPlayerLayer</span> playerLayerWithPlayer:<span class="hljs-keyword">self</span>.player];</span><br><span class="line">    <span class="hljs-keyword">self</span>.playerLayer.frame = containerView.bounds;</span><br><span class="line">    <span class="hljs-keyword">self</span>.playerLayer.videoGravity = <span class="hljs-built_in">AVLayerVideoGravityResizeAspect</span>;</span><br><span class="line">    [containerView.layer addSublayer:<span class="hljs-keyword">self</span>.playerLayer];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="hljs-keyword">void</span>)play &#123;</span><br><span class="line">    [<span class="hljs-keyword">self</span>.player play];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="hljs-keyword">void</span>)pause &#123;</span><br><span class="line">    [<span class="hljs-keyword">self</span>.player pause];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="hljs-keyword">void</span>)stop &#123;</span><br><span class="line">    [<span class="hljs-keyword">self</span>.player pause];</span><br><span class="line">    [<span class="hljs-keyword">self</span>.playerLayer removeFromSuperlayer];</span><br><span class="line">    <span class="hljs-keyword">self</span>.player = <span class="hljs-literal">nil</span>;</span><br><span class="line">    <span class="hljs-keyword">self</span>.playerLayer = <span class="hljs-literal">nil</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="hljs-built_in">BOOL</span>)isPlaying &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">self</span>.player.rate != <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">@end</span></span><br></pre></td></tr></table></figure><ol start="4"><li>Service 层：统一调度入口</li></ol><figure class="highlight objc hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// LJRPPlayService.h</span></span><br><span class="line"><span class="hljs-meta">#import <span class="hljs-meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#import <span class="hljs-meta-string">"LJRPPlayable.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">NS_ENUM</span>(<span class="hljs-built_in">NSUInteger</span>, LJRPPlayType) &#123;</span><br><span class="line">    LJRPPlayTypeGif,</span><br><span class="line">    LJRPPlayTypeVideo</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">LJRPPlayService</span> : <span class="hljs-title">NSObject</span></span></span><br><span class="line"></span><br><span class="line">+ (<span class="hljs-keyword">instancetype</span>)sharedService;</span><br><span class="line"></span><br><span class="line">- (<span class="hljs-keyword">id</span>&lt;LJRPPlayable&gt;)createPlayerWithType:(LJRPPlayType)type;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">@end</span></span><br></pre></td></tr></table></figure><figure class="highlight objc hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// LJRPPlayService.m</span></span><br><span class="line"><span class="hljs-meta">#import <span class="hljs-meta-string">"LJRPPlayService.h"</span></span></span><br><span class="line"><span class="hljs-meta">#import <span class="hljs-meta-string">"LJRPGifPlayer.h"</span></span></span><br><span class="line"><span class="hljs-meta">#import <span class="hljs-meta-string">"LJRPVideoPlayer.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">@implementation</span> <span class="hljs-title">LJRPPlayService</span></span></span><br><span class="line"></span><br><span class="line">+ (<span class="hljs-keyword">instancetype</span>)sharedService &#123;</span><br><span class="line">    <span class="hljs-keyword">static</span> LJRPPlayService *instance;</span><br><span class="line">    <span class="hljs-keyword">static</span> <span class="hljs-built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">    <span class="hljs-built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">        instance = [[<span class="hljs-keyword">self</span> alloc] init];</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="hljs-keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="hljs-keyword">id</span>&lt;LJRPPlayable&gt;)createPlayerWithType:(LJRPPlayType)type &#123;</span><br><span class="line">    <span class="hljs-keyword">switch</span> (type) &#123;</span><br><span class="line">        <span class="hljs-keyword">case</span> LJRPPlayTypeGif:</span><br><span class="line">            <span class="hljs-keyword">return</span> [[LJRPGifPlayer alloc] init];</span><br><span class="line">        <span class="hljs-keyword">case</span> LJRPPlayTypeVideo:</span><br><span class="line">            <span class="hljs-keyword">return</span> [[LJRPVideoPlayer alloc] init];</span><br><span class="line">        <span class="hljs-keyword">default</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">@end</span></span><br></pre></td></tr></table></figure><ol start="5"><li>使用示例</li></ol><figure class="highlight objc hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">NSURL</span> *url = [<span class="hljs-built_in">NSURL</span> URLWithString:<span class="hljs-string">@"https://example.com/demo.mp4"</span>];</span><br><span class="line"><span class="hljs-built_in">UIView</span> *container = <span class="hljs-keyword">self</span>.view; <span class="hljs-comment">// 播放容器</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">id</span>&lt;LJRPPlayable&gt; player = [[LJRPPlayService sharedService] createPlayerWithType:LJRPPlayTypeVideo];</span><br><span class="line">[player prepareWithURL:url inView:container];</span><br><span class="line">[player play];</span><br></pre></td></tr></table></figure><p>同样地，如果是 GIF：</p><figure class="highlight objc hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">id</span>&lt;LJRPPlayable&gt; player = [[LJRPPlayService sharedService] createPlayerWithType:LJRPPlayTypeGif];</span><br><span class="line">[player prepareWithURL:[<span class="hljs-built_in">NSURL</span> URLWithString:<span class="hljs-string">@"https://example.com/demo.gif"</span>] inView:container];</span><br><span class="line">[player play];</span><br></pre></td></tr></table></figure><p>优点总结：</p><ul><li><strong>高扩展性</strong>：未来新增 LJRPLivePhotoPlayer 只需实现 LJRPPlayable。</li><li><strong>低耦合</strong>：上层只依赖 Service 和 Protocol。</li><li><strong>清晰职责</strong>：播放逻辑下沉到 Service 层，UI 层只负责展示。</li></ul><p>5.从某一个入口进入到页面，在 viewWillAppear 里打日志，可能是不同的页面，入口是后端下发的，不用 baseVC，如何实现？</p><ul><li>页面可能是不同的 VC，不共用 BaseViewController；</li><li>页面入口是后端下发的路由跳转；</li><li>想在页面的 viewWillAppear 里打日志（比如统计从哪个入口进入了哪个页面）；</li><li>希望不用改每个 VC 的代码（或者尽量少改）。</li></ul><p>在全局对 UIViewController 的 viewWillAppear: 做一次 Method Swizzling，自动插入日志逻辑。</p><p>无需修改每个页面，只需在工程初始化时执行一次。</p><figure class="highlight objc hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// UIViewController+LogAppear.m</span></span><br><span class="line"><span class="hljs-meta">#import <span class="hljs-meta-string">"UIViewController+LogAppear.h"</span></span></span><br><span class="line"><span class="hljs-meta">#import <span class="hljs-meta-string">&lt;objc/runtime.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">@implementation</span> <span class="hljs-title">UIViewController</span> (<span class="hljs-title">LogAppear</span>)</span></span><br><span class="line"></span><br><span class="line">+ (<span class="hljs-keyword">void</span>)load &#123;</span><br><span class="line">    <span class="hljs-keyword">static</span> <span class="hljs-built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">    <span class="hljs-built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">        Method originalMethod = class_getInstanceMethod(<span class="hljs-keyword">self</span>, <span class="hljs-keyword">@selector</span>(viewWillAppear:));</span><br><span class="line">        Method swizzledMethod = class_getInstanceMethod(<span class="hljs-keyword">self</span>, <span class="hljs-keyword">@selector</span>(ljrp_viewWillAppear:));</span><br><span class="line">        method_exchangeImplementations(originalMethod, swizzledMethod);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="hljs-keyword">void</span>)ljrp_viewWillAppear:(<span class="hljs-built_in">BOOL</span>)animated &#123;</span><br><span class="line">    [<span class="hljs-keyword">self</span> ljrp_viewWillAppear:animated]; <span class="hljs-comment">// 调用原实现</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 过滤系统VC（如 UINavigationController / UIInputWindowController）</span></span><br><span class="line">    <span class="hljs-built_in">NSString</span> *className = <span class="hljs-built_in">NSStringFromClass</span>([<span class="hljs-keyword">self</span> <span class="hljs-keyword">class</span>]);</span><br><span class="line">    <span class="hljs-keyword">if</span> (![className hasPrefix:<span class="hljs-string">@"UI"</span>]) &#123;</span><br><span class="line">        <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@"[RouteLog] %@ will appear via route: %@"</span>, className, [<span class="hljs-keyword">self</span> ljrp_routeEntry]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 可选：保存入口信息</span></span><br><span class="line">- (<span class="hljs-keyword">void</span>)setLjrp_routeEntry:(<span class="hljs-built_in">NSString</span> *)entry &#123;</span><br><span class="line">    objc_setAssociatedObject(<span class="hljs-keyword">self</span>, <span class="hljs-keyword">@selector</span>(ljrp_routeEntry), entry, OBJC_ASSOCIATION_COPY_NONATOMIC);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="hljs-built_in">NSString</span> *)ljrp_routeEntry &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> objc_getAssociatedObject(<span class="hljs-keyword">self</span>, _cmd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">@end</span></span><br></pre></td></tr></table></figure><p>附：面试前需要完成的AI编程题</p><h1 id="AI编程面试题"><a href="#AI编程面试题" class="headerlink" title="AI编程面试题"></a>AI编程面试题</h1><h2 id="答题说明"><a href="#答题说明" class="headerlink" title="答题说明"></a>答题说明</h2><ul><li>请使用如通义灵码、Trae、Cursor及Windsurf等领先的国内外AI辅助开发工具来提升您的编程效率</li><li>题目中如有需要调用大模型的场景，请自行注册阿里云大模型、deepseek、火山引擎等大模型服务的API Key后进行调用，或者其他任何适合调用大模型的方法均可使用</li><li>题目考核的重点是对AI编程技术的理解与应用能力，而非严格的限制性要求。在满足基本要求的基础上，您可以自由发挥创意，设计独特的用户界面，并灵活选择合适的框架和编程语言。</li><li>面试前请将代码整理并打包发送给面试官。建议面试时携带答题所用的电脑，以便现场演示实现效果</li></ul><h2 id="以下题目，任选一个作答即可"><a href="#以下题目，任选一个作答即可" class="headerlink" title="以下题目，任选一个作答即可"></a>以下题目，任选一个作答即可</h2><h3 id="一、题目：用户注册登录系统"><a href="#一、题目：用户注册登录系统" class="headerlink" title="一、题目：用户注册登录系统"></a>一、题目：用户注册登录系统</h3><p>开发一个用户注册、登录、个人信息认证系统。</p><p>任务需求：</p><ul><li>语言、开发框架不限</li><li>系统包含Web前端界面和后端服务，支持用户和管理员登录</li><li>界面布局自行设计</li><li>用户通过手机号码注册（不需要发送验证码，仅把手机号当账号名）</li><li>通过账号密码登录</li><li>登录后，支持账号退出登录</li><li>用户登录后，可查看个人注册信息，并显示实名制认证状态</li><li>用户登录后，上传身份证正反面照片、姓名、身份证号信息到后端服务，进行实名认证</li><li>以管理员身份登录，查看照片、姓名、身份证号等用户信息，并设置用户实名信息是否验证通过</li></ul><h3 id="二、题目：新闻评论生成器"><a href="#二、题目：新闻评论生成器" class="headerlink" title="二、题目：新闻评论生成器"></a>二、题目：新闻评论生成器</h3><p>开发一个全栈式新闻评论生成系统，用户输入新闻链接后，系统自动生成新闻摘要并创建多条多样化的评论，支持不同语言风格和观点倾向。</p><p>任务需求：</p><ul><li>语言、开发框架不限</li><li>系统包含Web前端界面和后端服务</li><li>界面布局自行设计</li><li>支持输入一个网页url链接，并从网页中获取新闻，去除广告、导航等无关内容</li><li>使用大模型，根据新闻内容生成摘要，要求简洁，包含标题，主要事件和关键信息</li><li>使用大模型，为新闻生成多条不同语言风格、观点的评论，支持按照设定的风格和观点比例生成</li><li>支持以CSV格式导出全部评论</li><li>支持历史记录展示</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;新浪微博&lt;/p&gt;
    
    </summary>
    
      <category term="面试题" scheme="http://soso.wiki/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试" scheme="http://soso.wiki/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="微博" scheme="http://soso.wiki/tags/%E5%BE%AE%E5%8D%9A/"/>
    
      <category term="新浪微博" scheme="http://soso.wiki/tags/%E6%96%B0%E6%B5%AA%E5%BE%AE%E5%8D%9A/"/>
    
  </entry>
  
  <entry>
    <title>快手</title>
    <link href="http://soso.wiki/%E5%BF%AB%E6%89%8B/"/>
    <id>http://soso.wiki/快手/</id>
    <published>2025-10-24T08:00:00.000Z</published>
    <updated>2025-10-31T05:40:23.204Z</updated>
    
    <content type="html"><![CDATA[<p>快手</p><a id="more"></a><p>题目一：算法 反转链表二：指定区间反转链表</p><p>1.Block 有哪些，循环引用怎么解决？GCD 的 block 会循环引用吗？</p><p>2.KVO 的实现原理，派生类会销毁吗？用一句话总结：动态生成派生类，复写set方法；直接修改成员变量的值会触发 KVO 吗？NSMutableArray 里的元素变化，用 KVO 能监听到吗？想监听怎么实现？</p><p>3.Runtime 流程，应用</p><p>4.内存管理，weak 的实现原理</p><p>题目二：tableView cell 卡片有效的曝光</p><p>1.外漏超过50%</p><p>2.停留时长超过500ms</p><p>项目</p><p>SDK 体积优化，防劣化</p><p>对 AI 的使用</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;快手&lt;/p&gt;
    
    </summary>
    
      <category term="面试题" scheme="http://soso.wiki/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试" scheme="http://soso.wiki/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="快手" scheme="http://soso.wiki/tags/%E5%BF%AB%E6%89%8B/"/>
    
      <category term="快手直播" scheme="http://soso.wiki/tags/%E5%BF%AB%E6%89%8B%E7%9B%B4%E6%92%AD/"/>
    
  </entry>
  
  <entry>
    <title>作业帮</title>
    <link href="http://soso.wiki/%E4%BD%9C%E4%B8%9A%E5%B8%AE/"/>
    <id>http://soso.wiki/作业帮/</id>
    <published>2025-10-20T06:00:00.000Z</published>
    <updated>2025-10-31T05:37:35.927Z</updated>
    
    <content type="html"><![CDATA[<p>作业帮</p><a id="more"></a><p>一面：</p><p>1.Runtime 和 Runloop 应用，除了OC，还有哪些是动态语言</p><p>2.Swift 中 @objc 的作用</p><p>3.IM 断线重连，离线消息和在线消息；IM的监听回调的分发，多个页面都需要监听</p><p>4.Webp 加载慢</p><p>5.跟H5交互 频繁发消息</p><p>6.内购，支付成功后，接口返回失败</p><p>7.直播 动画，视频插帧，视频动画里的某一帧里新增自定义文字</p><p>8.怎么控制依赖库的打包顺序</p><p>9.import 尖括号和双引号，为什么尖括号就能找到第三方库的某一个文件，而不用完整路径</p><p>10.subspec 除了 dependency 还有哪些</p><p>11.移除 armv7 只支持真机吗？一些三方库带 armv7，为了提升打包速度，怎么移除</p><p>12.export </p><p>13.ipa 包里都有哪些东西</p><p>14.接口缓存</p><p>15.有没有写过一些脚本，提效的工作</p><p>16.js 的单线程和事件循环</p><p>算法：</p><p>任务并发控制的实现</p><p>// tasks 比如100个计算任务</p><p>// limit 最多3个</p><p>// allDoneCallback 所有任务执行完毕的回调</p><p>func excuteTasks(tasks: [func], limit: Int, allDoneCallback: func) {</p><p>…</p><p>}</p><p>二面：</p><p>1.Block 原理，循环引用</p><p>2.Runtime 应用，动态更新，为什么 OC 要这么设计？</p><p>3.Runloop 应用</p><p>4.做过哪些优化</p><p>算法：在10000个int数组里，找出最大的 topK 个数</p><p>参考答案</p><p>1.Runtime 和 Runloop 应用，除了OC，还有哪些是动态语言</p><p>2.Swift 中 @objc 的作用</p><table><thead><tr><th><strong>场景</strong></th><th><strong>是否需要</strong> @objc</th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Swift 调用 Swift</td><td>❌</td><td>无需</td></tr><tr><td>Swift 调用 Obj-C</td><td>❌</td><td>Swift 自动桥接</td></tr><tr><td>Obj-C 调用 Swift</td><td>✅</td><td>必须显式 @objc</td></tr><tr><td>使用 #selector</td><td>✅</td><td>否则编译错误</td></tr><tr><td>KVO / KVC</td><td>✅ @objc dynamic</td><td></td></tr><tr><td>Method Swizzling</td><td>✅ @objc dynamic</td><td></td></tr><tr><td>响应事件 (UIResponder)</td><td>自动添加</td><td>UIKit 内部已处理</td></tr></tbody></table><p>3.IM 断线重连，离线消息和在线消息；IM的监听回调的分发，多个页面都需要监听</p><p>4.Webp 加载慢</p><p>5.跟H5交互 频繁发消息</p><p>6.内购，支付成功后，接口返回失败</p><p>7.直播 动画，视频插帧，视频动画里的某一帧里新增自定义文字</p><p>8.怎么控制依赖库的打包顺序</p><p>9.import 尖括号和双引号，为什么尖括号就能找到第三方库的某一个文件，而不用完整路径</p><p>10.subspec 除了 dependency 还有哪些</p><p>11.移除 armv7 只支持真机吗？一些三方库带 armv7，为了提升打包速度，怎么移除</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 查看包含哪些架构</span></span><br><span class="line">lipo -info YourLib.framework/YourLib</span><br><span class="line"><span class="hljs-comment"># 移除 armv7</span></span><br><span class="line">lipo -remove armv7 YourLib.framework/YourLib -o YourLib.framework/YourLib</span><br></pre></td></tr></table></figure><p>12.export </p><p>13.ipa 包里都有哪些东西</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">MyApp.ipa</span><br><span class="line">├── Payload/</span><br><span class="line">│   └── MyApp.app/</span><br><span class="line">│       ├── MyApp                # 可执行文件</span><br><span class="line">│       ├── Info.plist</span><br><span class="line">│       ├── Assets.car</span><br><span class="line">│       ├── Frameworks/</span><br><span class="line">│       ├── PlugIns/</span><br><span class="line">│       ├── Base.lproj/</span><br><span class="line">│       ├── embedded.mobileprovision</span><br><span class="line">│       └── _CodeSignature/</span><br><span class="line">├── SwiftSupport/                # Swift运行库（可选）</span><br><span class="line">├── WatchKitSupport2/            # Watch支持（可选）</span><br><span class="line">└── META-INF/                    # 签名元数据（可选）</span><br></pre></td></tr></table></figure><p>14.接口缓存</p><p>15.有没有写过一些脚本，提效的工作</p><p>打包上传蒲公英平台，切换汉口银行SDK的文件，JSON自动生成模型</p><p>16.JS的单线程和事件循环</p><ol><li>执行同步任务（主线程）</li><li>执行所有微任务（Promise、nextTick）</li><li>执行一个宏任务（setTimeout 等）</li><li>重复循环</li></ol><p>算法：</p><p>任务并发控制的实现</p><p>// tasks 比如100个计算任务</p><p>// limit 最多3个</p><p>// allDoneCallback 所有任务执行完毕的回调</p><p>func excuteTasks(tasks: [func], limit: Int, allDoneCallback: func) {</p><p>…</p><p>}</p><figure class="highlight objc hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">void</span> (^TaskBlock)(<span class="hljs-keyword">void</span>);</span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">void</span> (^AllDoneBlock)(<span class="hljs-keyword">void</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">void</span> executeTasks(<span class="hljs-built_in">NSArray</span>&lt;TaskBlock&gt; *tasks, <span class="hljs-built_in">NSInteger</span> limit, AllDoneBlock allDoneCallback) &#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (tasks.count == <span class="hljs-number">0</span>) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (allDoneCallback) allDoneCallback();</span><br><span class="line">        <span class="hljs-keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-comment">// 使用 GCD 信号量控制最大并发数</span></span><br><span class="line">    dispatch_semaphore_t semaphore = dispatch_semaphore_create(limit);</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-comment">// 用于追踪任务完成</span></span><br><span class="line">    dispatch_group_t group = dispatch_group_create();</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-comment">// 并发队列（可自定义）</span></span><br><span class="line">    <span class="hljs-built_in">dispatch_queue_t</span> queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="hljs-number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-keyword">for</span> (TaskBlock task <span class="hljs-keyword">in</span> tasks) &#123;</span><br><span class="line">        dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER); <span class="hljs-comment">// 限制并发数</span></span><br><span class="line">        </span><br><span class="line">        dispatch_group_enter(group);</span><br><span class="line">        <span class="hljs-built_in">dispatch_async</span>(queue, ^&#123;</span><br><span class="line">            <span class="hljs-comment">// 执行任务</span></span><br><span class="line">            <span class="hljs-keyword">if</span> (task) &#123;</span><br><span class="line">                task();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-comment">// 任务完成后释放信号量</span></span><br><span class="line">            dispatch_semaphore_signal(semaphore);</span><br><span class="line">            dispatch_group_leave(group);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-comment">// 所有任务完成后执行回调</span></span><br><span class="line">    dispatch_group_notify(group, dispatch_get_main_queue(), ^&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (allDoneCallback) &#123;</span><br><span class="line">            allDoneCallback();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二面：</p><p>1.Block 原理，循环引用</p><p>2.Runtime 应用，动态更新，为什么 OC 要这么设计？</p><p>3.Runloop 应用</p><p>4.做过哪些优化</p><p>算法：在10000个int数组里，找出最大的 topK 个数</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作业帮&lt;/p&gt;
    
    </summary>
    
      <category term="面试题" scheme="http://soso.wiki/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试" scheme="http://soso.wiki/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="作业帮" scheme="http://soso.wiki/tags/%E4%BD%9C%E4%B8%9A%E5%B8%AE/"/>
    
  </entry>
  
  <entry>
    <title>滴滴</title>
    <link href="http://soso.wiki/%E6%BB%B4%E6%BB%B4/"/>
    <id>http://soso.wiki/滴滴/</id>
    <published>2025-10-15T06:00:00.000Z</published>
    <updated>2025-10-31T05:36:27.892Z</updated>
    
    <content type="html"><![CDATA[<p>滴滴</p><a id="more"></a><p>1.介绍有挑战的项目，组件化的各种方案优劣</p><p>2.unrecognized selector发生前经历哪些步骤  Runtime应用，除了交换方法还有哪些应用</p><p>3.地图上有个模块，可以拖动，拖动到边缘，有哪些边界case，手势冲突怎么解决</p><p>4.用过哪些跨端，实现原理，flutter的状态管理用的是啥，除了provider还有其他的吗？在flutter项目里的职责，flutter遇到过哪些问题</p><p>5.做过哪些优化</p><p>6.共享屏幕用 Xcode 写，字符串的多读多写，用多线程，不要用锁</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;滴滴&lt;/p&gt;
    
    </summary>
    
      <category term="面试题" scheme="http://soso.wiki/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试" scheme="http://soso.wiki/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="滴滴" scheme="http://soso.wiki/tags/%E6%BB%B4%E6%BB%B4/"/>
    
      <category term="滴滴外卖" scheme="http://soso.wiki/tags/%E6%BB%B4%E6%BB%B4%E5%A4%96%E5%8D%96/"/>
    
  </entry>
  
  <entry>
    <title>红松</title>
    <link href="http://soso.wiki/%E7%BA%A2%E6%9D%BE/"/>
    <id>http://soso.wiki/红松/</id>
    <published>2025-09-26T08:00:00.000Z</published>
    <updated>2025-09-28T12:50:23.185Z</updated>
    
    <content type="html"><![CDATA[<p>红松<br><a id="more"></a></p><p>一面：</p><p>1.组件化，区别，优缺点</p><p>2.SDK 体积优化</p><p>3.IM是使用还是实现</p><p>4.MVCS，SectionProvider</p><p>5.RN 的原理，实现过 RN 吗</p><p>6.地图</p><p>7.内存管理，性能优化，卡顿</p><p>8.MVP 和 MVVM 的区别</p><p>9.Runtime、Runloop 的原理和应用</p><p>10.鸿蒙的了解</p><p>11.WebView 的了解</p><p>12.HTTP2和 HTTP3了解吗？</p><p>二面：</p><p>1.SDK 体积优化与构建提效</p><p>2.SectionProvider 拆分 TableView 的背景</p><p>3.怎么打出SDK包 .xcframework，打包配置都有哪些</p><p>多个组件依赖同一个组件的不同版本，为什么会报错</p><p>5.组件化，你觉得好的组件化应该是哪种，壳工程要提供哪些，分层</p><p>6.podfile 和 podspec 区别</p><p>7.启动优化，合并类和分类数量</p><p>8.页面卡顿都有哪些检测手段，可能有哪些原因</p><p>9.做过哪些工具，排查问题</p><p>10.埋点怎么确保数据不遗漏，应该选择在什么时机上报？</p><p>11.怎么优化弱网环境体验，UDP</p><p>12.在别人眼里你是个什么样的人？代码 CR 体现细心的地方</p><p>13.离职原因，想找一个什么样的工作</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;红松&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="面试题" scheme="http://soso.wiki/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试" scheme="http://soso.wiki/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="红松" scheme="http://soso.wiki/tags/%E7%BA%A2%E6%9D%BE/"/>
    
  </entry>
  
  <entry>
    <title>老虎国际</title>
    <link href="http://soso.wiki/%E8%80%81%E8%99%8E%E5%9B%BD%E9%99%85/"/>
    <id>http://soso.wiki/老虎国际/</id>
    <published>2025-09-26T06:00:00.000Z</published>
    <updated>2025-09-28T12:46:59.428Z</updated>
    
    <content type="html"><![CDATA[<p>老虎国际<br><a id="more"></a></p><p>1.组件化，怎么通信的，有没有公共数据，组件传值，多个组件都可以修改这个值 值变化时通知到另一个组件</p><p>2.SDK 体积优化，构建提效，为啥构建那么久</p><p>3.IM 页面复杂吗？底层怎么实现的？IM 从数据库读出来的和接口拉回来的数据怎么合并，有冲突了怎么办？IM 的异常场景，发送失败之类的</p><p>4.SSE 直接更新 UI 和其他方式</p><p>5.鸿蒙遇到的问题，有没有鸿蒙版本的问题，用的是 V2 还是 V1</p><p>算法：</p><p>从4个算法题中选择，要求用 OC 或 Swift 实现，用飞书运行</p><p>1.子串是否是回文子串</p><p>2.数组是否是调性数组</p><h3 id="参考答案"><a href="#参考答案" class="headerlink" title="参考答案"></a>参考答案</h3><p>1.组件化，怎么通信的，有没有公共数据，组件传值，多个组件都可以修改这个值 值变化时通知到另一个组件</p><p>共享数据模型：</p><p>单例 + Notification</p><figure class="highlight objc hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// SharedModel.h</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">SharedModel</span> : <span class="hljs-title">NSObject</span></span></span><br><span class="line"><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">copy</span>) <span class="hljs-built_in">NSString</span> *value;</span><br><span class="line">+ (<span class="hljs-keyword">instancetype</span>)shared;</span><br><span class="line"><span class="hljs-keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// SharedModel.m</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">@implementation</span> <span class="hljs-title">SharedModel</span></span></span><br><span class="line">+ (<span class="hljs-keyword">instancetype</span>)shared &#123;</span><br><span class="line">    <span class="hljs-keyword">static</span> SharedModel *instance;</span><br><span class="line">    <span class="hljs-keyword">static</span> <span class="hljs-built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">    <span class="hljs-built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">        instance = [[SharedModel alloc] init];</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="hljs-keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 修改值时发通知</span></span><br><span class="line">[SharedModel shared].value = <span class="hljs-string">@"new value"</span>;</span><br><span class="line">[[<span class="hljs-built_in">NSNotificationCenter</span> defaultCenter] postNotificationName:<span class="hljs-string">@"SharedValueDidChange"</span></span><br><span class="line">                                                    object:<span class="hljs-literal">nil</span></span><br><span class="line">                                                  userInfo:@&#123;<span class="hljs-string">@"newValue"</span>: [SharedModel shared].value&#125;];</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 监听值变化</span></span><br><span class="line">[[<span class="hljs-built_in">NSNotificationCenter</span> defaultCenter] addObserverForName:<span class="hljs-string">@"SharedValueDidChange"</span></span><br><span class="line">                                                  object:<span class="hljs-literal">nil</span></span><br><span class="line">                                                   queue:[<span class="hljs-built_in">NSOperationQueue</span> mainQueue]</span><br><span class="line">                                              usingBlock:^(<span class="hljs-built_in">NSNotification</span> * _Nonnull note) &#123;</span><br><span class="line">    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@"值变化: %@"</span>, note.userInfo[<span class="hljs-string">@"newValue"</span>]);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><p>单例 + KVO</p><figure class="highlight objc hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 监听</span></span><br><span class="line">[[SharedModel shared] addObserver:<span class="hljs-keyword">self</span></span><br><span class="line">                        forKeyPath:<span class="hljs-string">@"value"</span></span><br><span class="line">                           options:<span class="hljs-built_in">NSKeyValueObservingOptionNew</span></span><br><span class="line">                           context:<span class="hljs-literal">nil</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 回调</span></span><br><span class="line">- (<span class="hljs-keyword">void</span>)observeValueForKeyPath:(<span class="hljs-built_in">NSString</span> *)keyPath</span><br><span class="line">                      ofObject:(<span class="hljs-keyword">id</span>)object</span><br><span class="line">                        change:(<span class="hljs-built_in">NSDictionary</span>&lt;<span class="hljs-built_in">NSKeyValueChangeKey</span>,<span class="hljs-keyword">id</span>&gt; *)change</span><br><span class="line">                       context:(<span class="hljs-keyword">void</span> *)context &#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> ([keyPath isEqualToString:<span class="hljs-string">@"value"</span>]) &#123;</span><br><span class="line">        <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@"值变化：%@"</span>, change[<span class="hljs-built_in">NSKeyValueChangeNewKey</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>单例 + Block 回调（自定义）</p><p>你也可以在 SharedModel 里维护一个回调列表，当值修改时手动调用回调。</p><figure class="highlight objc hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">void</span>(^ValueChangeBlock)(<span class="hljs-built_in">NSString</span> *newValue);</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">SharedModel</span> : <span class="hljs-title">NSObject</span></span></span><br><span class="line"><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">copy</span>) <span class="hljs-built_in">NSString</span> *value;</span><br><span class="line"><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">strong</span>) <span class="hljs-built_in">NSMutableArray</span>&lt;ValueChangeBlock&gt; *observers;</span><br><span class="line">+ (<span class="hljs-keyword">instancetype</span>)shared;</span><br><span class="line">- (<span class="hljs-keyword">void</span>)addObserver:(ValueChangeBlock)block;</span><br><span class="line"><span class="hljs-keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">@implementation</span> <span class="hljs-title">SharedModel</span></span></span><br><span class="line">+ (<span class="hljs-keyword">instancetype</span>)shared &#123;</span><br><span class="line">    <span class="hljs-keyword">static</span> SharedModel *instance;</span><br><span class="line">    <span class="hljs-keyword">static</span> <span class="hljs-built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">    <span class="hljs-built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">        instance = [[SharedModel alloc] init];</span><br><span class="line">        instance.observers = [<span class="hljs-built_in">NSMutableArray</span> array];</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="hljs-keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="hljs-keyword">void</span>)setValue:(<span class="hljs-built_in">NSString</span> *)value &#123;</span><br><span class="line">    _value = [value <span class="hljs-keyword">copy</span>];</span><br><span class="line">    <span class="hljs-keyword">for</span> (ValueChangeBlock block <span class="hljs-keyword">in</span> <span class="hljs-keyword">self</span>.observers) &#123;</span><br><span class="line">        block(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="hljs-keyword">void</span>)addObserver:(ValueChangeBlock)block &#123;</span><br><span class="line">    [<span class="hljs-keyword">self</span>.observers addObject:[block <span class="hljs-keyword">copy</span>]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 使用</span></span><br><span class="line">[[SharedModel shared] addObserver:^(<span class="hljs-built_in">NSString</span> *newValue) &#123;</span><br><span class="line">    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@"值变化了：%@"</span>, newValue);</span><br><span class="line">&#125;];</span><br><span class="line">[SharedModel shared].value = <span class="hljs-string">@"hello"</span>;</span><br></pre></td></tr></table></figure><p>2.SDK 体积优化，构建提效，为啥构建那么久</p><p>3.IM 页面复杂吗？底层怎么实现的？IM 从数据库读出来的和接口拉回来的数据怎么合并，有冲突了怎么办？IM 的异常场景，发送失败之类的</p><p>4.SSE 直接更新 UI 和其他方式</p><p>5.鸿蒙遇到的问题，有没有鸿蒙版本的问题，用的是 V2 还是 V1</p><p>算法：</p><p>从4个算法题中选择，要求用 OC 或 Swift 实现，用飞书运行</p><p>1.子串是否是回文子串</p><p>2.数组是否是调性数组</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;老虎国际&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="面试题" scheme="http://soso.wiki/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试" scheme="http://soso.wiki/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="老虎国际" scheme="http://soso.wiki/tags/%E8%80%81%E8%99%8E%E5%9B%BD%E9%99%85/"/>
    
  </entry>
  
  <entry>
    <title>宏鹄出行</title>
    <link href="http://soso.wiki/%E5%AE%8F%E9%B9%84%E5%87%BA%E8%A1%8C/"/>
    <id>http://soso.wiki/宏鹄出行/</id>
    <published>2025-09-26T04:30:00.000Z</published>
    <updated>2025-09-28T12:48:44.029Z</updated>
    
    <content type="html"><![CDATA[<p>宏鹄出行<br><a id="more"></a></p><p>1.隐私权限检测，作为平台方，看业务方有没有用到隐私权限，没有源码</p><p>2.年初定了崩溃率和卡顿率，现在看劣化了，你作为平台，应该怎么做？</p><p>3.造成卡顿有哪些原因</p><p>4.你的优化方案遇到挑战，别人不认可怎么办？</p><p>5.单一职责是什么意思？</p><p>6.你希望下家公司、同事是什么样的，有什么期望，你期望在团队中的定位是什么？</p><p>7.你觉得什么能激励到你？</p><p>8.三年规划</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;宏鹄出行&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="面试题" scheme="http://soso.wiki/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试" scheme="http://soso.wiki/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="宏鹄出行" scheme="http://soso.wiki/tags/%E5%AE%8F%E9%B9%84%E5%87%BA%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>好未来</title>
    <link href="http://soso.wiki/2025-09-24-%E5%A5%BD%E6%9C%AA%E6%9D%A5/"/>
    <id>http://soso.wiki/2025-09-24-好未来/</id>
    <published>2025-09-24T10:00:00.000Z</published>
    <updated>2025-09-25T14:27:40.450Z</updated>
    
    <content type="html"><![CDATA[<p>好未来<br><a id="more"></a></p><p>项目：</p><p>1.体积优化的背景，做了哪些手段，收益，二进制是自动打包还是手动打包？二进制的代码问题怎么调试？有没有遇到打二进制后变成release包和开发不一致的情况</p><p>2.MVCS、SectionProvider 的背景，怎么实现的？</p><p>3.加载速度优化</p><p>4.静态分析都有哪些类型的问题？是定期做吗？为什么不搞成流水线自动检测？</p><p>5.活动页组件化怎么做的？frame 可配置吗？</p><p>6.双向通信</p><p>7.接口层和 JS 逻辑层异常监控</p><p>8.iOS26 关注了吗</p><p>9.用 AI 做了哪些事情，哪些重复性的可以用 AI 替代？用的具体是哪个 AI？</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好未来&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="面试题" scheme="http://soso.wiki/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试" scheme="http://soso.wiki/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="好未来" scheme="http://soso.wiki/tags/%E5%A5%BD%E6%9C%AA%E6%9D%A5/"/>
    
  </entry>
  
  <entry>
    <title>米可世界</title>
    <link href="http://soso.wiki/2025-09-24-%E7%B1%B3%E5%8F%AF%E4%B8%96%E7%95%8C/"/>
    <id>http://soso.wiki/2025-09-24-米可世界/</id>
    <published>2025-09-24T08:00:00.000Z</published>
    <updated>2025-09-28T12:43:58.111Z</updated>
    
    <content type="html"><![CDATA[<p>米可世界<br><a id="more"></a></p><p>1.Runloop 的流程，底层实现，项目里实际使用，监控卡顿监听的具体是哪个状态，Source0 和 Source1 区别</p><p>2.局部对象的释放时机；autoreleasepool的实现，weak 存在哪里</p><p>3.SDK 构建提效，有没有二进制化的经验，缓存</p><p>4.feed 流滑动卡顿可能有哪些原因；离屏渲染为什么会影响；那些异步的库，不也是在另一个屏幕缓冲区处理的吗？</p><p>5.首屏优化，有没有针对各个模块的，比如卡线程了，怎么检测，怎么优化</p><p>6.IM Socket 的流程</p><p>7.FMDB 的内部实现，是线程安全的吗？和其他如 WCDB 效率的比较；</p><p>8.用过哪些锁？效率比较；@synchronized 的作用是什么？</p><p>9.上传大图，怎么分片，怎么控制线程最大并发数，怎么告诉web上传进度？上传进度细颗粒度，每片都有哪些状态，现有上传单个图片的方法，怎么实时同步进度</p><p>10.SDWebImage 加载图片的流程，缓存机制，LRU怎么实现的？加载图片传入了 UIImageView 下载完图片后怎么拿到这个对象，因为是异步的</p><p>11.OOM 怎么避免？</p><p>12.MVCS 与 SectionProvider 怎么实现的</p><p>二面：</p><p>项目：</p><p>1.构建提效，怎么定位的是头文件导入的问题</p><p>2.封装父类沉淀气泡动画与事件分发能力，怎么做的？</p><p>3.随版转为非随实现怎么做的？活动页组件化，组件之间怎么交互</p><p>4.画一下贝壳的架构，平级组件通信，传值</p><p>场景：</p><p>1.没法复现的crash，怎么去处理，如果是内部反馈的，有设备，怎么处理</p><p>2.有没有处理卡顿的经验，性能平台来了个卡顿，你会怎么处理</p><p>3.快封板了，产品要加一个紧急的功能，评估有风险，你会怎么做？</p><p>4.有没有经历过严重的线上问题，假如现在有个线上问题，你会怎么做？</p><p>5.领导交给你一个没有接触过的领域的问题，你会怎么做</p><h3 id="参考答案"><a href="#参考答案" class="headerlink" title="参考答案"></a>参考答案</h3><p>1.Runloop 的流程，底层实现，项目里实际使用，监控卡顿监听的具体是哪个状态，Source0 和 Source1 区别</p><p>（1）1. RunLoop 的流程</p><p>RunLoop 是一个事件循环机制，内部主要流程可以简化为：</p><ol><li><strong>通知 Observers</strong>：进入 Loop 前，会发通知（如 kCFRunLoopEntry）。</li><li><strong>处理 Timer</strong>：检查是否有已到期的 Timer 任务。</li><li><strong>处理 Source0</strong>：非基于端口的事件（UI 事件、Block 回调等），需要主动唤醒。</li><li><strong>处理 Source1</strong>：基于 Mach port 的事件（系统事件、IPC、触摸事件）。</li><li><strong>进入休眠</strong>：调用 mach_msg_trap 等底层系统调用，线程进入休眠状态。</li><li><strong>被唤醒</strong>：<ul><li>有事件到来（Source、Timer、GCD dispatch）。</li><li>外部手动唤醒（CFRunLoopWakeUp）。</li></ul></li><li><strong>通知 Observers</strong>：将要处理事件（kCFRunLoopBeforeSources / kCFRunLoopBeforeWaiting / kCFRunLoopAfterWaiting）。</li><li><strong>循环往复</strong>：直到 CFRunLoopStop 被调用。</li></ol><p>（2） 底层实现<br>    •    核心结构：CFRunLoop 和 CFRunLoopMode，每个线程对应一个 RunLoop（存储在 pthread 的 TLS 中）。<br>    •    事件驱动：通过 Mach port 和 内核态通信。比如触摸事件从 IOKit -&gt; SpringBoard -&gt; App -&gt; RunLoop Mach port。<br>    •    休眠/唤醒：利用系统调用 mach_msg_trap 进入内核，等待消息；有事件时唤醒。<br>    •    RunLoopObserver：内部维护一组回调，挂在不同状态点（Entry、BeforeTimers、BeforeSources、BeforeWaiting、AfterWaiting、Exit）。</p><p>（3）项目里的实际使用</p><ul><li><strong>定时器</strong>：NSTimer / CADisplayLink / performSelector:afterDelay: 本质依赖 RunLoop。</li><li><strong>常驻线程</strong>：如 AFNetworking 的网络请求线程，使用 RunLoop 保持线程不退出。</li><li><strong>事件响应</strong>：触摸事件、UI 更新都跑在主线程 RunLoop 中。</li><li><strong>GCD 与 RunLoop</strong>：dispatch_async 提交到主队列的 block，本质通过 CFRunLoopSource 执行。</li><li><strong>性能优化</strong>：比如在 NSRunLoopCommonModes 下添加任务，避免因 UI 滑动（UITrackingRunLoopMode）而阻塞。</li></ul><p>（4）卡顿监控监听的状态</p><p>常见的 卡顿监控（UI 卡顿监控） 原理就是利用 RunLoop Observer，在关键状态点打点：<br>    •    监听 kCFRunLoopBeforeSources 和 kCFRunLoopAfterWaiting。<br>    •    在 BeforeSources 说明即将处理事件。<br>    •    在 AfterWaiting 说明刚被唤醒，准备进入事件处理。<br>    •    如果这两个状态之间持续很久没有切换，说明 RunLoop 卡在某个任务（主线程卡住）。</p><p>具体做法：</p><pre><code>1.    在主线程 RunLoop 添加 Observer，监听这两个状态。2.    同时开一个子线程用 dispatch_semaphore_wait + 超时机制判断。3.    超过阈值（如 &gt; 200ms）没有状态切换，判定为卡顿。4.    结合堆栈采样（backtrace）就能定位具体卡住的位置。</code></pre><p>（5）source0 与 source1 区别</p><ol><li><p>Source0<br> •    定义：非基于内核端口（port）的事件源。<br> •    特点：<br> •    纯用户态，不会主动唤醒 RunLoop，需要外部手动唤醒。<br> •    常用于 App 内部事件分发，例如 performSelector:onThread:。<br> •    触发方式：<br> •    调用 CFRunLoopSourceSignal(source) 标记为待处理。<br> •    再调用 CFRunLoopWakeUp(runloop) 唤醒 RunLoop。<br> •    例子：<br> •    performSelector:onThread:<br> •    手动创建的 CFRunLoopSource0</p></li><li><p>Source1<br> •    定义：基于 Mach port 的事件源。<br> •    特点：<br> •    内核态驱动，系统事件到达时可以直接唤醒 RunLoop。<br> •    主要用来处理 系统消息（如触摸、系统回调、CFMachPort）。<br> •    触发方式：<br> •    当端口有消息时，内核会唤醒 RunLoop，执行对应的回调。<br> •    例子：<br> •    系统的触摸事件、屏幕旋转事件。<br> •    CFMachPort、CFSocket</p></li></ol><p>2.局部对象的释放时机；autoreleasepool的实现，weak 存在哪里</p><p>（1）局部对象的释放时机</p><ul><li><p>在 ARC 下，局部变量对象（比如方法里的 <code>NSObject *obj = [[NSObject alloc] init];</code>）的释放时机主要取决于 <strong>作用域 + 引用计数</strong>。</p></li><li><p>编译器会在合适的位置插入 objc_release。</p></li><li><p>通常规则：</p><ol><li>如果是强引用（strong），在超出作用域时编译器插入 release。</li><li>如果放在了 @autoreleasepool 内，且对象通过 autorelease 创建（如 [NSString stringWithFormat:@”xx”]），则会在 pool 清空时统一 release。</li><li>如果没有显式放进 autoreleasepool，那么局部对象的 autorelease 会挂在当前线程的默认 <strong>autoreleasepool page</strong> 上（RunLoop 每次循环会清理一次）。</li></ol></li><li>所以：<ul><li>alloc/init 的对象：离开作用域立即释放。</li><li>工厂方法 (stringWith…) 返回的对象：通常是 autorelease，释放时机取决于最近的 autoreleasepool drain。</li></ul></li></ul><p>(2) autoreleasepool 的实现</p><ul><li>@autoreleasepool {} 在编译后会被转化为：<figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">void</span>* context = objc_autoreleasePoolPush();</span><br><span class="line">&#123;  <span class="hljs-comment">// pool 内部作用域</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">objc_autoreleasePoolPop(context);</span><br></pre></td></tr></table></figure></li></ul><p>​    •    底层实现依赖 AutoreleasePoolPage：<br>​    •    每个线程维护一个栈状的双向链表结构。<br>​    •    objc_autorelease(obj) 会把对象的指针放入当前 page。<br>​    •    pool 被 pop 时，会遍历这个 page，依次对对象发送 release。<br>​    •    RunLoop 机制：<br>​    •    主线程的 RunLoop 每次事件循环开始会 push 一个 pool，结束时 pop。<br>​    •    这保证了常见的 UIKit API 里 autorelease 对象能在一次事件处理后被释放。</p><p>（3）weak 的存储位置<br>    •    weak 指针并不是单纯的内存地址，它需要 运行时的弱引用表（weak_table_t） 管理：<br>    •    weak_table_t 是一个 hash 表，key 是对象地址（被引用的对象），value 是指向该对象的所有 weak 指针地址集合。<br>    •    当对象的引用计数归零时，dealloc 流程会调用 objc_destroyWeak，把所有指向该对象的 weak 指针置为 nil。<br>    •    所以 weak 指针存储在：<br>    •    指针本身依然在栈上 / 堆上（取决于变量声明位置），<br>    •    但 runtime 维护了一份全局的弱引用表，用来统一管理 对象 ↔ weak 指针列表 的关系。<br>    •    注意：<br>    •    weak 本身是一个普通指针，只不过 runtime 在对象销毁时会把它自动清空。<br>    •    所以 weak 查找和赋值都会经过 runtime 的弱引用表操作，有一定性能开销。</p><p>3.SDK 构建提效，有没有二进制化的经验，缓存</p><p>模块化/组件化<br>SDK 内部拆分为稳定依赖（binary、SPM precompiled）+ 高频改动部分（源码），避免全量编译。</p><p>构建缓存<br>  CI 里缓存 DerivedData、Pods、SPM 构建产物。</p><p>4.Feed 流滑动卡顿可能有哪些原因；离屏渲染为什么会影响；那些异步的库，不也是在另一个屏幕缓冲区处理的吗？</p><p>（1） Feed 流滑动卡顿的常见原因<br>卡顿一般是因为 <strong>主线程在 16.67ms（60fps 下）或者 8.3ms（120fps 下）没有完成一次绘制提交</strong>。常见原因：</p><ul><li><strong>布局计算过重</strong><ul><li>大量 autoLayout 约束计算</li><li>cell 高度动态计算不缓存</li></ul></li><li><p><strong>主线程阻塞</strong></p><ul><li>大量 JSON 解析、IO、图片解码放在主线程</li><li>复杂业务逻辑或锁竞争</li></ul></li><li><p><strong>绘制负担过重</strong></p><ul><li>大量圆角、阴影、mask、group opacity 等触发离屏渲染</li><li>大图缩放、解码延迟</li></ul></li><li><p><strong>频繁创建/销毁对象</strong></p><ul><li>cell 重复 init，而不是重用</li></ul></li><li><p><strong>图片处理问题</strong></p><ul><li>未做预解码、下采样，导致 GPU/CPU 开销大</li></ul></li></ul><p>（2）为什么离屏渲染会影响滑动流畅度</p><ul><li><p><strong>什么是离屏渲染 (Offscreen Rendering)</strong></p><ul><li><p>GPU 本来在 <strong>On-Screen Buffer</strong>（屏幕缓冲区）里画东西，顺序执行即可。</p></li><li><p>一旦遇到圆角 + mask、阴影、layer.shouldRasterize 等情况，GPU 会：</p><ol><li>先新建一个 <strong>Offscreen Buffer</strong></li><li>把内容画到这个 buffer</li><li>再拷贝回 On-Screen Buffer</li></ol></li></ul></li></ul><ul><li><p><strong>开销在哪</strong></p><ul><li>新建 buffer 本身消耗内存</li><li>GPU 切换上下文（Context Switch）有性能开销</li><li>结果要 copy 回主屏幕 buffer，增加带宽占用</li></ul></li><li><p><strong>为什么会卡顿</strong></p><ul><li>这不是“异步”的，而是 GPU 的额外工作，依然要卡在 <strong>渲染管线</strong>（Display Link vsync 同步）。</li><li>如果离屏渲染量大，GPU 跟不上 vsync 节奏，就掉帧 → feed 滑动卡顿。</li></ul></li></ul><p>（3）“异步绘制库” 和离屏渲染的区别</p><p>你说的 “异步的库”（比如 YYAsyncLayer, Texture (AsyncDisplayKit)）其实跟 Core Animation 的 Offscreen Rendering 不一样：</p><ul><li><p><strong>异步绘制库</strong></p><ul><li>把文本排版、图片合成、UI 绘制逻辑放到 <strong>后台线程的 CGContext</strong> 里完成</li><li>得到一张最终的位图（Bitmap）</li><li>主线程只把这张图交给 layer.contents</li><li>→ 避免了主线程阻塞 &amp; 避免 GPU 临时建 buffer</li></ul></li><li><p><strong>GPU 离屏渲染</strong></p><ul><li>是 <strong>渲染阶段</strong> GPU 为了实现特效而“不得不”建一个临时 buffer</li><li>发生在绘制提交之后、硬件管线中</li><li>→ 无法用“放后台线程”解决，因为是 GPU 硬件的需求</li></ul></li></ul><p>可以这样理解：</p><ul><li><strong>异步绘制库：CPU 先画好 → 减轻主线程 &amp; GPU 压力</strong></li><li><strong>离屏渲染：GPU 临时建 buffer → 加重 GPU 压力</strong></li></ul><p>总结：</p><ul><li>Feed 卡顿大多是 <strong>主线程阻塞 + GPU 负担过重</strong>。</li><li>离屏渲染会卡，是因为 <strong>GPU 在渲染管线上多了额外 buffer 开销</strong>。</li><li>异步绘制库的“异步 buffer”不是 GPU 的 Offscreen Buffer，而是 <strong>CPU 侧先生成位图</strong>，两者概念完全不同。</li></ul><p>5.首屏优化，有没有针对各个模块的，比如卡线程了，怎么检测，怎么优化<br>卡线程检测方法</p><pre><code>1.    Runloop 卡顿监控•    利用 CFRunLoopObserver 监听主线程 RunLoop 的状态（kCFRunLoopBeforeSources、kCFRunLoopAfterWaiting 等）。•    当 RunLoop 某次循环超过阈值（如 &gt;200ms）还未完成，就认为发生了卡顿。•    工具类库：YYAsyncLayer、FBRetainCycleDetector + 自己封装卡顿监控。2.    堆栈采样 (Stack Sampling)•    使用子线程定时采样主线程调用栈（比如每 50ms 取一次）。•    当检测到主线程长时间无响应时，打印采样栈，可快速定位阻塞点。•    开源方案：KSCrash、PLCrashReporter。3.    系统工具•    Instruments → Time Profiler：定位函数耗时。•    Instruments → Main Thread Checker：发现 UI API 是否在子线程调用。•    Instruments → System Trace：更底层地看线程调度与锁等待。</code></pre><p>常见模块的首屏优化点：<br>（1）启动阶段（冷启动）</p><ul><li><strong>优化检测</strong></li><li><p>利用 DYLD_PRINT_STATISTICS 环境变量观察动态库加载耗时。</p><ul><li>Xcode 的 App Launch 模板可分析启动阶段。</li></ul></li><li><p><strong>优化手段</strong></p><ul><li>减少动态库数量，合并 Pod。</li><li>用 App Clips 或延迟加载来减少首次启动体积。</li><li>+load 和 +initialize 里避免做耗时操作。</li></ul></li></ul><p>（2） 主线程耗时操作</p><ul><li><p><strong>检测</strong></p><ul><li>Runloop 卡顿监控 + Instruments。</li></ul></li><li><p><strong>优化</strong></p><ul><li>UI 布局计算移到子线程（AutoLayout 的约束尽量减少层级）。</li><li>图片解码、JSON 解析放子线程（YYImage / YYModel 的异步方案）。</li><li>渲染复杂 UI 时用 CALayer 或离屏渲染优化。</li></ul></li></ul><p>（3）网络模块</p><ul><li><p><strong>检测</strong></p><ul><li>在首屏接口加埋点（发起时间 - 响应时间）。</li><li>Charles / Wireshark 抓包分析耗时。</li></ul></li><li><p><strong>优化</strong></p><ul><li><p>核心数据接口提前并发请求，不要串行。</p></li><li><p>使用缓存（磁盘缓存、内存缓存、预加载）。</p></li><li><p>大图延迟加载，必要时用占位图。</p></li></ul></li></ul><p>（4） 图片加载</p><ul><li><p><strong>检测</strong></p><ul><li>Instruments → Allocations/Time Profiler 观察解码与内存情况。</li></ul></li><li><p><strong>优化</strong></p><ul><li>预解码（SDWebImage、YYImage）。</li><li>降低分辨率，避免原图直接展示。</li><li>使用 WebP/HEIF 格式。</li></ul></li></ul><p>（5）渲染与绘制</p><ul><li><strong>检测</strong></li><li><p>Instruments → Core Animation 检测 FPS、离屏渲染。</p><ul><li>GPU Driver template 观察 GPU 是否被打满。</li></ul></li><li><p><strong>优化</strong></p><ul><li>减少视图层级，避免过度使用透明度/圆角/阴影。</li><li>尽量用 CAShapeLayer 替代复杂绘制。</li><li>提前渲染静态页面的快照。</li></ul></li></ul><p>（6）数据处理 &amp; 本地 IO</p><ul><li><p><strong>检测</strong></p><ul><li>Time Profiler 定位磁盘/数据库耗时。</li></ul></li><li><p><strong>优化</strong></p><ul><li>首页不要做大量磁盘读写。</li><li>CoreData/SQLite 的查询下沉到子线程。</li><li>UserDefaults 批量写时要避免阻塞。</li></ul></li></ul><p>6.IM Socket 的流程</p><p>1.建立连接</p><ul><li><p>使用 CFStream（CoreFoundation）、CFSocket、或者三方库（如 <a href="https://github.com/robbiehanson/CocoaAsyncSocket" target="_blank" rel="noopener">CocoaAsyncSocket</a>）来建立 TCP 连接。</p></li><li><p>或者直接用 <strong>WebSocket</strong>（iOS 13+ 推荐 URLSessionWebSocketTask，早期可用 SocketRocket）。</p></li><li><p>流程：</p><ol><li>客户端发起连接请求（IP + 端口）。</li><li>服务器返回是否成功。</li><li>成功后，进入可读写状态。</li></ol></li></ul><p>2.登录/鉴权</p><ul><li>建立连接后，通常第一步是发送 <strong>登录包 / 鉴权信息</strong>（例如 userId、token、设备信息）。</li><li>服务器验证通过后，会返回 <strong>登录成功 ACK</strong>。</li><li>只有在鉴权成功后，Socket 才允许继续收发消息。</li></ul><p>3.维持长连接</p><ul><li>长连接需要保持心跳（心跳包 ping/pong）。</li><li>客户端定时（如 30s/60s）发送 <strong>心跳包</strong>，服务器回应 <strong>心跳 ACK</strong>。</li><li>如果心跳超时（连续几次未响应），认为连接断开，需要自动重连。</li></ul><p>4.消息收发</p><ul><li><p><strong>发送消息：</strong></p><ul><li>将消息序列化成约定的数据格式（JSON / Protobuf / 二进制协议）。</li><li>封装消息头（包含消息类型、长度、消息 ID 等）。</li><li>通过 Socket write/send 发出。</li></ul></li><li><p><strong>接收消息：</strong></p><ul><li>Socket 输入流回调或代理触发。</li><li>先读消息头，解析数据包长度。</li><li>再按协议读取完整消息体。</li><li>反序列化成业务层可用的模型对象。</li></ul></li></ul><p>5.消息确认（ACK机制）</p><ul><li><p>为了保证消息可靠性，通常采用 <strong>消息回执机制</strong>：</p><ul><li>客户端发送消息 → 服务器收到后，返回 ACK（确认包，包含消息 ID）。</li></ul></li><li>如果客户端在一定时间内未收到 ACK，则重发消息。</li></ul><p>6.断线重连</p><ul><li><p>网络变化（WiFi/4G切换）、App 后台 → 前台，都会导致连接中断。</p></li><li><p>需要实现 <strong>自动重连机制</strong>：</p><ul><li>发现连接断开 → 进入重连流程。</li><li>指数退避重试（如 1s → 2s → 4s → 8s…，有上限）。</li><li>连接成功后，重新鉴权、同步离线消息。</li></ul></li></ul><p>7.离线消息同步</p><ul><li>断线期间可能会有消息未收到。</li><li>重新连接成功后，客户端需要调用接口获取 <strong>离线消息</strong>，再和本地消息队列合并。</li></ul><p>8.退出/释放</p><ul><li>用户主动退出登录时，发送 <strong>退出包</strong>。</li><li>关闭 Socket，释放资源。</li></ul><p>7.FMDB 的内部实现，是线程安全的吗？和其他如 WCDB 效率的比较；</p><p>（1）FMDB 的线程安全性</p><ol><li><strong>FMDatabase</strong></li></ol><ul><li>FMDatabase 本身 <strong>不是线程安全的</strong>。<ul><li>官方明确建议：<strong>一个 FMDatabase 实例只能在单一线程中使用</strong>，不能跨线程共享。</li></ul></li></ul><ol start="2"><li><strong>FMDatabaseQueue</strong></li></ol><ul><li><p>为了保证线程安全，FMDB 提供了 FMDatabaseQueue。</p></li><li><p>内部实现方式：</p><ul><li>维护一个 dispatch_queue（串行队列）。<ul><li>通过 inDatabase: 或 inTransaction: 方法，将所有对数据库的操作 block 串行提交到这个队列里执行。</li></ul></li><li>这样可以保证同一时间只有一个线程在访问数据库，从而避免 SQLite 的并发写入问题（SQLite 本身写操作也是串行化的）。</li></ul></li></ul><ol start="3"><li><strong>FMDatabasePool</strong><ul><li>为了优化多读场景，FMDB 还提供 FMDatabasePool。</li><li>内部维护多个数据库连接（通常用于读操作）。</li><li>读操作可以并发分配给不同的连接，写操作仍然会被串行化。</li></ul></li></ol><p>结论：</p><ul><li><strong>单独使用 FMDatabase → 线程不安全</strong></li><li><strong>使用 FMDatabaseQueue/Pool → 线程安全</strong></li></ul><p>8.用过哪些锁？效率比较；@synchronized 的作用是什么？</p><ol><li><strong>OSSpinLock（已废弃）</strong><ul><li>自旋锁，忙等，会不断轮询等待锁释放。</li><li>性能很高，但存在优先级反转问题（高优先级线程可能被低优先级线程“饿死”），Apple 已经不推荐使用。</li><li>iOS 10+ 建议用 os_unfair_lock 代替。</li></ul></li><li><strong>os_unfair_lock</strong><ul><li>自旋锁的替代品，会在等待时挂起线程，避免优先级反转。</li><li>适合短时间、高频加锁的场景。</li><li>性能比 pthread_mutex 更好。</li></ul></li><li><strong>pthread_mutex（互斥锁）</strong><ul><li>POSIX 标准互斥锁。</li><li>比较通用，支持递归锁（PTHREAD_MUTEX_RECURSIVE）。</li><li>开销比 os_unfair_lock 大一些，因为需要进入内核等待。</li></ul></li><li><strong>NSLock</strong><ul><li>Objective-C 封装，内部基于 pthread_mutex。</li><li>提供了面向对象的 API，简单易用。</li><li>性能略低于 os_unfair_lock。</li></ul></li><li><strong>NSRecursiveLock</strong><ul><li>递归锁，允许同一线程多次获得同一把锁，避免死锁。</li><li>底层也是 pthread_mutex(recursive)。</li></ul></li><li><strong>NSCondition / NSConditionLock</strong><ul><li>条件锁，用于线程间的条件同步（等待某个条件满足才继续）。</li><li>常用于“生产者—消费者”模型。</li></ul></li><li><strong>dispatch_semaphore</strong><ul><li>GCD 提供的信号量机制。</li><li>可用于资源计数、并发数控制，也可以当成锁来用。</li><li>性能和可控性较好。</li></ul></li><li><strong>@synchronized</strong><ul><li>Objective-C 关键字，基于 objc_sync_enter/objc_sync_exit 实现。</li><li>内部使用哈希表管理对象锁。</li><li>使用简单，但性能比 NSLock 差一些，因为额外做了对象管理和异常处理。</li><li>适合快速实现线程安全，但不推荐在性能敏感场景中使用。</li></ul></li></ol><p>9.上传大图，怎么分片，怎么控制线程最大并发数，怎么告诉web上传进度？上传进度细颗粒度，每片都有哪些状态，现有上传单个图片的方法，怎么实时同步进度</p><p>（1）分片策略</p><ul><li><p><strong>分片大小</strong>：一般 2MB5MB 一片比较合理（20M → 104 片）。</p><ul><li>分片太小：请求数太多，开销大；</li><li>分片太大：失败重传成本高。</li></ul></li><li><p><strong>分片切割</strong>：用 NSData 的 subdataWithRange: 或者 InputStream，把整张图片按顺序拆成多个 NSData。</p></li></ul><p>示例：<br><figure class="highlight objc hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">NSData</span> *imageData = <span class="hljs-built_in">UIImageJPEGRepresentation</span>(image, <span class="hljs-number">0.9</span>);</span><br><span class="line"><span class="hljs-built_in">NSUInteger</span> chunkSize = <span class="hljs-number">2</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>; <span class="hljs-comment">// 2MB</span></span><br><span class="line"><span class="hljs-built_in">NSUInteger</span> length = [imageData length];</span><br><span class="line"><span class="hljs-built_in">NSUInteger</span> offset = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-built_in">NSMutableArray</span> *chunks = [<span class="hljs-built_in">NSMutableArray</span> array];</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">while</span> (offset &lt; length) &#123;</span><br><span class="line">    <span class="hljs-built_in">NSUInteger</span> thisChunkSize = MIN(chunkSize, length - offset);</span><br><span class="line">    <span class="hljs-built_in">NSData</span>* chunk = [imageData subdataWithRange:<span class="hljs-built_in">NSMakeRange</span>(offset, thisChunkSize)];</span><br><span class="line">    [chunks addObject:chunk];</span><br><span class="line">    offset += thisChunkSize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>（2）控制并发数</p><ul><li><strong>不要一次性全部并发上传</strong>（可能耗尽带宽/内存/线程）。</li><li>推荐用 <strong>NSOperationQueue</strong> 或 <strong>GCD 信号量</strong>来限制最大并发数。</li></ul><p>例子：最多并发 3 个分片上传</p><figure class="highlight objc hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">dispatch_semaphore_t semaphore = dispatch_semaphore_create(<span class="hljs-number">3</span>); <span class="hljs-comment">// 最大并发 3</span></span><br><span class="line"><span class="hljs-built_in">dispatch_queue_t</span> queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="hljs-number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-built_in">NSData</span> *chunk <span class="hljs-keyword">in</span> chunks) &#123;</span><br><span class="line">    <span class="hljs-built_in">dispatch_async</span>(queue, ^&#123;</span><br><span class="line">        dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);</span><br><span class="line">        </span><br><span class="line">        [<span class="hljs-keyword">self</span> uploadChunk:chunk completion:^&#123;</span><br><span class="line">            dispatch_semaphore_signal(semaphore);</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要更优雅，可以用 NSOperationQueue，设置 maxConcurrentOperationCount = 3。</p><p>（3）上传进度<br>方式 A: NSURLSessionUploadTask + progress</p><ul><li>每个分片创建一个 NSURLSessionUploadTask，监听其 NSProgress 对象。</li><li>NSProgress 能返回当前上传的字节数，结合所有分片，汇总出整体进度。</li></ul><p>方式B: NSURLSession delegate (更灵活)</p><p>汇总整体进度 所有分片进度的加权平均</p><ul><li>每个分片有状态（Pending/Uploading/Success/Failed）。</li><li>上传时监听 NSURLSession 的进度回调，实时拿到字节数。</li><li>汇总所有分片进度得到整体进度。</li><li>再把整体进度同步给 UI 或 Web。</li></ul><p>10.SDWebImage 加载图片的流程，缓存机制，LRU怎么实现的？加载图片传入了 UIImageView 下载完图片后怎么拿到这个对象，因为是异步的</p><p>（1）SDWebImage 加载图片的流程</p><ol><li>入口：<figure class="highlight objc hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[imageView sd_setImageWithURL:url placeholderImage:<span class="hljs-literal">nil</span> options:<span class="hljs-number">0</span> completed:<span class="hljs-literal">nil</span>];</span><br></pre></td></tr></table></figure></li></ol><p>传入 UIImageView 和 URL 后，会走到 SDWebImageManager 的 loadImageWithURL。</p><ol start="2"><li>检查缓存：<br>•    先查 内存缓存（SDImageCache.memoryCache，底层是 NSCache + LRU）<br>•    内存没有，再查 磁盘缓存（通过 key -&gt; 文件路径 / SQLite 索引）</li><li>下载图片（如果缓存都没有）：<br>•    调用 SDWebImageDownloader，内部基于 NSURLSession 创建下载任务，异步下载数据。<br>•    支持下载队列、并发控制、请求去重、进度回调。</li><li>解码 &amp; 缓存：<br>•    图片数据下载完成后，会进行 解码（decode），避免主线程卡顿。<br>•    然后写入 内存缓存 + 磁盘缓存。</li><li>回调 UI：<br>•    下载完成后，主线程回调，把 UIImage 设置到传入的 UIImageView.image 上。</li></ol><p>（2）缓存机制</p><p>SDWebImage 的缓存分两级：</p><ol><li><strong>内存缓存</strong></li></ol><ul><li><p>使用 NSCache 封装（带自动清理机制，内存紧张时会自动回收）。</p></li><li><p>内部实现了 <strong>LRU (Least Recently Used)</strong> 算法：</p></li></ul><pre><code>- 每次访问一个图片，会把它放到链表头。- 淘汰时从链表尾部移除最久未使用的对象。- 在 SD 里，具体用的是 SDMemoryCache，基于 YYMemoryCache 的思想，维护了一个 **双向链表 + 哈希表** 结构。</code></pre><ol start="2"><li><strong>磁盘缓存</strong></li></ol><ul><li><p>旧版本用 NSKeyedArchiver 直接存二进制文件。</p></li><li><p>新版本用 sqlite + 文件混合存储：</p></li></ul><pre><code>- 小文件直接存 sqlite。- 大文件写到磁盘，sqlite 里保存路径索引。</code></pre><ul><li>有过期策略、容量控制（例如超过 1 周 / 超过 500MB 自动清理）。<br>（3）LRU 实现思路（简化版）<figure class="highlight objc hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// LRU 的核心：哈希表 + 双向链表</span></span><br><span class="line"><span class="hljs-keyword">class</span> LRUCache &#123;</span><br><span class="line">    <span class="hljs-built_in">NSMutableDictionary</span> *dict; <span class="hljs-comment">// key -&gt; node</span></span><br><span class="line">    Node *head, *tail;         <span class="hljs-comment">// 双向链表</span></span><br><span class="line"></span><br><span class="line">    - (<span class="hljs-keyword">id</span>)get:(<span class="hljs-built_in">NSString</span> *)key &#123;</span><br><span class="line">        Node *node = dict[key];</span><br><span class="line">        <span class="hljs-keyword">if</span> (node) &#123;</span><br><span class="line">            [<span class="hljs-keyword">self</span> moveToHead:node]; <span class="hljs-comment">// 最近使用过，移动到头部</span></span><br><span class="line">            <span class="hljs-keyword">return</span> node.value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    - (<span class="hljs-keyword">void</span>)put:(<span class="hljs-built_in">NSString</span> *)key value:(<span class="hljs-keyword">id</span>)value &#123;</span><br><span class="line">        Node *node = dict[key];</span><br><span class="line">        <span class="hljs-keyword">if</span> (node) &#123;</span><br><span class="line">            node.value = value;</span><br><span class="line">            [<span class="hljs-keyword">self</span> moveToHead:node];</span><br><span class="line">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">            node = [[Node alloc] initWithKey:key value:value];</span><br><span class="line">            dict[key] = node;</span><br><span class="line">            [<span class="hljs-keyword">self</span> addToHead:node];</span><br><span class="line">            <span class="hljs-keyword">if</span> (dict.count &gt; capacity) &#123;</span><br><span class="line">                Node *removed = [<span class="hljs-keyword">self</span> removeTail]; <span class="hljs-comment">// 淘汰最久没用的</span></span><br><span class="line">                [dict removeObjectForKey:removed.key];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>（4）UIImageView 与异步回调<br>UIImageView 是通过 AssociatedObject 绑定 URL 的，所以异步回调时 SDWebImage 能知道要给哪个 imageView 设置图。</p><p>11.OOM 怎么避免？</p><p>避免 OOM 的核心就是 减少单次内存峰值 + 控制整体内存占用 + 及时释放资源。实际项目中通常要针对业务做专项优化，比如：<br>    •    大图 -&gt; 缩放解码<br>    •    视频 -&gt; 硬解码，流式处理<br>    •    数据 -&gt; 分页加载，NSCache 管理<br>    •    缓存 -&gt; 收到内存警告立即清理</p><p>12.MVCS 与 SectionProvider 怎么实现的</p><p>二面：</p><p>1.构建提效，怎么定位的是头文件导入的问题</p><ul><li>Xcode 里加上编译参数 -ftime-trace（Clang 10+ 支持），会输出每个编译单元里函数/头文件的编译耗时，可以用 Chrome 打开 .json 文件可视化。</li><li>或者加 -Xclang -ftime-trace 看更详细的时间线。</li></ul><p>2.封装父类沉淀气泡动画与事件分发能力，怎么做的？</p><p>3.随版转为非随实现怎么做的？活动页组件化，组件之间怎么交互</p><p>4.画一下贝壳的架构，平级组件通信，传值</p><p>场景：</p><p>1.没法复现的crash，怎么去处理，如果是内部反馈的，有设备，怎么处理</p><p>（1）收集更多上下文信息</p><ul><li><p>Crash 日志（Crash Report）</p><ul><li>通过 Xcode Organizer（连接 TestFlight/符号化）或第三方平台（如 Firebase Crashlytics、Bugly、友盟）获取。</li><li>确保符号化，得到可读的堆栈。</li></ul></li><li><p>埋点/日志</p><ul><li>在关键逻辑、崩溃堆栈附近增加埋点，把上下文（参数、线程状态、业务数据）上传到日志系统。</li><li>尝试记录 NSError、response 数据、关键对象是否为 nil、线程调用情况。</li></ul></li><li><p>Breadcrumb（面包屑日志）</p><ul><li>记录用户操作轨迹，能帮助复现 crash 前的路径。</li></ul></li></ul><p>（2）分析崩溃堆栈</p><ul><li><p>崩溃类型</p><ul><li>EXC_BAD_ACCESS → 野指针、提前释放对象、越界访问。</li></ul></li><li><p>SIGABRT → 主动调用 abort()，例如断言失败。</p><ul><li>NSInvalidArgumentException → 对象方法找不到。</li><li>Deadlock / Watchdog → UI 卡死，主线程被阻塞。</li></ul></li><li><p>崩溃频率/机型分布</p><ul><li>是集中在特定系统版本、设备、机型？</li></ul></li><li>如果只有个别用户/机型，可能是硬件差异或极端场景。</li></ul><p>（3）推测可能场景</p><p>无法复现的 crash 大多和以下因素相关：</p><ul><li>多线程并发：数据竞争、非线程安全容器（如 NSMutableArray）、UI 更新不在主线程。</li><li>弱网/超时场景：下载/上传中途取消、断点续传异常。</li><li>生命周期问题：VC 已销毁，但异步回调还在访问它。</li><li>三方库 Bug：检查是否依赖版本过低。</li><li>内存压力：大图加载、缓存策略不当。</li></ul><p>（4）间接定位方法</p><ul><li>符号化 Crash 日志 + 版本代码行号 → 锁定出错代码位置。</li><li>异常保护：加入容错机制（比如防越界、防 nil、KVO 移除检查）。</li><li>增加断言/保护：让 crash 更早、更明确地暴露（例如 debug 环境直接 assert）。</li><li>Mock 极端场景：弱网、低内存、后台切前台、旋转、快速频繁操作等。</li></ul><p>（5）修复和验证</p><ul><li>根据堆栈定位加日志、加 guard 判断。</li><li>在本地写小 demo 尝试模拟类似调用链。</li><li>修复后用灰度发布观察 crash 是否下降。</li></ul><p>2.有没有处理卡顿的经验，性能平台来了个卡顿，你会怎么处理</p><p>iOS 上“卡顿”其实就是主线程掉帧，通常是 CPU 或 GPU 在某一帧渲染/计算超时导致的。面试或实际工作里，如果性能平台上报了卡顿，我会按以下步骤来处理：</p><p>（1）先定位问题</p><ul><li><p>确认复现路径：在性能平台（如 Matrix、火焰图、Instruments 采集）找到具体的卡顿堆栈和发生场景。</p></li><li><p>确认卡顿类型：是</p><ul><li>CPU 卡顿（大量计算、JSON 解析、排序、加解密、CoreData、IO）</li><li>GPU 卡顿（视图层级过深、离屏渲染、过多阴影圆角、图片过大缩放）</li><li>I/O 卡顿（大文件读写、数据库慢查询、主线程访问磁盘/网络）</li></ul></li></ul><p>（2） 工具分析</p><ul><li>Instruments → Time Profiler：看 CPU 占用和热点函数。</li><li>Instruments → Core Animation：看是否掉帧，GPU 渲染瓶颈。</li><li>Performance Platform Flame Graph（火焰图）：确认是哪个方法阻塞了主线程。</li><li>Runloop 监控：分析 Runloop 卡住的原因，是否死锁、长任务。</li></ul><p>（3）常见优化方向</p><p><strong>CPU 优化</strong></p><ul><li>耗时操作下放到子线程（JSON 解析、图片解码、CoreData）。</li><li>使用更高效的数据结构和算法。</li><li>尽量减少频繁的对象创建与销毁。</li><li>图片提前解码（YYImage / SDWebImage 已有优化）。</li></ul><p><strong>GPU 优化</strong></p><ul><li>控制视图层级，不要超过必要深度。</li><li>避免频繁离屏渲染：圆角/阴影/遮罩可以通过 cornerRadius+maskToBounds=NO + shadowPath 或使用预处理图片解决。</li><li>图片资源按需缩放到合适分辨率，避免大图直接缩放。</li><li>合理使用异步绘制（比如 YYText、AsyncDisplayKit）。</li></ul><p><strong>I/O 优化</strong></p><ul><li>文件读写/数据库操作放在后台线程。</li><li>SQLite 加索引，CoreData 分批查询。</li><li>网络请求分批、避免主线程等待。</li></ul><p>（4）实际案例处理思路</p><p>假设性能平台报某个页面“进入卡顿”：</p><ol><li><p>打开火焰图，看是不是 viewDidLoad/viewWillAppear 阶段执行了大量计算。</p><ul><li>如果是 JSON/字典转模型 → 下放子线程，或用更快的序列化库（YYModel）。</li><li>如果是 UI 初始化太多 → 分批加载、懒加载、不在首屏就不要一次性建完。</li></ul></li><li><p>如果是滑动列表卡顿：</p><ul><li>检查 Cell 的绘制，是否有圆角 + 阴影导致离屏渲染。</li><li>图片是否未压缩，直接用大图缩放。</li><li>AutoLayout 是否约束复杂，可以改成 frame/手写布局。  </li></ul></li><li><p>如果堆栈显示 MainThread 被某个同步锁阻塞 → 优化并发，避免主线程等待异步结果。</p></li></ol><p>先定位卡顿位置（堆栈/火焰图/Runloop），再根据类型（CPU、GPU、I/O）针对性优化，确保主线程尽量“轻、快、短”。   </p><p>3.快封板了，产品要加一个紧急的功能，评估有风险，你会怎么做？</p><ol><li><strong>确认需求背景</strong><ul><li>我会先和产品确认，这个功能的紧急性和业务价值，判断是否真的必须在当前版本上线。</li></ul></li><li><strong>快速风险评估</strong><ul><li>从代码改动范围、对核心流程的影响、测试时间是否充足、苹果审核时间等方面快速评估风险。</li></ul></li><li><strong>提出多种方案</strong><ul><li><strong>立即实现方案</strong>：风险大，但能满足业务。</li><li><strong>降级/临时方案</strong>：比如通过远程配置、埋点或弱化版本先满足部分诉求。</li><li><strong>延期方案</strong>：保证当前版本质量，把功能放到下个迭代。</li></ul></li><li><strong>沟通与决策</strong><ul><li>把风险和后果客观告知产品和项目负责人，让他们和我一起权衡利弊做决定，而不是我单方面拍板。</li></ul></li><li><strong>技术兜底措施</strong><ul><li>如果最终决定紧急上线，我会尽量把功能设计成可控的，比如加开关、最小化改动，留出核心流程的冒烟测试时间，确保不影响主要用户路径。</li></ul></li></ol><p>4.有没有经历过严重的线上问题，假如现在有个线上问题，你会怎么做？</p><p>1) 立刻要做的（0–30 分钟）——缓解与信息同步（必须）</p><ul><li>报警确认：查看监控 &amp; 崩溃平台（Crashlytics/Sentry/Bugly/AppCenter）确认影响范围/趋势（用户数、错误率、版本、国家）。</li><li>抢占沟通渠道：在 Slack/企业微信/紧急群 建立 incident channel（@oncall、PM、QA、后端、客服、运营、法务）。</li><li>临时公告（外部/内部）：给客服和用户团队一条标准状态消息（示例见下）。</li><li>立即开启指标快照：请求产品/数据同学导出最近 1h/24h 的关键指标（崩溃率、活跃用户、错误事件、留存、支付失败率）。</li><li>如果能做<strong>无代码的快速缓解</strong>（后端开关、feature-flag、下发配置）立即执行并记录时间。</li></ul><p>示例内部消息（Slack/企业群）：</p><blockquote><p>【INCIDENT】iOS 主流程崩溃激增，开始响应。影响：约 X% 活跃用户，版本 vX.Y.Z 占比 Z%。负责人：@xxx（iOS），@yyy（后端）。当前操作：1) 收集日志 2) 尝试后端开关 3) 立刻准备 hotfix。请各组保留通道畅通。</p></blockquote><p>2) 快速诊断（30 分钟内完成初步判断）<br>    •    收集崩溃样本：筛选最频繁的崩溃堆栈（按版本/机型/系统版本分组）。<br>    •    符号化 &amp; 分析：<br>    •    使用 dSYM + Crashlytics/Sentry 自动符号化。<br>    •    查找回归范围：是哪次提交/哪个 release 引入（git bisect / 对照 release note）。<br>    •    判断是否是客户端 bug、SDK 问题、还是后端变更导致。<br>3) 应急缓解（并行进行：30–90 分钟）<br>    •    如果能用后端/配置开关解决（例如禁用某特性、回退后端接口），优先做：<br>    •    请求后端下线/回滚相关接口或加速降级逻辑。<br>    •    如果必须在客户端修复：<br>    •    创建 hotfix 分支并 cherry-pick 修复 commit。<br>    •    本地与 CI 快跑 smoke tests；如果公司有内部企业签名/MDM，优先发内测/灰度：<br>    •    TestFlight 内部 + 外部分组（如果 Apple 审核不可控，使用企业签名或私有分发先行）。<br>    •    若无法快速上新：考虑在服务器侧做兼容性保护或向客户端下发最新配置来绕开 bug。<br>4) 发布策略（1–4 小时）<br>    •    紧急修复后优先做 灰度/阶段发布：<br>    •    TestFlight → 小比例外部用户 → Phased Release（App Store）或按地区分批上架。<br>    •    提交 App Store 时写清楚 Release Notes &amp; Contact（加快审核时常用“critical bug fix”）。<br>    •    在发布前必须做回归验证（关键路径、支付、登录、崩溃率采样）。</p><p>5) 复盘与长期修复（事故结束后 24–72 小时）<br>    •    召开 postmortem：记录时间线（detection → mitigation → fix → release）、根因、影响、教训、责任与改进计划。<br>    •    输出可执行改进项（例如：增加监控阈值、改善异常处理、引入 feature flags、扩展自动化回滚、完善 CI 流程）。<br>    •    更新 runbook，把此次步骤写成可重复的 playbook。<br>6) 工具 &amp; 技术点清单（作为 Senior iOS 要会的）<br>    •    崩溃分析：Crashlytics、Sentry、Bugly、App Center；dSYM 管理（Bitcode 环境需注意 dSYM 对应）。<br>    •    日志收集：自定义日志 + 采样（可用 OSLog、ELK、Datadog）、网络抓包（Charles/Proxyman）。<br>    •    回滚手段：后端开关、feature-flag（LaunchDarkly/Unleash）、灰度发布。<br>    •    发布渠道：TestFlight、企业签名、App Store Phased Release；熟悉 Apple 审核时间与加速审批渠道。<br>    •    Git 流程：hotfix 分支、cherry-pick、CI 快跑、tag/release。<br>    •    常用命令/操作：symbolicatecrash、atos、xcrun、导出 dSYM、批量下载崩溃日志脚本。</p><p>5.领导交给你一个没有接触过的领域的问题，你会怎么做</p><p>（1）明确目标</p><ul><li><p>和领导对齐需求：弄清楚调研的范围、重点和预期产出。</p><ul><li>是写一个调研报告？</li><li>还是给出可行性方案？</li><li>还是要做 PoC（验证性 demo）？</li></ul></li><li><p>了解业务背景：为什么要调研这项技术，它要解决什么问题。</p></li></ul><p>（2）快速建立基本认知</p><ul><li>官方文档、白皮书、开源项目主页 → 搞清楚基本概念和定位。</li><li>行业文章、技术博客、会议演讲视频 → 获取发展趋势和实际案例。</li><li>如果有竞品或友商应用场景 → 看他们是如何应用的。</li></ul><p>（3）梳理核心问题</p><p>围绕调研目标，提炼出关键点，比如：</p><ul><li>技术特性：优缺点、适用场景、技术原理。</li><li>使用成本：学习成本、迁移成本、运维成本。</li><li>风险点：稳定性、性能、社区活跃度、安全性。</li><li>替代方案：和现有技术的对比。</li></ul><p>（4）实践验证</p><ul><li>搭建最小可运行的 Demo（能跑起来最关键的功能）。</li><li>尝试集成到现有项目中的某个小模块，看看兼容性和实际表现。</li><li>记录踩坑点，避免团队后续重复。</li></ul><p>（5）整理成果并汇报</p><ul><li>写调研文档（背景、结论、对比、风险、建议）。</li><li>结论要有 定性分析（优劣势）+ 定量指标（性能、内存、开发工时等）。</li><li>提供清晰的建议：是否引入、如何引入、替代方案是什么。</li></ul><p>核心思路是 先明确目标 → 快速建立知识框架 → 针对核心问题深挖 → 实践验证 → 形成可落地的结论。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;米可世界&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="面试题" scheme="http://soso.wiki/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试" scheme="http://soso.wiki/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="米可世界" scheme="http://soso.wiki/tags/%E7%B1%B3%E5%8F%AF%E4%B8%96%E7%95%8C/"/>
    
  </entry>
  
  <entry>
    <title>京东金融</title>
    <link href="http://soso.wiki/2025-09-23-%E4%BA%AC%E4%B8%9C%E9%87%91%E8%9E%8D/"/>
    <id>http://soso.wiki/2025-09-23-京东金融/</id>
    <published>2025-09-23T09:00:00.000Z</published>
    <updated>2025-09-25T14:30:10.033Z</updated>
    
    <content type="html"><![CDATA[<p>京东金融<br><a id="more"></a></p><p>1.组件化，优缺点</p><p>2.SDK版本，A、B组件依赖 C，都改了 C 组件的版本，怎么保证功能可用性</p><p>3.主导的项目，SDK 体积优化，未使用的方法怎么避免误判</p><p>4.鸿蒙开发了哪些页面，列表 List 里的不同组件判断是用 Switch 吗？用过 LazyForEach 吗？JSON 转模型怎么转的？</p><p>5.有没有接触 VisionPro、机器学习、实况活动</p><p>6.规划</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;京东金融&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="面试题" scheme="http://soso.wiki/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试" scheme="http://soso.wiki/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="京东金融" scheme="http://soso.wiki/tags/%E4%BA%AC%E4%B8%9C%E9%87%91%E8%9E%8D/"/>
    
  </entry>
  
  <entry>
    <title>掌阅</title>
    <link href="http://soso.wiki/%E6%8E%8C%E9%98%85/"/>
    <id>http://soso.wiki/掌阅/</id>
    <published>2025-09-23T06:00:00.000Z</published>
    <updated>2025-09-28T12:52:15.735Z</updated>
    
    <content type="html"><![CDATA[<p>掌阅<br><a id="more"></a></p><p>一面：</p><p>1.组件化，这些方案的优缺点</p><p>2.怎么知道多次刷新的</p><p>3.解决过的线上问题，OOM，野指针，APM监控是怎么捕获，怎么上报的？</p><p>4.算法：查找两个视图的公共父视图。</p><p>二面：</p><p>1.挑选一个项目介绍自己负责的部分</p><p>2.组件化中页面是一一对应的吗？</p><p>3.AB 实验是怎么做的？</p><p>4.埋点设计：在VIP中心怎么统计到来源</p><p>5.推荐列表划了很多页后卡顿，你觉得是问题吗？有哪些优化手段</p><p>6.讲讲做过的业务</p><p>7.算法：把无序数组变成均匀的V字形数组</p><p>三面：HR</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;掌阅&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="面试题" scheme="http://soso.wiki/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试" scheme="http://soso.wiki/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="掌阅" scheme="http://soso.wiki/tags/%E6%8E%8C%E9%98%85/"/>
    
  </entry>
  
  <entry>
    <title>猫糖跳动</title>
    <link href="http://soso.wiki/%E7%8C%AB%E7%B3%96%E8%B7%B3%E5%8A%A8/"/>
    <id>http://soso.wiki/猫糖跳动/</id>
    <published>2025-09-18T09:00:00.000Z</published>
    <updated>2025-09-18T09:47:27.050Z</updated>
    
    <content type="html"><![CDATA[<p>猫糖跳动<br><a id="more"></a></p><p>1.Swift 的底层原理</p><p>2.Swift 的派发机制</p><p>3.Struct 中包含 Class 里的一个属性，会 copy 吗？</p><p>4.App 启动为什么需要 Rebase&amp;Bind</p><p>5.GCD 怎么取消任务</p><p>6.Hook 和反 Hook 的方法</p><p>7.弱网环境下上传大图</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;猫糖跳动&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="面试题" scheme="http://soso.wiki/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试" scheme="http://soso.wiki/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="猫糖跳动" scheme="http://soso.wiki/tags/%E7%8C%AB%E7%B3%96%E8%B7%B3%E5%8A%A8/"/>
    
  </entry>
  
  <entry>
    <title>首汽约车</title>
    <link href="http://soso.wiki/%E9%A6%96%E6%B1%BD%E7%BA%A6%E8%BD%A6/"/>
    <id>http://soso.wiki/首汽约车/</id>
    <published>2025-09-18T06:00:00.000Z</published>
    <updated>2025-09-18T09:46:40.464Z</updated>
    
    <content type="html"><![CDATA[<p>首汽约车<br><a id="more"></a></p><p>1.组件化</p><p>2.多线程，遇到哪些问题；一个页面8个请求，需要注意什么？数据读写安全</p><p>3.tableView 流畅性</p><p>4.用过 RAC、RxSwift 吗？</p><p>5.用地图多吗？</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首汽约车&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="面试题" scheme="http://soso.wiki/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试" scheme="http://soso.wiki/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="首汽约车" scheme="http://soso.wiki/tags/%E9%A6%96%E6%B1%BD%E7%BA%A6%E8%BD%A6/"/>
    
  </entry>
  
  <entry>
    <title>马上消费金融</title>
    <link href="http://soso.wiki/%E9%A9%AC%E4%B8%8A%E6%B6%88%E8%B4%B9%E9%87%91%E8%9E%8D/"/>
    <id>http://soso.wiki/马上消费金融/</id>
    <published>2025-09-16T09:00:00.000Z</published>
    <updated>2025-09-18T09:45:31.549Z</updated>
    
    <content type="html"><![CDATA[<p>马上消费金融<br><a id="more"></a></p><p>一面：</p><p>项目：</p><p>1.组件化，类似 CTMediator ？平级组件 A 和 B，Protocol 是写A里还是B里？怎么知道对外的API</p><p>2.路由硬编码？</p><p>3.SDK 体积优化，图片占大头吗？构建时长为什么那么长？</p><p>4.私有方法调用其实暴漏出来方法就能解决吧？</p><p>5.MVCS、MVC、MVVM 的共性和区别；SectionProvider 拆分 TableView，Cell 是在什么时候注册的？怎么自注册？在复用的时候判断是否有，用NSDictionary存，没有则创建。</p><p>6.鸿蒙开发是什么水平？</p><p>7.随版-&gt;非随怎么做的？</p><p>8.抽象手百能力，有点类似依赖注入？</p><p>9.接口精简字段怎么保证历史版本没问题？</p><p>10.活动页组件化是类似 DSL 吗？有下发样式吗？</p><p>11.H5 怎么提升访问速度？</p><p>12.H5、小程序双向通信方法做了啥？</p><p>13.接口层、JS 监控；遇到堆栈不清晰的怎么处理？</p><p>14.抽离公共组件需要注意什么？</p><p>基础知识：</p><p>1.URL 的组成，#的作用</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://user:pass@www.example.com:8080/path/page.html?id=10&amp;sort=asc#content</span><br></pre></td></tr></table></figure><ul><li><strong>协议</strong>：https</li><li><strong>用户信息</strong>：user:pass</li><li><strong>主机</strong>：<a href="http://www.example.com" target="_blank" rel="noopener">www.example.com</a></li><li><strong>端口</strong>：8080</li><li><strong>路径</strong>：/path/page.html</li><li><strong>查询参数</strong>：id=10&amp;sort=asc</li><li><strong>片段</strong>：content  用 # 引入，通常用于定位页面内部的位置（不会发送到服务器，只在浏览器端解析）</li></ul><p>2.AFN post 请求怎么修改 body 格式</p><p>3.autoreleasepool、Runloop什么时候释放</p><p>算法：括号匹配口述，如果栈提前为空，符合吗？</p><p>栈提前为空，通常意味着字符串里出现了多余的右括号</p><ul><li>在 “())” 里，前两个 () 匹配没问题，但当遇到第三个 ) 时，栈已经空了 → 没有对应的左括号 → <strong>不合法</strong>。</li><li>在 “)(“ 里，第一个就是右括号，栈一开始就空 → <strong>不合法</strong>。</li></ul><p>只有在整个遍历结束后，栈为空，才说明括号完全匹配。</p><p>二面：</p><p>项目</p><p>1.组件间通信</p><p>2.SDK构建时长为啥那么久？组件化应该怎么细分</p><p>3.加载速度优化，缓存的策略</p><p>4.活动页组件化应该是模块化吧</p><p>5.鸿蒙为什么iOS来开发，安卓更接近吧</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;马上消费金融&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="面试题" scheme="http://soso.wiki/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试" scheme="http://soso.wiki/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="马上消费金融" scheme="http://soso.wiki/tags/%E9%A9%AC%E4%B8%8A%E6%B6%88%E8%B4%B9%E9%87%91%E8%9E%8D/"/>
    
  </entry>
  
  <entry>
    <title>雷神网络</title>
    <link href="http://soso.wiki/%E9%9B%B7%E7%A5%9E%E7%BD%91%E7%BB%9C/"/>
    <id>http://soso.wiki/雷神网络/</id>
    <published>2025-09-15T11:00:00.000Z</published>
    <updated>2025-09-16T15:35:32.992Z</updated>
    
    <content type="html"><![CDATA[<p>雷神网络<br><a id="more"></a></p><p>1.Runtime 的流程，实际项目中使用</p><p>2.IM 高并发时怎么避免卡顿？卡顿与即时性，几千条消息</p><p>批量刷新，可以设置积累几条消息后刷新，或多长时间没有消息时刷新；</p><p>用户滑动时不刷新</p><p>3.设计 SDK 怎么考虑安全性，不容易崩溃、扩展性？</p><p>分层、写代码用安全方法、开闭原则、尽可能少的暴漏非必要的属性</p><p>4.鸿蒙和原生开发效率的比较</p><p>5.AI提效做了哪些</p><p>项目：</p><p>1.SDK 构建时长为什么那么长？</p><p>2.百度文库的架构，怎么集成的小程序？</p><p>3.百度小程序跨域怎么解决的？</p><p>4.小程序、H5 双向通信方法小程序提供有，你做的是？</p><p>5.稳定性，崩溃、卡顿检测</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;雷神网络&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="面试题" scheme="http://soso.wiki/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试" scheme="http://soso.wiki/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="雷神网络" scheme="http://soso.wiki/tags/%E9%9B%B7%E7%A5%9E%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>乐信圣文</title>
    <link href="http://soso.wiki/%E4%B9%90%E4%BF%A1%E5%9C%A3%E6%96%87/"/>
    <id>http://soso.wiki/乐信圣文/</id>
    <published>2025-09-15T09:00:00.000Z</published>
    <updated>2025-09-16T15:34:59.479Z</updated>
    
    <content type="html"><![CDATA[<p>乐信圣文<br><a id="more"></a></p><p>编程题：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在输入框中输入“10+2”，点击确定按钮，输出“10+2=12”  支持+-*/ 要求：考虑面向对象、扩展性，如又来了第五种运算%。40分钟</span><br></pre></td></tr></table></figure><p>基础：</p><p>1.@property weak 和 assign 的区别，assign 什么情况下修饰对象，unsafe_unretain 的作用</p><p>2.category 和 extension 的区别，多个 category 实现了同名方法，执行哪个？</p><p>3.通知是同步的还是异步的？</p><p>4.内存泄漏都有哪些场景，除了循环引用还有别的吗？</p><p>5.Runloop 和线程的关系，Mode 的作用，为什么这么设计？除了隔离还有什么作用？Runloop 什么时候停止？</p><p>项目：</p><p>1.构建提效</p><p>2.私有方法调用</p><p>3.MVCS 和 MVC 的区别</p><p>4.子孙组件传值</p><p>另一位面试官：</p><p>原生和跨端的占比</p><p>最近做的项目</p><h2 id="参考答案"><a href="#参考答案" class="headerlink" title="参考答案"></a>参考答案</h2><p>编程题：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在输入框中输入“10+2”，点击确定按钮，输出“10+2=12”  支持+-*/ 要求：考虑面向对象、扩展性，如又来了第五种运算%。40分钟</span><br></pre></td></tr></table></figure><p>使用策略模式和工厂模式</p><p>策略模式：将一系列算法或行为定义成一组可以相互替换的策略类，并让它们在同一个接口下独立实现，从而使得算法的选择可以在运行时决定。</p><p>（1）抽象策略  定义统一接口</p><p>（2）具体策略 实现某个特定的算法逻辑</p><p>（3）上下文 持有策略，并通过它来执行算法</p><ul><li><strong>策略模式</strong>：侧重于 <strong>同一个对象可以有不同的行为</strong>，运行时可切换。</li><li><p><strong>工厂模式</strong>：侧重于 <strong>对象如何被创建</strong>，屏蔽创建的复杂性。</p></li><li><p>运算的 <strong>加减乘除</strong> = <strong>不同的策略（策略模式）</strong></p></li><li>运算类由 <strong>工厂统一创建（工厂模式）</strong></li><li>所以我们用了 <strong>工厂 + 策略</strong> 的组合。</li></ul><figure class="highlight objc hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#import <span class="hljs-meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/// 运算协议</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">@protocol</span> <span class="hljs-title">OperatorProtocol</span> &lt;<span class="hljs-title">NSObject</span>&gt;</span></span><br><span class="line">- (<span class="hljs-keyword">double</span>)calculateWithLeft:(<span class="hljs-keyword">double</span>)left right:(<span class="hljs-keyword">double</span>)right;</span><br><span class="line"><span class="hljs-keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/// 加法</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">AddOperator</span> : <span class="hljs-title">NSObject</span> &lt;<span class="hljs-title">OperatorProtocol</span>&gt;</span></span><br><span class="line"><span class="hljs-keyword">@end</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">@implementation</span> <span class="hljs-title">AddOperator</span></span></span><br><span class="line">- (<span class="hljs-keyword">double</span>)calculateWithLeft:(<span class="hljs-keyword">double</span>)left right:(<span class="hljs-keyword">double</span>)right &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> left + right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/// 减法</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">SubOperator</span> : <span class="hljs-title">NSObject</span> &lt;<span class="hljs-title">OperatorProtocol</span>&gt;</span></span><br><span class="line"><span class="hljs-keyword">@end</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">@implementation</span> <span class="hljs-title">SubOperator</span></span></span><br><span class="line">- (<span class="hljs-keyword">double</span>)calculateWithLeft:(<span class="hljs-keyword">double</span>)left right:(<span class="hljs-keyword">double</span>)right &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> left - right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/// 乘法</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">MulOperator</span> : <span class="hljs-title">NSObject</span> &lt;<span class="hljs-title">OperatorProtocol</span>&gt;</span></span><br><span class="line"><span class="hljs-keyword">@end</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">@implementation</span> <span class="hljs-title">MulOperator</span></span></span><br><span class="line">- (<span class="hljs-keyword">double</span>)calculateWithLeft:(<span class="hljs-keyword">double</span>)left right:(<span class="hljs-keyword">double</span>)right &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> left * right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/// 除法</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">DivOperator</span> : <span class="hljs-title">NSObject</span> &lt;<span class="hljs-title">OperatorProtocol</span>&gt;</span></span><br><span class="line"><span class="hljs-keyword">@end</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">@implementation</span> <span class="hljs-title">DivOperator</span></span></span><br><span class="line">- (<span class="hljs-keyword">double</span>)calculateWithLeft:(<span class="hljs-keyword">double</span>)left right:(<span class="hljs-keyword">double</span>)right &#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (right == <span class="hljs-number">0</span>) &#123;</span><br><span class="line">        <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@"除数不能为0"</span>);</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> left / right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/// 取模</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">ModOperator</span> : <span class="hljs-title">NSObject</span> &lt;<span class="hljs-title">OperatorProtocol</span>&gt;</span></span><br><span class="line"><span class="hljs-keyword">@end</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">@implementation</span> <span class="hljs-title">ModOperator</span></span></span><br><span class="line">- (<span class="hljs-keyword">double</span>)calculateWithLeft:(<span class="hljs-keyword">double</span>)left right:(<span class="hljs-keyword">double</span>)right &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> fmod(left, right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/// 工厂类</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">OperatorFactory</span> : <span class="hljs-title">NSObject</span></span></span><br><span class="line">+ (<span class="hljs-keyword">id</span>&lt;OperatorProtocol&gt;)operatorForSymbol:(<span class="hljs-built_in">NSString</span> *)symbol;</span><br><span class="line"><span class="hljs-keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">@implementation</span> <span class="hljs-title">OperatorFactory</span></span></span><br><span class="line">+ (<span class="hljs-keyword">id</span>&lt;OperatorProtocol&gt;)operatorForSymbol:(<span class="hljs-built_in">NSString</span> *)symbol &#123;</span><br><span class="line">    <span class="hljs-keyword">static</span> <span class="hljs-built_in">NSDictionary</span> *map;</span><br><span class="line">    <span class="hljs-keyword">static</span> <span class="hljs-built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">    <span class="hljs-built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">        map = @&#123;</span><br><span class="line">            <span class="hljs-string">@"+"</span>: [AddOperator new],</span><br><span class="line">            <span class="hljs-string">@"-"</span>: [SubOperator new],</span><br><span class="line">            <span class="hljs-string">@"*"</span>: [MulOperator new],</span><br><span class="line">            <span class="hljs-string">@"/"</span>: [DivOperator new],</span><br><span class="line">            <span class="hljs-string">@"%"</span>: [ModOperator new]</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="hljs-keyword">return</span> map[symbol];</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/// 主控制器逻辑</span></span><br><span class="line"><span class="hljs-keyword">int</span> main(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * argv[]) &#123;</span><br><span class="line">    <span class="hljs-keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        <span class="hljs-comment">// 假设输入框的字符串</span></span><br><span class="line">        <span class="hljs-built_in">NSString</span> *input = <span class="hljs-string">@"10+2"</span>; </span><br><span class="line">        </span><br><span class="line">        <span class="hljs-comment">// 简单解析：找到第一个运算符位置</span></span><br><span class="line">        <span class="hljs-built_in">NSCharacterSet</span> *operators = [<span class="hljs-built_in">NSCharacterSet</span> characterSetWithCharactersInString:<span class="hljs-string">@"+-*/%"</span>];</span><br><span class="line">        <span class="hljs-built_in">NSRange</span> range = [input rangeOfCharacterFromSet:operators];</span><br><span class="line">        </span><br><span class="line">        <span class="hljs-keyword">if</span> (range.location != <span class="hljs-built_in">NSNotFound</span>) &#123;</span><br><span class="line">            <span class="hljs-built_in">NSString</span> *leftStr = [input substringToIndex:range.location];</span><br><span class="line">            <span class="hljs-built_in">NSString</span> *rightStr = [input substringFromIndex:range.location + <span class="hljs-number">1</span>];</span><br><span class="line">            <span class="hljs-built_in">NSString</span> *symbol = [input substringWithRange:range];</span><br><span class="line">            </span><br><span class="line">            <span class="hljs-keyword">double</span> left = [leftStr doubleValue];</span><br><span class="line">            <span class="hljs-keyword">double</span> right = [rightStr doubleValue];</span><br><span class="line">            </span><br><span class="line">            <span class="hljs-keyword">id</span>&lt;OperatorProtocol&gt; op = [OperatorFactory operatorForSymbol:symbol];</span><br><span class="line">            <span class="hljs-keyword">if</span> (op) &#123;</span><br><span class="line">                <span class="hljs-keyword">double</span> result = [op calculateWithLeft:left right:right];</span><br><span class="line">                <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@"%@=%g"</span>, input, result);</span><br><span class="line">            &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@"不支持的运算符: %@"</span>, symbol);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基础：</p><p>1.@property weak 和 assign 的区别，assign 什么情况下修饰对象，unsafe_unretain 的作用</p><p>2.category 和 extension 的区别，多个 category 实现了同名方法，执行哪个？</p><p>3.通知是同步的还是异步的</p><p>同步的</p><p>4.内存泄漏都有哪些场景，除了循环引用还有别的吗？</p><p>循环引用：block、NSTimer、delegate</p><p>非循环引用：非 OC 对象，如 CGImage 等需要手动调用 Release</p><p>5.Runloop 和线程的关系，Mode的作用，为什么这么设计？除了隔离还有什么作用？Runloop 什么时候停止</p><ul><li>主线程的 RunLoop：几乎不停止，除非 App 结束。</li><li>子线程的 RunLoop：<ul><li>没有事件源就退出；</li><li>或者你显式 CFRunLoopStop()；</li><li>或者超时返回；</li><li>或者线程销毁。</li></ul></li></ul><p>项目：</p><p>1.构建提效，类数量 删除2200+头文件，删除未使用的类100+</p><p>2.私有方法调用</p><p>3.MVCS 和 MVC 的区别</p><p>4.子孙组件传值</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;乐信圣文&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="面试题" scheme="http://soso.wiki/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试" scheme="http://soso.wiki/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="乐信圣文" scheme="http://soso.wiki/tags/%E4%B9%90%E4%BF%A1%E5%9C%A3%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>转转</title>
    <link href="http://soso.wiki/2024-09-03-%E8%BD%AC%E8%BD%AC/"/>
    <id>http://soso.wiki/2024-09-03-转转/</id>
    <published>2024-09-03T07:00:00.000Z</published>
    <updated>2025-04-09T12:25:55.933Z</updated>
    
    <content type="html"><![CDATA[<p>转转<br><a id="more"></a></p><p>一面：</p><p>1.活动页组件化，JSON 结构，跳转区分 Scheme 和 HTTP 是谁来处理的？</p><p>2.加载速度优化</p><p>3.检测无用代码是检测的 mach-o 的无用类还是方法？</p><p>4.多个请求完成后通知除了 GCD 还有什么方法？</p><p>5.webView 和原生的交互，设计一个监听原生页面声明周期，通知 H5，（有些需要监听，有些不需要监听）</p><p>6.webView 加载速度优化，项目里用到的</p><p>7.组件化怎么划分的模块，分层</p><p>8.内存管理，项目里常见的循环引用，为什么用 NSProxy，和 NSObject 区别</p><p>二面：</p><p>1.介绍项目亮点</p><p>2.设计原生与 Flutter/H5 交互  上中下三层</p><p>3.iOS 和 H5 交互方法，优缺点</p><p>4.具体规划，目前待遇，offer，期望薪资</p><h1 id="参考答案"><a href="#参考答案" class="headerlink" title="参考答案"></a>参考答案</h1><p>一面：</p><p>1.活动页组件化，JSON 结构，跳转区分 Scheme 和 HTTP 是谁来处理的？</p><p>2.加载速度优化</p><p>3.检测无用代码是检测的 mach-o 的无用类还是方法？</p><p>4.多个请求完成后通知除了 GCD 还有什么方法？</p><p>5.webView 和原生的交互，设计一个监听原生页面声明周期，通知 H5，（有些需要监听，有些不需要监听）</p><p>6.webView 加载速度优化，项目里用到的</p><p>7.组件化怎么划分的模块，分层</p><p>（1）Accessories App附属品</p><p>Watch、Extension、Widget</p><p>（2）Business 业务组件</p><p>文库、网盘、性能监控、付费咨询、Feed、搜索等</p><p>（3）Interface 接口层</p><p>（4）Underlays 服务组件</p><p>搜索工具、Feed通用业务，天气通用数据组件等</p><p>（5）Services 服务组件</p><p>IM、Talos、Performance、UBC、AFX等</p><p>（6）Basics 基础组件</p><p>BDPDevice、Cocoa（BBAFoundation、BBAUIKit、BDPWindow、BDPAppearance、AFX）、Network</p><p>（7）Vendors 三方库</p><p>AFNetworking、SDWebImage、YYModel等</p><p>8.内存管理，项目里常见的循环引用，为什么用 NSProxy，和 NSObject 区别</p><ul><li><code>NSProxy</code> 主要用于代理和消息转发，它提供了一个机制来实现不直接处理方法调用的对象。</li><li><code>NSObject</code> 是所有 Objective-C 对象的基础类，提供了对象管理和通用功能的实现。</li></ul><p>通常情况下，如果你需要实现一种代理模式或远程调用，<code>NSProxy</code> 是合适的选择。如果你在创建一个普通的对象，<code>NSObject</code> 是你通常会继承的类。</p><p>二面：</p><p>1.介绍项目亮点</p><p>2.设计原生与 Flutter/H5 交互  上中下三层</p><p>3.iOS 和 H5 交互方法，优缺点</p><p>4.具体规划，目前待遇，offer，期望薪资</p><h2 id="📘-iOS-面试通关手册（组件化-H5-性能-架构）"><a href="#📘-iOS-面试通关手册（组件化-H5-性能-架构）" class="headerlink" title="📘 iOS 面试通关手册（组件化 / H5 / 性能 / 架构）"></a>📘 iOS 面试通关手册（组件化 / H5 / 性能 / 架构）</h2><hr><h3 id="🧩-一面核心题目详解"><a href="#🧩-一面核心题目详解" class="headerlink" title="🧩 一面核心题目详解"></a>🧩 一面核心题目详解</h3><h4 id="1-活动页组件化，JSON-结构，跳转区分-Scheme-和-HTTP-是谁来处理的？"><a href="#1-活动页组件化，JSON-结构，跳转区分-Scheme-和-HTTP-是谁来处理的？" class="headerlink" title="1. 活动页组件化，JSON 结构，跳转区分 Scheme 和 HTTP 是谁来处理的？"></a>1. 活动页组件化，JSON 结构，跳转区分 Scheme 和 HTTP 是谁来处理的？</h4><p><strong>答案要点：</strong></p><ul><li>JSON 描述跳转目标（如 URL、pageId、params）</li><li><p><code>RouterManager</code>/<code>Navigator</code> 统一解析 URL，决定打开方式：</p><figure class="highlight objc hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">if</span> ([url.scheme isEqualToString:<span class="hljs-string">@"http"</span>] || [url.scheme isEqualToString:<span class="hljs-string">@"https"</span>]) &#123;</span><br><span class="line">    <span class="hljs-comment">// 打开 WebView</span></span><br><span class="line">&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ([url.scheme isEqualToString:<span class="hljs-string">@"app"</span>]) &#123;</span><br><span class="line">    <span class="hljs-comment">// 原生跳转</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>分离跳转逻辑与页面结构，便于动态配置与热更新。</p></li></ul><hr><h4 id="2-加载速度优化"><a href="#2-加载速度优化" class="headerlink" title="2. 加载速度优化"></a>2. 加载速度优化</h4><p><strong>优化方式：</strong></p><ul><li>首屏优化：异步加载、骨架屏占位、按需加载</li><li>图片优化：压缩、缓存（SDWebImage）、懒加载</li><li>数据优化：合并请求、接口聚合、GZIP 压缩</li><li>离线缓存：预加载 HTML、JS Bundle、资源包</li><li>网络优化：HTTP2、多路复用、CDN 配置</li></ul><hr><h4 id="3-检测无用代码是检测-Mach-O-的类还是方法？"><a href="#3-检测无用代码是检测-Mach-O-的类还是方法？" class="headerlink" title="3. 检测无用代码是检测 Mach-O 的类还是方法？"></a>3. 检测无用代码是检测 Mach-O 的类还是方法？</h4><p><strong>答法：</strong></p><ul><li>都可以，通过静态分析：<ul><li><code>LinkMap</code> 文件分析未被引用的符号</li><li><code>Clang 插桩</code>、<code>Swift Demangle</code> 查看未调用的方法</li></ul></li><li>Mach-O 是最终产物，反映“未被链接进二进制”的部分</li></ul><hr><h4 id="4-多请求完成通知除了-GCD，还有什么？"><a href="#4-多请求完成通知除了-GCD，还有什么？" class="headerlink" title="4. 多请求完成通知除了 GCD，还有什么？"></a>4. 多请求完成通知除了 GCD，还有什么？</h4><p><strong>方案：</strong></p><ul><li><code>NSOperationQueue + addDependency</code></li><li>Promise/Future：PromiseKit、Combine、RxSwift</li><li>KVO 监听属性变化，触发 UI 更新</li><li>Dispatch Semaphore：手动控制信号</li></ul><hr><h4 id="5-WebView-与原生交互，监听页面生命周期通知-H5"><a href="#5-WebView-与原生交互，监听页面生命周期通知-H5" class="headerlink" title="5. WebView 与原生交互，监听页面生命周期通知 H5"></a>5. WebView 与原生交互，监听页面生命周期通知 H5</h4><p><strong>设计：</strong></p><ul><li><p>原生页面生命周期调用 JS 通知：</p><figure class="highlight objc hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[webView evaluateJavaScript:<span class="hljs-string">@"window.onNativeLifeCycle('viewDidAppear')"</span>]</span><br></pre></td></tr></table></figure></li><li><p>JS 注册：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">window</span>.onNativeLifeCycle = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">state</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">if</span> (state === <span class="hljs-string">'viewDidAppear'</span>) &#123; <span class="hljs-comment">/* 处理 */</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>可配置控制哪些生命周期需要同步（如通过 JSBridge 参数指定）</p></li></ul><hr><h4 id="6-WebView-加载速度优化（项目中用到的）"><a href="#6-WebView-加载速度优化（项目中用到的）" class="headerlink" title="6. WebView 加载速度优化（项目中用到的）"></a>6. WebView 加载速度优化（项目中用到的）</h4><p><strong>方法：</strong></p><ul><li>离线资源包（JS/CSS/HTML）打包在本地</li><li>WKWebView 复用池（WebViewPool）减少初始化开销</li><li>设置 cachePolicy，合理使用缓存</li><li>禁用插件（如 JS 插件、自动检测）提高启动速度</li></ul><hr><h4 id="7-组件化怎么划分模块-分层？"><a href="#7-组件化怎么划分模块-分层？" class="headerlink" title="7. 组件化怎么划分模块 / 分层？"></a>7. 组件化怎么划分模块 / 分层？</h4><p><strong>推荐结构：</strong></p><ul><li>Base 层：网络、工具类、日志、配置</li><li>UI 层：通用 UI 组件（按钮、卡片、弹窗）</li><li>Biz 层：独立业务模块（登录、支付、商城）</li><li>Service 层：统一服务（埋点、权限、推送）</li><li>Protocol 层：各模块之间解耦协议</li></ul><p><strong>关键词：</strong> 解耦、高内聚、低耦合、模块隔离、可热更新</p><hr><h4 id="8-内存管理：循环引用、NSProxy-与-NSObject-区别"><a href="#8-内存管理：循环引用、NSProxy-与-NSObject-区别" class="headerlink" title="8. 内存管理：循环引用、NSProxy 与 NSObject 区别"></a>8. 内存管理：循环引用、NSProxy 与 NSObject 区别</h4><p><strong>常见循环引用：</strong></p><ul><li>Timer 持有控制器</li><li>Block 捕获 self</li><li>delegate 强引用</li></ul><p><strong>NSProxy 使用：</strong></p><ul><li>中转代理（如 NSTimer）：<figure class="highlight objc hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">NSTimer</span> *timer = [<span class="hljs-built_in">NSTimer</span> scheduledTimerWithTimeInterval:<span class="hljs-number">1</span> target:[WeakProxy proxyWithTarget:<span class="hljs-keyword">self</span>] selector:<span class="hljs-keyword">@selector</span>(run) userInfo:<span class="hljs-literal">nil</span> repeats:<span class="hljs-literal">YES</span>];</span><br></pre></td></tr></table></figure></li></ul><p><strong>与 NSObject 区别：</strong></p><ul><li>NSProxy 是消息转发专用，不继承 NSObject，无默认行为</li><li>NSObject 有默认的内存管理 / KVO / 响应链</li></ul><hr><h3 id="🚀-二面核心题目详解"><a href="#🚀-二面核心题目详解" class="headerlink" title="🚀 二面核心题目详解"></a>🚀 二面核心题目详解</h3><h4 id="1-项目亮点介绍"><a href="#1-项目亮点介绍" class="headerlink" title="1. 项目亮点介绍"></a>1. 项目亮点介绍</h4><p><strong>答题建议：</strong></p><ul><li>选一个“有挑战/成果”的模块深入讲：<ul><li>比如：活动页组件化、加载优化、自研 Bridge 桥接方案</li><li>体现技术落地、团队协作、提效效果</li></ul></li></ul><hr><h4 id="2-原生与-Flutter-H5-交互设计（上下三层）"><a href="#2-原生与-Flutter-H5-交互设计（上下三层）" class="headerlink" title="2. 原生与 Flutter/H5 交互设计（上下三层）"></a>2. 原生与 Flutter/H5 交互设计（上下三层）</h4><p><strong>三层架构：</strong></p><ul><li>上层：业务 API（login、pay、share）</li><li>中层：Bridge 协议定义、参数统一封装（JSON）</li><li>底层：Native 实现，JS 调用处理、回调、权限判断等</li></ul><hr><h4 id="3-iOS-与-H5-交互方法及优缺点"><a href="#3-iOS-与-H5-交互方法及优缺点" class="headerlink" title="3. iOS 与 H5 交互方法及优缺点"></a>3. iOS 与 H5 交互方法及优缺点</h4><table><thead><tr><th>方法</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td><code>evaluateJavaScript</code></td><td>简单直接</td><td>无回调、不安全</td></tr><tr><td><code>WKScriptMessageHandler</code></td><td>安全规范、结构清晰</td><td>配置繁琐，不适合高频交互</td></tr><tr><td>URL Scheme 拦截</td><td>通用性强</td><td>参数受限、安全差</td></tr></tbody></table><hr><h4 id="4-当前待遇-amp-期望薪资"><a href="#4-当前待遇-amp-期望薪资" class="headerlink" title="4. 当前待遇 &amp; 期望薪资"></a>4. 当前待遇 &amp; 期望薪资</h4><p><strong>建议答法：</strong></p><ul><li>当前总包/薪资范围</li><li>期望平台成长 + 技术深度 +回报匹配</li><li>可接受一定灵活性，但看重发展潜力</li></ul><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转转&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="面试题" scheme="http://soso.wiki/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试" scheme="http://soso.wiki/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="转转" scheme="http://soso.wiki/tags/%E8%BD%AC%E8%BD%AC/"/>
    
  </entry>
  
  <entry>
    <title>京东</title>
    <link href="http://soso.wiki/2024-08-29-%E4%BA%AC%E4%B8%9C/"/>
    <id>http://soso.wiki/2024-08-29-京东/</id>
    <published>2024-08-29T09:30:00.000Z</published>
    <updated>2024-09-11T07:53:08.376Z</updated>
    
    <content type="html"><![CDATA[<p>京东<br><a id="more"></a></p><p>一面：</p><p>1.SDK 体积优化</p><p>2.组件化</p><p>3.端到端监控，具体实现</p><p>4.YYModel 的实现原理，和 MJExtension 区别，为什么比 MJExtension 快？</p><p>5.OOM 怎么排查</p><p>6.Facebook 出的异步渲染框架 AsyncDisplayKit 原理</p><p>7.样式字段很多，怎么和逻辑字段分开下发？</p><p>8.跨端方案，Talos lite</p><p>9.怎么提升代码质量</p><p>10.设计模式：策略模式、中介者模式</p><p>11.打点 cell 50%展现时打点</p><p>打点规范，怎么快速找到某一个页面的所有点击点位</p><p>12.产品上的业务指标</p><p>13.读写安全，除了加锁还有哪些方法</p><p>14.算法：实现一个列表，复用，不卡顿，cell 上是多个文本</p><p>二面：</p><p>1.Flutter 与 iOS 交互方法？</p><p>2.Flutter 的 UI 层在哪儿？RN 是原生控件</p><p>3.组件化的 Router 里的映射表什么时候生成？</p><p>4.JSBridge 原理，前端 JS 有哪些异步方法？前端有哪些存储方法，localstorage有大小限制吗？</p><p>5.iOS 打包流程，命令  Xcode build；Cocoapods 打包出来的第三方库是什么形式的？源码还是二进制？.a和.framework 有什么区别？</p><p>6.接口监控</p><p>7.为什么用到动态库，动态库类型是什么 so？</p><p>8.加载速度优化</p><p>9.SDK 体积优化</p><p>10.RN 的原理，怎么转成了原生控件？了解哪些动态化的方案？Weex、小程序等的区别</p><p>11.了解哪些性能优化，滑动流畅性的指标</p><p>12.深拷贝和浅拷贝的区别</p><p>13.App 启动流程，优化手段，main函数有哪些优化地方</p><p>14.发一个 Post 请求，怎么加快速度？Get 和 Post 请求区别，Get 可以将参数放在请求体吗？</p><p>15.触摸屏幕流程</p><p>16.Swift 中 Class 和 Struct 区别，Struct 可以继承吗？</p><p>17.堆和栈的区别</p><p>18.内存 isa</p><p>19.绘制流程</p><p>20.加载速度优化，各个阶段耗时有统计吗？网络的耗时在哪块儿？</p><p>21.IM 的架构</p><p>22.IM 怎么保证消息的顺序</p><h2 id="参考答案"><a href="#参考答案" class="headerlink" title="参考答案"></a>参考答案</h2><p>一面：</p><p>1.SDK体积优化</p><p>2.组件化</p><p>3.端到端监控，具体实现</p><p>4.OOM怎么排查</p><p>5.样式字段很多，怎么和逻辑字段分开下发？</p><p>6.跨端方案，Talos lite</p><p>7.怎么提升代码质量</p><p>8.设计模式：策略模式、中介者模式</p><p>常见的23种设计模式包括：</p><ol><li><strong>创建型模式</strong>：<ul><li>单例模式 (Singleton)</li><li>工厂方法模式 (Factory Method)</li><li>抽象工厂模式 (Abstract Factory)</li><li>建造者模式 (Builder)</li><li>原型模式 (Prototype)</li></ul></li><li><strong>结构型模式</strong>：<ul><li>适配器模式 (Adapter)</li><li>桥接模式 (Bridge)</li><li>组合模式 (Composite)</li><li>装饰器模式 (Decorator)</li><li>外观模式 (Facade)</li><li>享元模式 (Flyweight)</li><li>代理模式 (Proxy)</li></ul></li><li><strong>行为型模式</strong>：<ul><li>责任链模式 (Chain of Responsibility)</li><li>命令模式 (Command)</li><li>解释器模式 (Interpreter)</li><li>迭代器模式 (Iterator)</li><li>中介者模式 (Mediator)</li><li>存储器模式 (Memento)</li><li>观察者模式 (Observer)</li><li>状态模式 (State)</li><li>策略模式 (Strategy)</li><li>模板方法模式 (Template Method)</li><li>访问者模式 (Visitor)</li></ul></li></ol><h4 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a><a href="https://www.runoob.com/design-pattern/mediator-pattern.html" target="_blank" rel="noopener">中介者模式</a></h4><p>中介者模式（Mediator Pattern）是用来降低多个对象和类之间的通信复杂性，属于行为型模式。</p><p>中介者模式定义了一个中介对象来封装一系列对象之间的交互。中介者使各对象之间不需要显式地相互引用，从而使其耦合松散，且可以独立地改变它们之间的交互。</p><h4 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a><a href="https://www.runoob.com/design-pattern/strategy-pattern.html" target="_blank" rel="noopener">策略模式</a></h4><p>在策略模式（Strategy Pattern）中一个类的行为或其算法可以在运行时更改。这种类型的设计模式属于行为型模式。</p><p>在策略模式定义了一系列算法或策略，并将每个算法封装在独立的类中，使得它们可以互相替换。通过使用策略模式，可以在运行时根据需要选择不同的算法，而不需要修改客户端代码。</p><p>在策略模式中，我们创建表示各种策略的对象和一个行为随着策略对象改变而改变的 context 对象。策略对象改变 context 对象的执行算法。</p><p>9.打点 cell 50%展现时打点</p><p>可以使用<code>UITableView</code>的<code>scrollViewDidScroll</code>方法来检测<code>cell</code>的可见区域。具体步骤如下：</p><ol><li><strong>设置UITableViewDelegate</strong>: 确保你的视图控制器实现了<code>UITableViewDelegate</code>协议，并设置<code>delegate</code>。</li><li><strong>计算可见区域</strong>: 在<code>scrollViewDidScroll</code>方法中，计算每个<code>cell</code>的可见区域，并检查它是否至少展现了50%。</li><li><strong>打点逻辑</strong>: 根据计算结果进行打点操作，例如记录数据或发送网络请求。</li></ol><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight objc hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#import <span class="hljs-meta-string">"ViewController.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">ViewController</span> () &lt;<span class="hljs-title">UITableViewDelegate</span>, <span class="hljs-title">UITableViewDataSource</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">weak</span>, <span class="hljs-keyword">nonatomic</span>) <span class="hljs-keyword">IBOutlet</span> <span class="hljs-built_in">UITableView</span> *tableView;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">@implementation</span> <span class="hljs-title">ViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="hljs-keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="hljs-keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="hljs-keyword">self</span>.tableView.delegate = <span class="hljs-keyword">self</span>;</span><br><span class="line">    <span class="hljs-keyword">self</span>.tableView.dataSource = <span class="hljs-keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#pragma mark - UITableViewDataSource</span></span><br><span class="line"></span><br><span class="line">- (<span class="hljs-built_in">NSInteger</span>)tableView:(<span class="hljs-built_in">UITableView</span> *)tableView numberOfRowsInSection:(<span class="hljs-built_in">NSInteger</span>)section &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">100</span>; <span class="hljs-comment">// 示例行数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="hljs-built_in">UITableViewCell</span> *)tableView:(<span class="hljs-built_in">UITableView</span> *)tableView cellForRowAtIndexPath:(<span class="hljs-built_in">NSIndexPath</span> *)indexPath &#123;</span><br><span class="line">    <span class="hljs-built_in">UITableViewCell</span> *cell = [tableView dequeueReusableCellWithIdentifier:<span class="hljs-string">@"cell"</span> forIndexPath:indexPath];</span><br><span class="line">    cell.textLabel.text = [<span class="hljs-built_in">NSString</span> stringWithFormat:<span class="hljs-string">@"Row %ld"</span>, (<span class="hljs-keyword">long</span>)indexPath.row];</span><br><span class="line">    <span class="hljs-keyword">return</span> cell;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#pragma mark - UIScrollViewDelegate</span></span><br><span class="line"></span><br><span class="line">- (<span class="hljs-keyword">void</span>)scrollViewDidScroll:(<span class="hljs-built_in">UIScrollView</span> *)scrollView &#123;</span><br><span class="line">    <span class="hljs-built_in">NSArray</span>&lt;<span class="hljs-built_in">UITableViewCell</span> *&gt; *visibleCells = [<span class="hljs-keyword">self</span>.tableView visibleCells];</span><br><span class="line">    <span class="hljs-built_in">CGRect</span> visibleRect;</span><br><span class="line">    visibleRect.origin = <span class="hljs-keyword">self</span>.tableView.contentOffset;</span><br><span class="line">    visibleRect.size = <span class="hljs-keyword">self</span>.tableView.bounds.size;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">UITableViewCell</span> *cell <span class="hljs-keyword">in</span> visibleCells) &#123;</span><br><span class="line">        <span class="hljs-built_in">CGRect</span> cellRect = [<span class="hljs-keyword">self</span>.tableView convertRect:cell.frame toView:<span class="hljs-keyword">self</span>.tableView.superview];</span><br><span class="line">        <span class="hljs-built_in">CGRect</span> intersection = <span class="hljs-built_in">CGRectIntersection</span>(visibleRect, cellRect);</span><br><span class="line">        <span class="hljs-built_in">CGFloat</span> intersectionRatio = intersection.size.height / cellRect.size.height;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> (intersectionRatio &gt;= <span class="hljs-number">0.5</span>) &#123;</span><br><span class="line">            <span class="hljs-built_in">NSIndexPath</span> *indexPath = [<span class="hljs-keyword">self</span>.tableView indexPathForCell:cell];</span><br><span class="line">            <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@"Cell at %ld is at least 50%% visible."</span>, (<span class="hljs-keyword">long</span>)indexPath.row);</span><br><span class="line">            <span class="hljs-comment">// 打点逻辑，例如记录或发送请求</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">@end</span></span><br></pre></td></tr></table></figure><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ul><li><strong>计算可见区域</strong>：使用<code>convertRect:toView:</code>方法将<code>cell</code>的frame转换到<code>superview</code>的坐标系，然后计算交集区域。</li><li><strong>检查比例</strong>：判断交集区域的高度与<code>cell</code>的总高度的比例是否大于或等于50%。</li></ul><p>这个实现将确保在<code>UITableView</code>滚动时，对每个<code>cell</code>进行检查，并在其至少展现50%时执行打点操作。</p><p>打点规范，怎么快速找到某一个页面的所有点击点位</p><p>10.产品上的业务指标</p><p>11.读写安全，除了加锁还有哪些方法</p><p>12.算法：实现一个列表，复用，不卡顿，cell上是多个文本</p><p>二面：</p><p>1.Flutter 与 iOS 交互方法？</p><p>2.Flutter 的 UI 层在哪儿？RN 是原生控件</p><p>3.组件化的 Router 里的映射表什么时候生成？</p><p>4.JSBridge 原理</p><p>5.iOS 打包流程，命令  Xcode build；Cocoapods 打包出来的第三方库是什么形式的？源码还是二进制？.a和.framework 有什么区别？</p><p>CocoaPods 打包出来的第三方库可以是源码形式，也可以是二进制形式，取决于库的发布方式。</p><ol><li><strong>源码形式</strong>：大多数CocoaPods库以源码形式提供。这意味着CocoaPods会将库的源代码下载到你的项目中，并在构建时编译这些代码。</li><li><strong>二进制形式</strong>：一些库提供二进制预编译版本，以减少编译时间和提高构建速度。在这种情况下，CocoaPods会下载预编译的二进制文件，而不是源码。</li></ol><p>你可以在<code>Podspec</code>文件中检查库的具体形式，通常在<code>source</code>字段中定义了库的来源。如果是二进制库，<code>Podspec</code>会指定二进制文件的URL和相关配置。</p><p><code>.a</code>和<code>.framework</code>是iOS开发中常见的两种二进制文件格式，分别代表静态库和动态库。它们的主要区别如下：</p><ol><li><strong><code>.a</code>（静态库）</strong>：<ul><li><strong>打包形式</strong>：静态库是一个归档文件，包含了多个编译好的目标文件（<code>.o</code>文件）。</li><li><strong>链接方式</strong>：在编译时，静态库的代码会被直接链接到应用程序中。每次构建时，库的代码会被复制到最终的可执行文件中。</li><li><strong>更新</strong>：如果静态库的代码有更新，必须重新编译整个应用程序。</li><li><strong>体积</strong>：由于代码被复制到应用程序中，最终的应用包可能会较大。</li></ul></li><li><strong><code>.framework</code>（动态库）</strong>：<ul><li><strong>打包形式</strong>：动态库是一个文件夹（包），包含库的二进制文件以及相关的资源文件（如头文件和配置文件）。它可以包含多个版本和资源。</li><li><strong>链接方式</strong>：动态库在运行时被加载到内存中。应用程序在运行时与库链接，而不是在编译时。这样，多个应用程序可以共享同一个动态库。</li><li><strong>更新</strong>：更新动态库只需替换库文件，不需要重新编译依赖于该库的应用程序。</li><li><strong>体积</strong>：动态库的使用可以减少最终应用程序的体积，因为库的代码和资源在运行时被共享和加载。</li></ul></li></ol><p>简而言之，<code>.a</code>是静态库，编译时直接包含在应用中；<code>.framework</code>是动态库，在运行时动态加载和共享。</p><p>6.接口监控</p><p>7.为什么用到动态库，动态库类型是什么 so？</p><p>8.加载速度优化</p><p>9.SDK 体积优化</p><p>10.RN 的原理，怎么转成了原生控件？了解哪些动态化的方案？Weex、小程序等的区别</p><p>11.了解哪些性能优化，滑动流畅性的指标</p><p>12.深拷贝和浅拷贝的区别</p><p>13.App 启动流程，优化手段，main函数有哪些优化地方</p><p>14.发一个 Post 请求，怎么加快速度？Get 和 Post 请求区别，Get 可以将参数放在请求体吗？</p><p>15.触摸屏幕流程</p><p>16.Swift 中 Class 和 Struct 区别，Struct 可以继承吗？</p><p>17.堆和栈的区别</p><p>18.内存 isa</p><p>19.绘制流程</p><p>20.加载速度优化，各个阶段耗时有统计吗？网络的耗时在哪块儿？</p><p>21.IM 的架构</p><p>22.IM 怎么保证消息的顺序</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;京东&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="面试题" scheme="http://soso.wiki/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试" scheme="http://soso.wiki/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="京东" scheme="http://soso.wiki/tags/%E4%BA%AC%E4%B8%9C/"/>
    
      <category term="京东搜索" scheme="http://soso.wiki/tags/%E4%BA%AC%E4%B8%9C%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
</feed>
